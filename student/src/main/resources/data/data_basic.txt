{"problemSetProblem": {"id": "298", "label": "练习5-1", "score": 10, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "求m到n之和", "content": "本题要求实现一个计算$$m$$~$$n$$（$$m<n$$）之间所有整数的和的简单函数。\n\n### 函数接口定义：\n```c++\nint sum( int m, int n );\n```\n\n其中`m`和`n`是用户传入的参数，保证有$$m<n$$。函数返回的是$$m$$~$$n$$之间所有整数的和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint sum(int m, int n);\n\nint main()\n{    \n    int m, n;\n\n    scanf(\"%d %d\", &m, &n);\n    printf(\"sum = %d\\n\", sum(m, n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-5 8\n```\n\n### 输出样例：\n```out\nsum = 21\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "379", "description": "本题要求实现一个计算$$m$$~$$n$$（$$m<n$$）之间所有整数的和的简单函数。\n\n### 函数接口定义：\n```c++\nint sum( int m, int n );\n```\n\n其中`m`和`n`是用户传入的参数，保证有$$m<n$$。函数返回的是$$m$$~$$n$$之间所有整数的和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint sum(int m, int n);\n\nint main()\n{    \n    int m, n;\n\n    scanf(\"%d %d\", &m, &n);\n    printf(\"sum = %d\\n\", sum(m, n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-5 8\n```\n\n### 输出样例：\n```out\nsum = 21\n```"}}
{"problemSetProblem": {"id": "299", "label": "练习5-2", "score": 10, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "找两个数中最大者", "content": "本题要求对两个整数a和b，输出其中较大的数。\n\n### 函数接口定义：\n```c++\nint max( int a, int b );\n```\n\n其中`a`和`b`是用户传入的参数，函数返回的是两者中较大的数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint max( int a, int b );\n\nint main()\n{    \n    int a, b;\n\n    scanf(\"%d %d\", &a, &b);\n    printf(\"max = %d\\n\", max(a, b));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-5 8\n```\n\n### 输出样例：\n```out\nmax = 8\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "391", "description": "本题要求对两个整数a和b，输出其中较大的数。\n\n### 函数接口定义：\n```c++\nint max( int a, int b );\n```\n\n其中`a`和`b`是用户传入的参数，函数返回的是两者中较大的数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint max( int a, int b );\n\nint main()\n{    \n    int a, b;\n\n    scanf(\"%d %d\", &a, &b);\n    printf(\"max = %d\\n\", max(a, b));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-5 8\n```\n\n### 输出样例：\n```out\nmax = 8\n```"}}
{"problemSetProblem": {"id": "300", "label": "练习5-3", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "数字金字塔", "content": "本题要求实现函数输出n行数字金字塔。\n\n### 函数接口定义：\n```c++\nvoid pyramid( int n );\n```\n\n其中`n`是用户传入的参数，为[1, 9]的正整数。要求函数按照如样例所示的格式打印出`n`行数字金字塔。注\n\n意每个数字后面跟一个空格。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid pyramid( int n );\n\nint main()\n{    \n    int n;\n\n    scanf(\"%d\", &n);\n    pyramid(n);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n5\n```\n\n### 输出样例：\n```out\n    1 \n   2 2 \n  3 3 3 \n 4 4 4 4 \n5 5 5 5 5 \n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "392", "description": "本题要求实现函数输出n行数字金字塔。\n\n### 函数接口定义：\n```c++\nvoid pyramid( int n );\n```\n\n其中`n`是用户传入的参数，为[1, 9]的正整数。要求函数按照如样例所示的格式打印出`n`行数字金字塔。注\n\n意每个数字后面跟一个空格。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid pyramid( int n );\n\nint main()\n{    \n    int n;\n\n    scanf(\"%d\", &n);\n    pyramid(n);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n5\n```\n\n### 输出样例：\n```out\n    1 \n   2 2 \n  3 3 3 \n 4 4 4 4 \n5 5 5 5 5 \n```"}}
{"problemSetProblem": {"id": "301", "label": "习题5-1", "score": 10, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "符号函数", "content": "本题要求实现符号函数sign(x)。\n\n### 函数接口定义：\n```c++\nint sign( int x );\n```\n其中`x`是用户传入的整型参数。符号函数的定义为：若`x`大于0，`sign(x)` = $$1$$；若`x`等于0，`sign(x)` = $$0$$；否则，`sign(x)` = $$-1$$。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint sign( int x );\n\nint main()\n{\n    int x;\n\n    scanf(\"%d\", &x);\n    printf(\"sign(%d) = %d\\n\", x, sign(x));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n```\n\n### 输出样例：\n```out\nsign(10) = 1\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "393", "description": "本题要求实现符号函数sign(x)。\n\n### 函数接口定义：\n```c++\nint sign( int x );\n```\n其中`x`是用户传入的整型参数。符号函数的定义为：若`x`大于0，`sign(x)` = $$1$$；若`x`等于0，`sign(x)` = $$0$$；否则，`sign(x)` = $$-1$$。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint sign( int x );\n\nint main()\n{\n    int x;\n\n    scanf(\"%d\", &x);\n    printf(\"sign(%d) = %d\\n\", x, sign(x));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n```\n\n### 输出样例：\n```out\nsign(10) = 1\n```"}}
{"problemSetProblem": {"id": "302", "label": "习题5-2", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数求奇数和", "content": "本题要求实现一个函数，计算N个整数中所有奇数的和，同时实现一个判断奇偶性的函数。\n\n### 函数接口定义：\n```c++\nint even( int n );\nint OddSum( int List[], int N );\n```\n其中函数`even`将根据用户传入的参数`n`的奇偶性返回相应值：当`n`为偶数时返回1，否则返回0。函数`OddSum`负责计算并返回传入的`N`个整数`List[]`中所有奇数的和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n#define MAXN 10\n\nint even( int n );\nint OddSum( int List[], int N );\n\nint main()\n{    \n    int List[MAXN], N, i;\n\n    scanf(\"%d\", &N);\n    printf(\"Sum of ( \");\n    for ( i=0; i<N; i++ ) {\n        scanf(\"%d\", &List[i]);\n        if ( even(List[i])==0 )\n            printf(\"%d \", List[i]);\n    }\n    printf(\") = %d\\n\", OddSum(List, N));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n6\n2 -3 7 88 0 15\n```\n\n### 输出样例：\n```out\nSum of ( -3 7 15 ) = 19\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "395", "description": "本题要求实现一个函数，计算N个整数中所有奇数的和，同时实现一个判断奇偶性的函数。\n\n### 函数接口定义：\n```c++\nint even( int n );\nint OddSum( int List[], int N );\n```\n其中函数`even`将根据用户传入的参数`n`的奇偶性返回相应值：当`n`为偶数时返回1，否则返回0。函数`OddSum`负责计算并返回传入的`N`个整数`List[]`中所有奇数的和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n#define MAXN 10\n\nint even( int n );\nint OddSum( int List[], int N );\n\nint main()\n{    \n    int List[MAXN], N, i;\n\n    scanf(\"%d\", &N);\n    printf(\"Sum of ( \");\n    for ( i=0; i<N; i++ ) {\n        scanf(\"%d\", &List[i]);\n        if ( even(List[i])==0 )\n            printf(\"%d \", List[i]);\n    }\n    printf(\") = %d\\n\", OddSum(List, N));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n6\n2 -3 7 88 0 15\n```\n\n### 输出样例：\n```out\nSum of ( -3 7 15 ) = 19\n```"}}
{"problemSetProblem": {"id": "303", "label": "习题5-3", "score": 10, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数计算两点间的距离", "content": "本题要求实现一个函数，对给定平面任意两点坐标$$(x_1, y_1)$$和$$(x_2, y_2)$$，求这两点之间的距离。\n\n### 函数接口定义：\n```c++\ndouble dist( double x1, double y1, double x2, double y2 );\n```\n其中用户传入的参数为平面上两个点的坐标(`x1`, `y1`)和(`x2`, `y2`)，函数`dist`应返回两点间的距离。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\ndouble dist( double x1, double y1, double x2, double y2 );\n\nint main()\n{    \n    double x1, y1, x2, y2;\n\n    scanf(\"%lf %lf %lf %lf\", &x1, &y1, &x2, &y2);\n    printf(\"dist = %.2f\\n\", dist(x1, y1, x2, y2));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10 10 200 100\n```\n\n### 输出样例：\n```out\ndist = 210.24\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "396", "description": "本题要求实现一个函数，对给定平面任意两点坐标$$(x_1, y_1)$$和$$(x_2, y_2)$$，求这两点之间的距离。\n\n### 函数接口定义：\n```c++\ndouble dist( double x1, double y1, double x2, double y2 );\n```\n其中用户传入的参数为平面上两个点的坐标(`x1`, `y1`)和(`x2`, `y2`)，函数`dist`应返回两点间的距离。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\ndouble dist( double x1, double y1, double x2, double y2 );\n\nint main()\n{    \n    double x1, y1, x2, y2;\n\n    scanf(\"%lf %lf %lf %lf\", &x1, &y1, &x2, &y2);\n    printf(\"dist = %.2f\\n\", dist(x1, y1, x2, y2));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10 10 200 100\n```\n\n### 输出样例：\n```out\ndist = 210.24\n```"}}
{"problemSetProblem": {"id": "304", "label": "习题5-4", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数求素数和", "content": "本题要求实现一个判断素数的简单函数、以及利用该函数计算给定区间内素数和的函数。\n\n素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。\n\n### 函数接口定义：\n```c++\nint prime( int p );\nint PrimeSum( int m, int n );\n```\n其中函数`prime`当用户传入参数`p`为素数时返回1，否则返回0；函数`PrimeSum`返回区间[`m`, `n`]内所有素数的和。题目保证用户传入的参数`m`$$\\le$$`n`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint prime( int p );\nint PrimeSum( int m, int n );\n    \nint main()\n{\n    int m, n, p;\n\n    scanf(\"%d %d\", &m, &n);\n    printf(\"Sum of ( \");\n    for( p=m; p<=n; p++ ) {\n        if( prime(p) != 0 )\n            printf(\"%d \", p);\n    }\n    printf(\") = %d\\n\", PrimeSum(m, n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-1 10\n```\n\n### 输出样例：\n```out\nSum of ( 2 3 5 7 ) = 17\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "397", "description": "本题要求实现一个判断素数的简单函数、以及利用该函数计算给定区间内素数和的函数。\n\n素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。\n\n### 函数接口定义：\n```c++\nint prime( int p );\nint PrimeSum( int m, int n );\n```\n其中函数`prime`当用户传入参数`p`为素数时返回1，否则返回0；函数`PrimeSum`返回区间[`m`, `n`]内所有素数的和。题目保证用户传入的参数`m`$$\\le$$`n`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint prime( int p );\nint PrimeSum( int m, int n );\n    \nint main()\n{\n    int m, n, p;\n\n    scanf(\"%d %d\", &m, &n);\n    printf(\"Sum of ( \");\n    for( p=m; p<=n; p++ ) {\n        if( prime(p) != 0 )\n            printf(\"%d \", p);\n    }\n    printf(\") = %d\\n\", PrimeSum(m, n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-1 10\n```\n\n### 输出样例：\n```out\nSum of ( 2 3 5 7 ) = 17\n```"}}
{"problemSetProblem": {"id": "305", "label": "习题5-5", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数统计指定数字的个数", "content": "本题要求实现一个统计整数中指定数字的个数的简单函数。\n\n### 函数接口定义：\n```c++\nint CountDigit( int number, int digit );\n```\n其中`number`是不超过长整型的整数，`digit`为[0, 9]区间内的整数。函数`CountDigit`应返回`number`中`digit`出现的次数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint CountDigit( int number, int digit );\n    \nint main()\n{\n    int number, digit;\n\n    scanf(\"%d %d\", &number, &digit);\n    printf(\"Number of digit %d in %d: %d\\n\", digit, number, CountDigit(number, digit));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-21252 2\n```\n\n### 输出样例：\n```out\nNumber of digit 2 in -21252: 3\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "401", "description": "本题要求实现一个统计整数中指定数字的个数的简单函数。\n\n### 函数接口定义：\n```c++\nint CountDigit( int number, int digit );\n```\n其中`number`是不超过长整型的整数，`digit`为[0, 9]区间内的整数。函数`CountDigit`应返回`number`中`digit`出现的次数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint CountDigit( int number, int digit );\n    \nint main()\n{\n    int number, digit;\n\n    scanf(\"%d %d\", &number, &digit);\n    printf(\"Number of digit %d in %d: %d\\n\", digit, number, CountDigit(number, digit));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-21252 2\n```\n\n### 输出样例：\n```out\nNumber of digit 2 in -21252: 3\n```"}}
{"problemSetProblem": {"id": "306", "label": "习题5-6", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数输出水仙花数", "content": "水仙花数是指一个$$N$$位正整数（$$N\\ge 3$$），它的每个位上的数字的$$N$$次幂之和等于它本身。例如：$$153 = 1^3 + 5^3+ 3^3$$。 本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间$$(m,n)$$内所有的水仙花数。\n\n### 函数接口定义：\n```c++\nint narcissistic( int number );\nvoid PrintN( int m, int n );\n```\n函数`narcissistic`判断`number`是否为水仙花数，是则返回1，否则返回0。\n\n函数`PrintN`则打印开区间(`m`, `n`)内所有的水仙花数，每个数字占一行。题目保证100$$\\le$$`m`$$\\le$$`n`$$\\le$$10000。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint narcissistic( int number );\nvoid PrintN( int m, int n );\n    \nint main()\n{\n    int m, n;\n  \n    scanf(\"%d %d\", &m, &n);\n    if ( narcissistic(m) ) printf(\"%d is a narcissistic number\\n\", m);\n    PrintN(m, n);\n    if ( narcissistic(n) ) printf(\"%d is a narcissistic number\\n\", n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n153 400\n```\n\n### 输出样例：\n```out\n153 is a narcissistic number\n370\n371\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "402", "description": "水仙花数是指一个$$N$$位正整数（$$N\\ge 3$$），它的每个位上的数字的$$N$$次幂之和等于它本身。例如：$$153 = 1^3 + 5^3+ 3^3$$。 本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间$$(m,n)$$内所有的水仙花数。\n\n### 函数接口定义：\n```c++\nint narcissistic( int number );\nvoid PrintN( int m, int n );\n```\n函数`narcissistic`判断`number`是否为水仙花数，是则返回1，否则返回0。\n\n函数`PrintN`则打印开区间(`m`, `n`)内所有的水仙花数，每个数字占一行。题目保证100$$\\le$$`m`$$\\le$$`n`$$\\le$$10000。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint narcissistic( int number );\nvoid PrintN( int m, int n );\n    \nint main()\n{\n    int m, n;\n  \n    scanf(\"%d %d\", &m, &n);\n    if ( narcissistic(m) ) printf(\"%d is a narcissistic number\\n\", m);\n    PrintN(m, n);\n    if ( narcissistic(n) ) printf(\"%d is a narcissistic number\\n\", n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n153 400\n```\n\n### 输出样例：\n```out\n153 is a narcissistic number\n370\n371\n```"}}
{"problemSetProblem": {"id": "307", "label": "习题5-7", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数求余弦函数的近似值", "content": "本题要求实现一个函数，用下列公式求$$\\cos (x)$$的近似值，精确到最后一项的绝对值小于$$e$$：\n\n$$\\cos (x) = x^0 / 0! - x^2 / 2! + x^4 / 4! - x^6 / 6! + \\cdots$$\n\n### 函数接口定义：\n```c++\ndouble funcos( double e, double x );\n```\n其中用户传入的参数为误差上限`e`和自变量`x`；函数`funcos`应返回用给定公式计算出来、并且满足误差要求的$$\\cos (x)$$的近似值。输入输出均在双精度范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\ndouble funcos( double e, double x );\n\nint main()\n{    \n    double e, x;\n\n    scanf(\"%lf %lf\", &e, &x);\n    printf(\"cos(%.2f) = %.6f\\n\", x, funcos(e, x));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n0.01 -3.14\n```\n\n### 输出样例：\n```out\ncos(-3.14) = -0.999899\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "403", "description": "本题要求实现一个函数，用下列公式求$$\\cos (x)$$的近似值，精确到最后一项的绝对值小于$$e$$：\n\n$$\\cos (x) = x^0 / 0! - x^2 / 2! + x^4 / 4! - x^6 / 6! + \\cdots$$\n\n### 函数接口定义：\n```c++\ndouble funcos( double e, double x );\n```\n其中用户传入的参数为误差上限`e`和自变量`x`；函数`funcos`应返回用给定公式计算出来、并且满足误差要求的$$\\cos (x)$$的近似值。输入输出均在双精度范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\ndouble funcos( double e, double x );\n\nint main()\n{    \n    double e, x;\n\n    scanf(\"%lf %lf\", &e, &x);\n    printf(\"cos(%.2f) = %.6f\\n\", x, funcos(e, x));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n0.01 -3.14\n```\n\n### 输出样例：\n```out\ncos(-3.14) = -0.999899\n```"}}
{"problemSetProblem": {"id": "308", "label": "习题6-1", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "分类统计字符个数", "content": "本题要求实现一个函数，统计给定字符串中英文字母、空格或回车、数字字符和其他字符的个数。\n\n### 函数接口定义：\n```c++\nvoid StringCount( char s[] );\n```\n其中 `char s[]` 是用户传入的字符串。函数`StringCount`须在一行内按照\n```\nletter = 英文字母个数, blank = 空格或回车个数, digit = 数字字符个数, other = 其他字符个数\n```\n的格式输出。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXS 15\n\nvoid StringCount( char s[] );\nvoid ReadString( char s[] ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char s[MAXS];\n\n    ReadString(s);\n    StringCount(s);\n\n    return 0;\n}\n\n/* Your function will be put here */\n```\n\n### 输入样例：\n```in\naZ &\n09 Az\n```\n\n### 输出样例：\n```out\nletter = 4, blank = 3, digit = 2, other = 1\n```", "type": "CODE_COMPLETION", "author": "颜晖", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "414", "description": "本题要求实现一个函数，统计给定字符串中英文字母、空格或回车、数字字符和其他字符的个数。\n\n### 函数接口定义：\n```c++\nvoid StringCount( char s[] );\n```\n其中 `char s[]` 是用户传入的字符串。函数`StringCount`须在一行内按照\n```\nletter = 英文字母个数, blank = 空格或回车个数, digit = 数字字符个数, other = 其他字符个数\n```\n的格式输出。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXS 15\n\nvoid StringCount( char s[] );\nvoid ReadString( char s[] ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char s[MAXS];\n\n    ReadString(s);\n    StringCount(s);\n\n    return 0;\n}\n\n/* Your function will be put here */\n```\n\n### 输入样例：\n```in\naZ &\n09 Az\n```\n\n### 输出样例：\n```out\nletter = 4, blank = 3, digit = 2, other = 1\n```"}}
{"problemSetProblem": {"id": "309", "label": "习题6-2", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数求特殊a串数列和", "content": "给定两个均不超过9的正整数$$a$$和$$n$$，要求编写函数求$$a+aa+aaa++\\cdots +aa\\cdots a$$（$$n$$个$$a$$）之和。\n\n### 函数接口定义：\n```c++\nint fn( int a, int n );\nint SumA( int a, int n );\n```\n其中函数`fn`须返回的是`n`个`a`组成的数字；`SumA`返回要求的和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint fn( int a, int n );\nint SumA( int a, int n );\n\t\nint main()\n{\n    int a, n;\n\n    scanf(\"%d %d\", &a, &n);\n    printf(\"fn(%d, %d) = %d\\n\", a, n, fn(a,n));\t\t\n    printf(\"s = %d\\n\", SumA(a,n));\t\n\t\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\nfn(2, 3) = 222\ns = 246\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "415", "description": "给定两个均不超过9的正整数$$a$$和$$n$$，要求编写函数求$$a+aa+aaa++\\cdots +aa\\cdots a$$（$$n$$个$$a$$）之和。\n\n### 函数接口定义：\n```c++\nint fn( int a, int n );\nint SumA( int a, int n );\n```\n其中函数`fn`须返回的是`n`个`a`组成的数字；`SumA`返回要求的和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint fn( int a, int n );\nint SumA( int a, int n );\n\t\nint main()\n{\n    int a, n;\n\n    scanf(\"%d %d\", &a, &n);\n    printf(\"fn(%d, %d) = %d\\n\", a, n, fn(a,n));\t\t\n    printf(\"s = %d\\n\", SumA(a,n));\t\n\t\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\nfn(2, 3) = 222\ns = 246\n```"}}
{"problemSetProblem": {"id": "310", "label": "习题6-3", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6 30\n", "output": "6 is a perfect number\n6 = 1 + 2 + 3\n28 = 1 + 2 + 4 + 7 + 14\n"}, {"name": "", "input": "7 25\n", "output": "No perfect number\n"}, {"name": "", "input": "6 30\n", "output": "6 is a perfect number\n6 = 1 + 2 + 3\n28 = 1 + 2 + 4 + 7 + 14\n"}, {"name": "", "input": "7 25\n", "output": "No perfect number\n"}], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数输出指定范围内的完数", "content": "本题要求实现一个计算整数因子和的简单函数，并利用其实现另一个函数，输出两正整数$$m$$和$$n$$（$$0<m\\le n\\le 10000$$）之间的所有完数。所谓完数就是该数恰好等于除自身外的因子之和。例如：6=1+2+3，其中1、2、3为6的因子。\n\n### 函数接口定义：\n```c++\nint factorsum( int number );\nvoid PrintPN( int m, int n );\n```\n其中函数`factorsum`须返回`int number`的因子和；函数`PrintPN`要逐行输出给定范围[`m`, `n`]内每个完数的因子累加形式的分解式，每个完数占一行，格式为“完数 = 因子1 + 因子2 + ... + 因子k”，其中完数和因子均按递增顺序给出。如果给定区间内没有完数，则输出一行“No perfect number”。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint factorsum( int number );\nvoid PrintPN( int m, int n );\n\t\nint main()\n{\n    int m, n;\n\n    scanf(\"%d %d\", &m, &n);\n    if ( factorsum(m) == m ) printf(\"%d is a perfect number\\n\", m);\n    if ( factorsum(n) == n ) printf(\"%d is a perfect number\\n\", n);\n    PrintPN(m, n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n6 30\n```\n\n### 输出样例1：\n```out\n6 is a perfect number\n6 = 1 + 2 + 3\n28 = 1 + 2 + 4 + 7 + 14\n```\n\n### 输入样例2：\n```in\n7 25\n```\n\n### 输出样例2：\n```out\nNo perfect number\n```\n\n**鸣谢杭州电子科技大学网络空间安全学院李丰同学修正数据！**\n", "type": "CODE_COMPLETION", "author": "陈建海", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "416", "description": "本题要求实现一个计算整数因子和的简单函数，并利用其实现另一个函数，输出两正整数$$m$$和$$n$$（$$0<m\\le n\\le 10000$$）之间的所有完数。所谓完数就是该数恰好等于除自身外的因子之和。例如：6=1+2+3，其中1、2、3为6的因子。\n\n### 函数接口定义：\n```c++\nint factorsum( int number );\nvoid PrintPN( int m, int n );\n```\n其中函数`factorsum`须返回`int number`的因子和；函数`PrintPN`要逐行输出给定范围[`m`, `n`]内每个完数的因子累加形式的分解式，每个完数占一行，格式为“完数 = 因子1 + 因子2 + ... + 因子k”，其中完数和因子均按递增顺序给出。如果给定区间内没有完数，则输出一行“No perfect number”。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint factorsum( int number );\nvoid PrintPN( int m, int n );\n\t\nint main()\n{\n    int m, n;\n\n    scanf(\"%d %d\", &m, &n);\n    if ( factorsum(m) == m ) printf(\"%d is a perfect number\\n\", m);\n    if ( factorsum(n) == n ) printf(\"%d is a perfect number\\n\", n);\n    PrintPN(m, n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n6 30\n```\n\n### 输出样例1：\n```out\n6 is a perfect number\n6 = 1 + 2 + 3\n28 = 1 + 2 + 4 + 7 + 14\n```\n\n### 输入样例2：\n```in\n7 25\n```\n\n### 输出样例2：\n```out\nNo perfect number\n```\n\n**鸣谢杭州电子科技大学网络空间安全学院李丰同学修正数据！**\n"}}
{"problemSetProblem": {"id": "311", "label": "习题6-4", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数输出指定范围内的Fibonacci数", "content": "本题要求实现一个计算Fibonacci数的简单函数，并利用其实现另一个函数，输出两正整数$$m$$和$$n$$（$$0<m\\le n\\le 10000$$）之间的所有Fibonacci数。所谓Fibonacci数列就是满足任一项数字是前两项的和（最开始两项均定义为1）的数列。\n\n### 函数接口定义：\n```c++\nint fib( int n );\nvoid PrintFN( int m, int n );\n```\n其中函数`fib`须返回第`n`项Fibonacci数；函数`PrintFN`要在一行中输出给定范围[`m`, `n`]内的所有Fibonacci数，相邻数字间有一个空格，行末不得有多余空格。如果给定区间内没有Fibonacci数，则输出一行“No Fibonacci number”。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint fib( int n );\nvoid PrintFN( int m, int n );\n\t\nint main()\n{\n    int m, n, t;\n\n    scanf(\"%d %d %d\", &m, &n, &t);\n    printf(\"fib(%d) = %d\\n\", t, fib(t));\n    PrintFN(m, n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n20 100 7\n```\n\n### 输出样例1：\n```out\nfib(7) = 13\n21 34 55 89\n```\n\n### 输入样例2：\n```\n2000 2500 8\n```\n\n### 输出样例2：\n```\nfib(8) = 21\nNo Fibonacci number\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "417", "description": "本题要求实现一个计算Fibonacci数的简单函数，并利用其实现另一个函数，输出两正整数$$m$$和$$n$$（$$0<m\\le n\\le 10000$$）之间的所有Fibonacci数。所谓Fibonacci数列就是满足任一项数字是前两项的和（最开始两项均定义为1）的数列。\n\n### 函数接口定义：\n```c++\nint fib( int n );\nvoid PrintFN( int m, int n );\n```\n其中函数`fib`须返回第`n`项Fibonacci数；函数`PrintFN`要在一行中输出给定范围[`m`, `n`]内的所有Fibonacci数，相邻数字间有一个空格，行末不得有多余空格。如果给定区间内没有Fibonacci数，则输出一行“No Fibonacci number”。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint fib( int n );\nvoid PrintFN( int m, int n );\n\t\nint main()\n{\n    int m, n, t;\n\n    scanf(\"%d %d %d\", &m, &n, &t);\n    printf(\"fib(%d) = %d\\n\", t, fib(t));\n    PrintFN(m, n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n20 100 7\n```\n\n### 输出样例1：\n```out\nfib(7) = 13\n21 34 55 89\n```\n\n### 输入样例2：\n```\n2000 2500 8\n```\n\n### 输出样例2：\n```\nfib(8) = 21\nNo Fibonacci number\n```"}}
{"problemSetProblem": {"id": "312", "label": "习题6-5", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数验证哥德巴赫猜想", "content": "本题要求实现一个判断素数的简单函数，并利用该函数验证哥德巴赫猜想：任何一个不小于6的偶数均可表示为两个奇素数之和。素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。\n\n### 函数接口定义：\n```c++\nint prime( int p );\nvoid Goldbach( int n );\n```\n其中函数`prime`当用户传入参数`p`为素数时返回1，否则返回0；函数`Goldbach`按照格式“`n`=$$p+q$$”输出`n`的素数分解，其中$$p\\le q$$均为素数。又因为这样的分解不唯一（例如24可以分解为5+19，还可以分解为7+17），要求必须输出所有解中$$p$$最小的解。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint prime( int p );\nvoid Goldbach( int n );\n    \nint main()\n{\n    int m, n, i, cnt;\n\n    scanf(\"%d %d\", &m, &n);\n    if ( prime(m) != 0 ) printf(\"%d is a prime number\\n\", m);\n    if ( m < 6 ) m = 6;\n    if ( m%2 ) m++;\n    cnt = 0;\n    for( i=m; i<=n; i+=2 ) {\n        Goldbach(i);\n        cnt++;\n        if ( cnt%5 ) printf(\", \");\n        else printf(\"\\n\");\n    }\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n89 100\n```\n\n### 输出样例：\n```out\n89 is a prime number\n90=7+83, 92=3+89, 94=5+89, 96=7+89, 98=19+79\n100=3+97, \n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "418", "description": "本题要求实现一个判断素数的简单函数，并利用该函数验证哥德巴赫猜想：任何一个不小于6的偶数均可表示为两个奇素数之和。素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。\n\n### 函数接口定义：\n```c++\nint prime( int p );\nvoid Goldbach( int n );\n```\n其中函数`prime`当用户传入参数`p`为素数时返回1，否则返回0；函数`Goldbach`按照格式“`n`=$$p+q$$”输出`n`的素数分解，其中$$p\\le q$$均为素数。又因为这样的分解不唯一（例如24可以分解为5+19，还可以分解为7+17），要求必须输出所有解中$$p$$最小的解。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint prime( int p );\nvoid Goldbach( int n );\n    \nint main()\n{\n    int m, n, i, cnt;\n\n    scanf(\"%d %d\", &m, &n);\n    if ( prime(m) != 0 ) printf(\"%d is a prime number\\n\", m);\n    if ( m < 6 ) m = 6;\n    if ( m%2 ) m++;\n    cnt = 0;\n    for( i=m; i<=n; i+=2 ) {\n        Goldbach(i);\n        cnt++;\n        if ( cnt%5 ) printf(\", \");\n        else printf(\"\\n\");\n    }\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n89 100\n```\n\n### 输出样例：\n```out\n89 is a prime number\n90=7+83, 92=3+89, 94=5+89, 96=7+89, 98=19+79\n100=3+97, \n```"}}
{"problemSetProblem": {"id": "313", "label": "习题6-6", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数输出一个整数的逆序数", "content": "本题要求实现一个求整数的逆序数的简单函数。\n\n### 函数接口定义：\n```c++\nint reverse( int number );\n```\n其中函数`reverse`须返回用户传入的整型`number`的逆序数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint reverse( int number );\n    \nint main()\n{\n    int n;\n\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", reverse(n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-12340\n```\n\n### 输出样例：\n```out\n-4321\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "419", "description": "本题要求实现一个求整数的逆序数的简单函数。\n\n### 函数接口定义：\n```c++\nint reverse( int number );\n```\n其中函数`reverse`须返回用户传入的整型`number`的逆序数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint reverse( int number );\n    \nint main()\n{\n    int n;\n\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", reverse(n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-12340\n```\n\n### 输出样例：\n```out\n-4321\n```"}}
{"problemSetProblem": {"id": "314", "label": "习题6-7", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "简单计算器", "content": "模拟简单运算器的工作。假设计算器只能进行加减乘除运算，运算数和结果都是整数，四种运算符的优先级相同，按从左到右的顺序计算。\n\n### 输入格式:\n\n输入在一行中给出一个四则运算算式，没有空格，且至少有一个操作数。遇等号”=”说明输入结束。\n\n### 输出格式:\n\n在一行中输出算式的运算结果，或者如果除法分母为0或有非法运算符，则输出错误信息“ERROR”。\n\n### 输入样例:\n```in\n1+2*10-10/2=\n```\n\n### 输出样例:\n```out\n10\n```", "type": "PROGRAMMING", "author": "张彤彧", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "420", "description": "模拟简单运算器的工作。假设计算器只能进行加减乘除运算，运算数和结果都是整数，四种运算符的优先级相同，按从左到右的顺序计算。\n\n### 输入格式:\n\n输入在一行中给出一个四则运算算式，没有空格，且至少有一个操作数。遇等号”=”说明输入结束。\n\n### 输出格式:\n\n在一行中输出算式的运算结果，或者如果除法分母为0或有非法运算符，则输出错误信息“ERROR”。\n\n### 输入样例:\n```in\n1+2*10-10/2=\n```\n\n### 输出样例:\n```out\n10\n```"}}
{"problemSetProblem": {"id": "315", "label": "习题6-8", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "统计一行文本的单词个数", "content": "本题目要求编写程序统计一行字符中单词的个数。所谓“单词”是指连续不含空格的字符串，各单词之间用空格分隔，空格数可以是多个。\n\n### 输入格式:\n\n输入给出一行字符。 \n\n### 输出格式:\n\n在一行中输出单词个数。 \n\n### 输入样例:\n```in\nLet's go to room 209.\n```\n\n### 输出样例:\n```out\n5\n```", "type": "PROGRAMMING", "author": "张彤彧", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "421", "description": "本题目要求编写程序统计一行字符中单词的个数。所谓“单词”是指连续不含空格的字符串，各单词之间用空格分隔，空格数可以是多个。\n\n### 输入格式:\n\n输入给出一行字符。 \n\n### 输出格式:\n\n在一行中输出单词个数。 \n\n### 输入样例:\n```in\nLet's go to room 209.\n```\n\n### 输出样例:\n```out\n5\n```"}}
{"problemSetProblem": {"id": "316", "label": "练习7-2", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6\n2 8 10 1 9 10\n", "output": "10 2\n"}, {"name": "", "input": "6\n2 8 10 1 9 10\n", "output": "10 2\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "求最大值及其下标", "content": "本题要求编写程序，找出给定的$$n$$个数中的最大值及其对应的最小下标（下标从0开始）。\n\n### 输入格式:\n\n输入在第一行中给出一个正整数$$n$$（$$1<n\\le 10$$）。第二行输入$$n$$个整数，用空格分开。\n\n### 输出格式:\n\n在一行中输出最大值及最大值的最小下标，中间用一个空格分开。\n\n### 输入样例:\n```in\n6\n2 8 10 1 9 10\n```\n\n### 输出样例:\n```out\n10 2\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "404", "description": "本题要求编写程序，找出给定的$$n$$个数中的最大值及其对应的最小下标（下标从0开始）。\n\n### 输入格式:\n\n输入在第一行中给出一个正整数$$n$$（$$1<n\\le 10$$）。第二行输入$$n$$个整数，用空格分开。\n\n### 输出格式:\n\n在一行中输出最大值及最大值的最小下标，中间用一个空格分开。\n\n### 输入样例:\n```in\n6\n2 8 10 1 9 10\n```\n\n### 输出样例:\n```out\n10 2\n```"}}
{"problemSetProblem": {"id": "317", "label": "练习7-3", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "将数组中的数逆序存放", "content": "本题要求编写程序，将给定的$$n$$个整数存入数组中，将数组中的这$$n$$个数逆序存放，再按顺序输出数组中的元素。\n\n### 输入格式:\n\n输入在第一行中给出一个正整数$$n$$（$$1\\le n\\le 10$$）。第二行输入$$n$$个整数，用空格分开。\n\n### 输出格式:\n\n在一行中输出这$$n$$个整数的处理结果，相邻数字中间用一个空格分开，行末不得有多余空格。\n\n### 输入样例:\n```in\n4\n10 8 1 2\n```\n\n### 输出样例:\n```out\n2 1 8 10\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "405", "description": "本题要求编写程序，将给定的$$n$$个整数存入数组中，将数组中的这$$n$$个数逆序存放，再按顺序输出数组中的元素。\n\n### 输入格式:\n\n输入在第一行中给出一个正整数$$n$$（$$1\\le n\\le 10$$）。第二行输入$$n$$个整数，用空格分开。\n\n### 输出格式:\n\n在一行中输出这$$n$$个整数的处理结果，相邻数字中间用一个空格分开，行末不得有多余空格。\n\n### 输入样例:\n```in\n4\n10 8 1 2\n```\n\n### 输出样例:\n```out\n2 1 8 10\n```"}}
{"problemSetProblem": {"id": "318", "label": "练习7-4", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "找出不是两个数组共有的元素", "content": "给定两个整型数组，本题要求找出不是两者共有的元素。\n\n### 输入格式:\n\n输入分别在两行中给出两个整型数组，每行先给出正整数$$N$$（$$\\le 20$$），随后是$$N$$个整数，其间以空格分隔。 \n\n### 输出格式:\n\n在一行中按照数字给出的顺序输出不是两数组共有的元素，数字间以空格分隔，但行末不得有多余的空格。题目保证至少存在一个这样的数字。同一数字不重复输出。 \n\n### 输入样例:\n```in\n10 3 -5 2 8 0 3 5 -15 9 100\n11 6 4 8 2 6 -5 9 0 100 8 1\n```\n\n### 输出样例:\n```out\n3 5 -15 6 4 1\n```", "type": "PROGRAMMING", "author": "张彤彧", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "406", "description": "给定两个整型数组，本题要求找出不是两者共有的元素。\n\n### 输入格式:\n\n输入分别在两行中给出两个整型数组，每行先给出正整数$$N$$（$$\\le 20$$），随后是$$N$$个整数，其间以空格分隔。 \n\n### 输出格式:\n\n在一行中按照数字给出的顺序输出不是两数组共有的元素，数字间以空格分隔，但行末不得有多余的空格。题目保证至少存在一个这样的数字。同一数字不重复输出。 \n\n### 输入样例:\n```in\n10 3 -5 2 8 0 3 5 -15 9 100\n11 6 4 8 2 6 -5 9 0 100 8 1\n```\n\n### 输出样例:\n```out\n3 5 -15 6 4 1\n```"}}
{"problemSetProblem": {"id": "319", "label": "练习7-7", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "矩阵运算", "content": "给定一个$$n\\times n$$的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。\n### 输入格式:\n\n输入第一行给出正整数$$n$$（$$1<n\\le 10$$）；随后$$n$$行，每行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式:\n\n在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。 \n\n### 输入样例:\n```in\n4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1\n```\n\n### 输出样例:\n```out\n35\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "407", "description": "给定一个$$n\\times n$$的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。\n### 输入格式:\n\n输入第一行给出正整数$$n$$（$$1<n\\le 10$$）；随后$$n$$行，每行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式:\n\n在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。 \n\n### 输入样例:\n```in\n4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1\n```\n\n### 输出样例:\n```out\n35\n```"}}
{"problemSetProblem": {"id": "320", "label": "练习7-8", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "方阵循环右移", "content": "本题要求编写程序，将给定$$n\\times n$$方阵中的每个元素循环向右移$$m$$个位置，即将第$$0$$、$$1$$、$$\\cdots$$、$$n-1$$列变换为第$$n-m$$、$$n-m+1$$、$$\\cdots$$、$$n-1$$、$$0$$、$$1$$、$$\\cdots$$、$$n-m-1$$列。\n\n### 输入格式：\n\n输入第一行给出两个正整数$$m$$和$$n$$（$$1\\le n\\le 6$$）。接下来一共$$n$$行，每行$$n$$个整数，表示一个$$n$$阶的方阵。\n\n### 输出格式：\n\n按照输入格式输出移动后的方阵：即输出$$n$$行，每行$$n$$个整数，每个整数后输出一个空格。\n\n### 输入样例：\n```in\n2 3\n1 2 3\n4 5 6\n7 8 9\n```\n\n### 输出样例：\n```out\n2 3 1 \n5 6 4 \n8 9 7 \n```", "type": "PROGRAMMING", "author": "颜晖", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "408", "description": "本题要求编写程序，将给定$$n\\times n$$方阵中的每个元素循环向右移$$m$$个位置，即将第$$0$$、$$1$$、$$\\cdots$$、$$n-1$$列变换为第$$n-m$$、$$n-m+1$$、$$\\cdots$$、$$n-1$$、$$0$$、$$1$$、$$\\cdots$$、$$n-m-1$$列。\n\n### 输入格式：\n\n输入第一行给出两个正整数$$m$$和$$n$$（$$1\\le n\\le 6$$）。接下来一共$$n$$行，每行$$n$$个整数，表示一个$$n$$阶的方阵。\n\n### 输出格式：\n\n按照输入格式输出移动后的方阵：即输出$$n$$行，每行$$n$$个整数，每个整数后输出一个空格。\n\n### 输入样例：\n```in\n2 3\n1 2 3\n4 5 6\n7 8 9\n```\n\n### 输出样例：\n```out\n2 3 1 \n5 6 4 \n8 9 7 \n```"}}
{"problemSetProblem": {"id": "321", "label": "练习7-9", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "2009/03/02\n", "output": "61\n"}, {"name": "", "input": "2009/03/02\n", "output": "61\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "计算天数", "content": "本题要求编写程序计算某年某月某日是该年中的第几天。\n\n### 输入格式:\n\n输入在一行中按照格式“yyyy/mm/dd”（即“年/月/日”）给出日期。注意：闰年的判别条件是该年年份能被4整除但不能被100整除、或者能被400整除。闰年的2月有29天。 \n\n### 输出格式:\n\n在一行输出日期是该年中的第几天。\n\n### 输入样例1:\n```in\n2009/03/02\n```\n\n### 输出样例1:\n```out\n61\n```\n\n### 输入样例2:\n```\n2000/03/02\n```\n\n### 输出样例2:\n```\n62\n```\n\n**鸣谢湖北汽车工业学院袁科老师补充数据**", "type": "PROGRAMMING", "author": "沈睿", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "409", "description": "本题要求编写程序计算某年某月某日是该年中的第几天。\n\n### 输入格式:\n\n输入在一行中按照格式“yyyy/mm/dd”（即“年/月/日”）给出日期。注意：闰年的判别条件是该年年份能被4整除但不能被100整除、或者能被400整除。闰年的2月有29天。 \n\n### 输出格式:\n\n在一行输出日期是该年中的第几天。\n\n### 输入样例1:\n```in\n2009/03/02\n```\n\n### 输出样例1:\n```out\n61\n```\n\n### 输入样例2:\n```\n2000/03/02\n```\n\n### 输出样例2:\n```\n62\n```\n\n**鸣谢湖北汽车工业学院袁科老师补充数据**"}}
{"problemSetProblem": {"id": "322", "label": "练习7-10", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "查找指定字符", "content": "本题要求编写程序，从给定字符串中查找某指定的字符。\n\n### 输入格式：\n\n输入的第一行是一个待查找的字符。第二行是一个以回车结束的非空字符串（不超过80个字符）。\n\n### 输出格式：\n\n如果找到，在一行内按照格式“index = 下标”输出该字符在字符串中所对应的最大下标（下标从0开始）；否则输出\"Not Found\"。\n\n### 输入样例1：\n```in\nm\nprogramming\n```\n\n### 输出样例1：\n```out\nindex = 7\n```\n\n### 输入样例2：\n```\na\n1234\n```\n\n### 输出样例2：\n```\nNot Found\n```", "type": "PROGRAMMING", "author": "颜晖", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "410", "description": "本题要求编写程序，从给定字符串中查找某指定的字符。\n\n### 输入格式：\n\n输入的第一行是一个待查找的字符。第二行是一个以回车结束的非空字符串（不超过80个字符）。\n\n### 输出格式：\n\n如果找到，在一行内按照格式“index = 下标”输出该字符在字符串中所对应的最大下标（下标从0开始）；否则输出\"Not Found\"。\n\n### 输入样例1：\n```in\nm\nprogramming\n```\n\n### 输出样例1：\n```out\nindex = 7\n```\n\n### 输入样例2：\n```\na\n1234\n```\n\n### 输出样例2：\n```\nNot Found\n```"}}
{"problemSetProblem": {"id": "323", "label": "练习7-11", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "字符串逆序", "content": "输入一个字符串，对该字符串进行逆序，输出逆序后的字符串。 \n\n### 输入格式：\n\n输入在一行中给出一个不超过80个字符长度的、以回车结束的非空字符串。 \n\n### 输出格式：\n\n在一行中输出逆序后的字符串。 \n\n### 输入样例：\n```in\nHello World!\n```\n\n### 输出样例：\n```out\n!dlroW olleH\n```", "type": "PROGRAMMING", "author": "白洪欢", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "411", "description": "输入一个字符串，对该字符串进行逆序，输出逆序后的字符串。 \n\n### 输入格式：\n\n输入在一行中给出一个不超过80个字符长度的、以回车结束的非空字符串。 \n\n### 输出格式：\n\n在一行中输出逆序后的字符串。 \n\n### 输入样例：\n```in\nHello World!\n```\n\n### 输出样例：\n```out\n!dlroW olleH\n```"}}
{"problemSetProblem": {"id": "324", "label": "习题7-1", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "选择法排序", "content": "本题要求将给定的$$n$$个整数从大到小排序后输出。\n\n### 输入格式：\n\n输入第一行给出一个不超过10的正整数$$n$$。第二行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中输出从大到小有序的数列，相邻数字间有一个空格，行末不得有多余空格。\n\n### 输入样例：\n```in\n4\n5 1 7 6\n```\n\n### 输出样例：\n```out\n7 6 5 1\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "422", "description": "本题要求将给定的$$n$$个整数从大到小排序后输出。\n\n### 输入格式：\n\n输入第一行给出一个不超过10的正整数$$n$$。第二行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中输出从大到小有序的数列，相邻数字间有一个空格，行末不得有多余空格。\n\n### 输入样例：\n```in\n4\n5 1 7 6\n```\n\n### 输出样例：\n```out\n7 6 5 1\n```"}}
{"problemSetProblem": {"id": "325", "label": "习题7-2", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3\n1234 2345 3456\n", "output": "3: 3 4\n"}, {"name": "", "input": "3\n1234 2345 3456\n", "output": "3: 3 4\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "求一批整数中出现最多的个位数字", "content": "给定一批整数，分析每个整数的每一位数字，求出现次数最多的个位数字。例如给定3个整数1234、2345、3456，其中出现最多次数的数字是3和4，均出现了3次。\n\n### 输入格式：\n\n输入在第1行中给出正整数$$N$$（$$\\le 1000$$），在第二行中给出$$N$$个不超过整型范围的非负整数，数字间以空格分隔。 \n\n### 输出格式：\n\n在一行中按格式“M: n1 n2 ...”输出，其中M是最大次数，n1、n2、……为出现次数最多的个位数字，按从小到大的顺序排列。数字间以空格分隔，但末尾不得有多余空格。\n\n### 输入样例：\n```in\n3\n1234 2345 3456\n```\n\n### 输出样例：\n```out\n3: 3 4\n```", "type": "PROGRAMMING", "author": "徐镜春", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "412", "description": "给定一批整数，分析每个整数的每一位数字，求出现次数最多的个位数字。例如给定3个整数1234、2345、3456，其中出现最多次数的数字是3和4，均出现了3次。\n\n### 输入格式：\n\n输入在第1行中给出正整数$$N$$（$$\\le 1000$$），在第二行中给出$$N$$个不超过整型范围的非负整数，数字间以空格分隔。 \n\n### 输出格式：\n\n在一行中按格式“M: n1 n2 ...”输出，其中M是最大次数，n1、n2、……为出现次数最多的个位数字，按从小到大的顺序排列。数字间以空格分隔，但末尾不得有多余空格。\n\n### 输入样例：\n```in\n3\n1234 2345 3456\n```\n\n### 输出样例：\n```out\n3: 3 4\n```"}}
{"problemSetProblem": {"id": "326", "label": "习题7-3", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "判断上三角矩阵", "content": "上三角矩阵指主对角线以下的元素都为0的矩阵；主对角线为从矩阵的左上角至右下角的连线。\n\n本题要求编写程序，判断一个给定的方阵是否上三角矩阵。\n\n### 输入格式：\n\n输入第一行给出一个正整数$$T$$，为待测矩阵的个数。接下来给出$$T$$个矩阵的信息：每个矩阵信息的第一行给出一个不超过10的正整数$$n$$。随后$$n$$行，每行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n每个矩阵的判断结果占一行。如果输入的矩阵是上三角矩阵，输出“YES”，否则输出“NO”。\n\n### 输入样例：\n```in\n2\n3\n1 2 3\n0 4 5\n0 0 6\n2\n1 0\n-8 2\n```\n\n### 输出样例：\n```out\nYES\nNO\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "423", "description": "上三角矩阵指主对角线以下的元素都为0的矩阵；主对角线为从矩阵的左上角至右下角的连线。\n\n本题要求编写程序，判断一个给定的方阵是否上三角矩阵。\n\n### 输入格式：\n\n输入第一行给出一个正整数$$T$$，为待测矩阵的个数。接下来给出$$T$$个矩阵的信息：每个矩阵信息的第一行给出一个不超过10的正整数$$n$$。随后$$n$$行，每行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n每个矩阵的判断结果占一行。如果输入的矩阵是上三角矩阵，输出“YES”，否则输出“NO”。\n\n### 输入样例：\n```in\n2\n3\n1 2 3\n0 4 5\n0 0 6\n2\n1 0\n-8 2\n```\n\n### 输出样例：\n```out\nYES\nNO\n```"}}
{"problemSetProblem": {"id": "327", "label": "习题7-4", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "求矩阵各行元素之和", "content": "本题要求编写程序，求一个给定的$$m\\times n$$矩阵各行元素之和。\n\n### 输入格式：\n\n输入第一行给出两个正整数$$m$$和$$n$$（$$1\\le m,n\\le 6$$）。随后$$m$$行，每行给出$$n$$个整数，其间\n\n以空格分隔。\n\n### 输出格式：\n\n每行输出对应矩阵行元素之和。\n\n### 输入样例：\n```in\n3 2\n6 3\n1 -8\n3 12\n```\n\n### 输出样例：\n```out\n9\n-7\n15\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "424", "description": "本题要求编写程序，求一个给定的$$m\\times n$$矩阵各行元素之和。\n\n### 输入格式：\n\n输入第一行给出两个正整数$$m$$和$$n$$（$$1\\le m,n\\le 6$$）。随后$$m$$行，每行给出$$n$$个整数，其间\n\n以空格分隔。\n\n### 输出格式：\n\n每行输出对应矩阵行元素之和。\n\n### 输入样例：\n```in\n3 2\n6 3\n1 -8\n3 12\n```\n\n### 输出样例：\n```out\n9\n-7\n15\n```"}}
{"problemSetProblem": {"id": "328", "label": "习题7-5", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "找鞍点", "content": "一个矩阵元素的“鞍点”是指该位置上的元素值在该行上最大、在该列上最小。\n\n本题要求编写程序，求一个给定的$$n$$阶方阵的鞍点。\n\n### 输入格式：\n\n输入第一行给出一个正整数$$n$$（$$1\\le n\\le 6$$）。随后$$n$$行，每行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n输出在一行中按照“行下标 列下标”（下标从0开始）的格式输出鞍点的位置。如果鞍点不存在，则输出“NONE”。题目保证给出的矩阵至多存在一个鞍点。\n\n### 输入样例1：\n```in\n4\n1 7 4 1\n4 8 3 6\n1 6 1 2\n0 7 8 9\n```\n\n### 输出样例1：\n```out\n2 1\n```\n\n### 输入样例2：\n```\n2\n1 7\n4 1\n```\n\n### 输出样例2：\n```\nNONE\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "425", "description": "一个矩阵元素的“鞍点”是指该位置上的元素值在该行上最大、在该列上最小。\n\n本题要求编写程序，求一个给定的$$n$$阶方阵的鞍点。\n\n### 输入格式：\n\n输入第一行给出一个正整数$$n$$（$$1\\le n\\le 6$$）。随后$$n$$行，每行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n输出在一行中按照“行下标 列下标”（下标从0开始）的格式输出鞍点的位置。如果鞍点不存在，则输出“NONE”。题目保证给出的矩阵至多存在一个鞍点。\n\n### 输入样例1：\n```in\n4\n1 7 4 1\n4 8 3 6\n1 6 1 2\n0 7 8 9\n```\n\n### 输出样例1：\n```out\n2 1\n```\n\n### 输入样例2：\n```\n2\n1 7\n4 1\n```\n\n### 输出样例2：\n```\nNONE\n```"}}
{"problemSetProblem": {"id": "329", "label": "习题7-6", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "统计大写辅音字母", "content": "英文辅音字母是除`A`、`E`、`I`、`O`、`U`以外的字母。本题要求编写程序，统计给定字符串中<b>大写</b>辅音字母的个数。\n\n### 输入格式：\n\n输入在一行中给出一个不超过80个字符、并以回车结束的字符串。\n\n### 输出格式：\n\n输出在一行中给出字符串中大写辅音字母的个数。\n\n### 输入样例：\n```in\nHELLO World!\n```\n\n### 输出样例：\n```out\n4\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "427", "description": "英文辅音字母是除`A`、`E`、`I`、`O`、`U`以外的字母。本题要求编写程序，统计给定字符串中<b>大写</b>辅音字母的个数。\n\n### 输入格式：\n\n输入在一行中给出一个不超过80个字符、并以回车结束的字符串。\n\n### 输出格式：\n\n输出在一行中给出字符串中大写辅音字母的个数。\n\n### 输入样例：\n```in\nHELLO World!\n```\n\n### 输出样例：\n```out\n4\n```"}}
{"problemSetProblem": {"id": "330", "label": "习题7-7", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "字符串替换", "content": "本题要求编写程序，将给定字符串中的大写英文字母按以下对应规则替换：\n\n| 原字母 | 对应字母 | \n|:-----: |:--------:| \n| A | Z | \n| B | Y |\n| C | X |\n| D | W |\n|… |… |\n| X | C |\n| Y | B |\n| Z | A |\n\n### 输入格式：\n\n输入在一行中给出一个不超过80个字符、并以回车结束的字符串。\n\n### 输出格式：\n\n输出在一行中给出替换完成后的字符串。\n\n### 输入样例：\n```in\nOnly the 11 CAPItaL LeTtERS are replaced.\n```\n\n### 输出样例：\n```out\nLnly the 11 XZKRtaO OeGtVIH are replaced.\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "428", "description": "本题要求编写程序，将给定字符串中的大写英文字母按以下对应规则替换：\n\n| 原字母 | 对应字母 | \n|:-----: |:--------:| \n| A | Z | \n| B | Y |\n| C | X |\n| D | W |\n|… |… |\n| X | C |\n| Y | B |\n| Z | A |\n\n### 输入格式：\n\n输入在一行中给出一个不超过80个字符、并以回车结束的字符串。\n\n### 输出格式：\n\n输出在一行中给出替换完成后的字符串。\n\n### 输入样例：\n```in\nOnly the 11 CAPItaL LeTtERS are replaced.\n```\n\n### 输出样例：\n```out\nLnly the 11 XZKRtaO OeGtVIH are replaced.\n```"}}
{"problemSetProblem": {"id": "331", "label": "习题7-8", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "字符串转换成十进制整数", "content": "输入一个以#结束的字符串，本题要求滤去所有的非十六进制字符（不分大小写），组成一个新的表示十六进制数字的字符串，然后将其转换为十进制数后输出。如果在第一个十六进制字符之前存在字符“-”，则代表该数是负数。\n\n### 输入格式：\n\n输入在一行中给出一个以#结束的非空字符串。\n\n### 输出格式：\n\n在一行中输出转换后的十进制数。题目保证输出在长整型范围内。\n\n### 输入样例：\n```in\n+-P-xf4+-1!#\n```\n\n### 输出样例：\n```out\n-3905\n```", "type": "PROGRAMMING", "author": "张彤彧", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "413", "description": "输入一个以#结束的字符串，本题要求滤去所有的非十六进制字符（不分大小写），组成一个新的表示十六进制数字的字符串，然后将其转换为十进制数后输出。如果在第一个十六进制字符之前存在字符“-”，则代表该数是负数。\n\n### 输入格式：\n\n输入在一行中给出一个以#结束的非空字符串。\n\n### 输出格式：\n\n在一行中输出转换后的十进制数。题目保证输出在长整型范围内。\n\n### 输入样例：\n```in\n+-P-xf4+-1!#\n```\n\n### 输出样例：\n```out\n-3905\n```"}}
{"problemSetProblem": {"id": "332", "label": "练习8-2", "score": 10, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "计算两数的和与差", "content": "本题要求实现一个计算输入的两数的和与差的简单函数。\n\n### 函数接口定义：\n```c++\nvoid sum_diff( float op1, float op2, float *psum, float *pdiff );\n```\n其中`op1`和`op2`是输入的两个实数，`*psum`和`*pdiff`是计算得出的和与差。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid sum_diff( float op1, float op2, float *psum, float *pdiff );\n\nint main()\n{\n    float a, b, sum, diff;\n\n    scanf(\"%f %f\", &a, &b);\n    sum_diff(a, b, &sum, &diff);\n    printf(\"The sum is %.2f\\nThe diff is %.2f\\n\", sum, diff);\n\t\n    return 0; \n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n4 6\n```\n\n### 输出样例：\n```out\nThe sum is 10.00\nThe diff is -2.00\n```", "type": "CODE_COMPLETION", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "429", "description": "本题要求实现一个计算输入的两数的和与差的简单函数。\n\n### 函数接口定义：\n```c++\nvoid sum_diff( float op1, float op2, float *psum, float *pdiff );\n```\n其中`op1`和`op2`是输入的两个实数，`*psum`和`*pdiff`是计算得出的和与差。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid sum_diff( float op1, float op2, float *psum, float *pdiff );\n\nint main()\n{\n    float a, b, sum, diff;\n\n    scanf(\"%f %f\", &a, &b);\n    sum_diff(a, b, &sum, &diff);\n    printf(\"The sum is %.2f\\nThe diff is %.2f\\n\", sum, diff);\n\t\n    return 0; \n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n4 6\n```\n\n### 输出样例：\n```out\nThe sum is 10.00\nThe diff is -2.00\n```"}}
{"problemSetProblem": {"id": "333", "label": "练习8-8", "score": 10, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "移动字母", "content": "本题要求编写函数，将输入字符串的前3个字符移到最后。\n\n### 函数接口定义：\n```c++\nvoid Shift( char s[] );\n```\n其中`char s[]`是用户传入的字符串，题目保证其长度不小于3；函数`Shift`须将按照要求变换后的字符串仍然存在`s[]`里。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXS 10\n\nvoid Shift( char s[] );\n\nvoid GetString( char s[] ); /* 实现细节在此不表 */\n\nint main()\n{\n    char s[MAXS];\n\n    GetString(s);\n    Shift(s);\n    printf(\"%s\\n\", s);\n\t\n    return 0; \n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\nabcdef\n```\n\n### 输出样例：\n```out\ndefabc\n```", "type": "CODE_COMPLETION", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "430", "description": "本题要求编写函数，将输入字符串的前3个字符移到最后。\n\n### 函数接口定义：\n```c++\nvoid Shift( char s[] );\n```\n其中`char s[]`是用户传入的字符串，题目保证其长度不小于3；函数`Shift`须将按照要求变换后的字符串仍然存在`s[]`里。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXS 10\n\nvoid Shift( char s[] );\n\nvoid GetString( char s[] ); /* 实现细节在此不表 */\n\nint main()\n{\n    char s[MAXS];\n\n    GetString(s);\n    Shift(s);\n    printf(\"%s\\n\", s);\n\t\n    return 0; \n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\nabcdef\n```\n\n### 输出样例：\n```out\ndefabc\n```"}}
{"problemSetProblem": {"id": "334", "label": "习题8-1", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "拆分实数的整数与小数部分", "content": "本题要求实现一个拆分实数的整数与小数部分的简单函数。\n\n### 函数接口定义：\n```c++\nvoid splitfloat( float x, int *intpart, float *fracpart );\n```\n其中`x`是被拆分的实数（0$$\\le$$`x`$$<$$10000），`*intpart`和`*fracpart`分别是将实数x拆分出来的整数部分与小数部分。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid splitfloat( float x, int *intpart, float *fracpart );\n\nint main()\n{\n    float x, fracpart;\n    int intpart;\n    \n    scanf(\"%f\", &x);\n    splitfloat(x, &intpart, &fracpart);\n    printf(\"The integer part is %d\\n\", intpart);\n    printf(\"The fractional part is %g\\n\", fracpart);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2.718\n```\n\n### 输出样例：\n```out\nThe integer part is 2\nThe fractional part is 0.718\n```", "type": "CODE_COMPLETION", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "431", "description": "本题要求实现一个拆分实数的整数与小数部分的简单函数。\n\n### 函数接口定义：\n```c++\nvoid splitfloat( float x, int *intpart, float *fracpart );\n```\n其中`x`是被拆分的实数（0$$\\le$$`x`$$<$$10000），`*intpart`和`*fracpart`分别是将实数x拆分出来的整数部分与小数部分。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid splitfloat( float x, int *intpart, float *fracpart );\n\nint main()\n{\n    float x, fracpart;\n    int intpart;\n    \n    scanf(\"%f\", &x);\n    splitfloat(x, &intpart, &fracpart);\n    printf(\"The integer part is %d\\n\", intpart);\n    printf(\"The fractional part is %g\\n\", fracpart);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2.718\n```\n\n### 输出样例：\n```out\nThe integer part is 2\nThe fractional part is 0.718\n```"}}
{"problemSetProblem": {"id": "335", "label": "习题8-2", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "在数组中查找指定元素", "content": "本题要求实现一个在数组中查找指定元素的简单函数。\n\n### 函数接口定义：\n```c++\nint search( int list[], int n, int x );\n```\n其中`list[]`是用户传入的数组；`n`（$$\\ge 0$$）是`list[]`中元素的个数；`x`是待查找的元素。如果找到\n\n则函数`search`返回相应元素的最小下标（下标从0开始），否则返回$$-1$$。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 10\n\nint search( int list[], int n, int x );\n    \nint main()\n{\n    int i, index, n, x;\n    int a[MAXN];\n\n    scanf(\"%d\", &n);\n    for( i = 0; i < n; i++ )\n        scanf(\"%d\", &a[i]);\n    scanf(\"%d\", &x);\n    index = search( a, n, x );\n    if( index != -1 )\n        printf(\"index = %d\\n\", index);\n    else\n        printf(\"Not found\\n\");\n            \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n5\n1 2 2 5 4\n2\n```\n\n### 输出样例1：\n```out\nindex = 1\n```\n\n### 输入样例2：\n```\n5\n1 2 2 5 4\n0\n```\n\n### 输出样例2：\n```\nNot found\n```", "type": "CODE_COMPLETION", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "432", "description": "本题要求实现一个在数组中查找指定元素的简单函数。\n\n### 函数接口定义：\n```c++\nint search( int list[], int n, int x );\n```\n其中`list[]`是用户传入的数组；`n`（$$\\ge 0$$）是`list[]`中元素的个数；`x`是待查找的元素。如果找到\n\n则函数`search`返回相应元素的最小下标（下标从0开始），否则返回$$-1$$。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 10\n\nint search( int list[], int n, int x );\n    \nint main()\n{\n    int i, index, n, x;\n    int a[MAXN];\n\n    scanf(\"%d\", &n);\n    for( i = 0; i < n; i++ )\n        scanf(\"%d\", &a[i]);\n    scanf(\"%d\", &x);\n    index = search( a, n, x );\n    if( index != -1 )\n        printf(\"index = %d\\n\", index);\n    else\n        printf(\"Not found\\n\");\n            \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n5\n1 2 2 5 4\n2\n```\n\n### 输出样例1：\n```out\nindex = 1\n```\n\n### 输入样例2：\n```\n5\n1 2 2 5 4\n0\n```\n\n### 输出样例2：\n```\nNot found\n```"}}
{"problemSetProblem": {"id": "336", "label": "习题8-3", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "数组循环右移", "content": "本题要求实现一个对数组进行循环右移的简单函数：一个数组$$a$$中存有$$n$$（$$>0$$）个整数，将每个整数循环向右移$$m$$（$$\\ge 0$$）个位置，即将$$a$$中的数据由（$$a_0 a_1 \\cdots a_{n-1}$$）变换为（$$a_{n-m} \\cdots a_{n-1} a_0 a_1 \\cdots a_{n-m-1}$$）（最后$$m$$个数循环移至最前面的$$m$$个位置）。\n\n### 函数接口定义：\n```c++\nint ArrayShift( int a[], int n, int m );\n```\n其中`a[]`是用户传入的数组；`n`是数组的大小；`m`是右移的位数。函数`ArrayShift`须将循环右移后的数组仍然存在`a[]`中。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 10\n\nint ArrayShift( int a[], int n, int m );\n\nint main()\n{\n    int a[MAXN], n, m;\n    int i;\n    \n    scanf(\"%d %d\", &n, &m);\n    for ( i = 0; i < n; i++ ) scanf(\"%d\", &a[i]);\n    \n    ArrayShift(a, n, m);\n    \n    for ( i = 0; i < n; i++ ) {\n        if (i != 0) printf(\" \");\n        printf(\"%d\", a[i]);\n    }\n    printf(\"\\n\");\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n6 2\n1 2 3 4 5 6\n```\n\n### 输出样例：\n```out\n5 6 1 2 3 4\n```", "type": "CODE_COMPLETION", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "433", "description": "本题要求实现一个对数组进行循环右移的简单函数：一个数组$$a$$中存有$$n$$（$$>0$$）个整数，将每个整数循环向右移$$m$$（$$\\ge 0$$）个位置，即将$$a$$中的数据由（$$a_0 a_1 \\cdots a_{n-1}$$）变换为（$$a_{n-m} \\cdots a_{n-1} a_0 a_1 \\cdots a_{n-m-1}$$）（最后$$m$$个数循环移至最前面的$$m$$个位置）。\n\n### 函数接口定义：\n```c++\nint ArrayShift( int a[], int n, int m );\n```\n其中`a[]`是用户传入的数组；`n`是数组的大小；`m`是右移的位数。函数`ArrayShift`须将循环右移后的数组仍然存在`a[]`中。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 10\n\nint ArrayShift( int a[], int n, int m );\n\nint main()\n{\n    int a[MAXN], n, m;\n    int i;\n    \n    scanf(\"%d %d\", &n, &m);\n    for ( i = 0; i < n; i++ ) scanf(\"%d\", &a[i]);\n    \n    ArrayShift(a, n, m);\n    \n    for ( i = 0; i < n; i++ ) {\n        if (i != 0) printf(\" \");\n        printf(\"%d\", a[i]);\n    }\n    printf(\"\\n\");\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n6 2\n1 2 3 4 5 6\n```\n\n### 输出样例：\n```out\n5 6 1 2 3 4\n```"}}
{"problemSetProblem": {"id": "337", "label": "习题8-4", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "报数", "content": "报数游戏是这样的：有$$n$$个人围成一圈，按顺序从1到$$n$$编好号。从第一个人开始报数，报到$$m$$（$$<n$$）的人退出圈子；下一个人从1开始报数，报到$$m$$的人退出圈子。如此下去，直到留下最后一个人。\n\n本题要求编写函数，给出每个人的退出顺序编号。\n\n### 函数接口定义：\n```c++\nvoid CountOff( int n, int m, int out[] );\n```\n其中`n`是初始人数；`m`是游戏规定的退出位次（保证为小于$$n$$的正整数）。函数`CountOff`将每个人的退出顺序编号存在数组`out[]`中。因为C语言数组下标是从0开始的，所以第`i`个位置上的人是第`out[i-1]`个退出的。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 20\n\nvoid CountOff( int n, int m, int out[] );\n\nint main()\n{\n    int out[MAXN], n, m;\n    int i;\n    \n    scanf(\"%d %d\", &n, &m);\n    CountOff( n, m, out );   \n    for ( i = 0; i < n; i++ )\n        printf(\"%d \", out[i]);\n    printf(\"\\n\");\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n11 3\n```\n\n### 输出样例：\n```out\n4 10 1 7 5 2 11 9 3 6 8 \n```", "type": "CODE_COMPLETION", "author": "徐镜春", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "434", "description": "报数游戏是这样的：有$$n$$个人围成一圈，按顺序从1到$$n$$编好号。从第一个人开始报数，报到$$m$$（$$<n$$）的人退出圈子；下一个人从1开始报数，报到$$m$$的人退出圈子。如此下去，直到留下最后一个人。\n\n本题要求编写函数，给出每个人的退出顺序编号。\n\n### 函数接口定义：\n```c++\nvoid CountOff( int n, int m, int out[] );\n```\n其中`n`是初始人数；`m`是游戏规定的退出位次（保证为小于$$n$$的正整数）。函数`CountOff`将每个人的退出顺序编号存在数组`out[]`中。因为C语言数组下标是从0开始的，所以第`i`个位置上的人是第`out[i-1]`个退出的。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 20\n\nvoid CountOff( int n, int m, int out[] );\n\nint main()\n{\n    int out[MAXN], n, m;\n    int i;\n    \n    scanf(\"%d %d\", &n, &m);\n    CountOff( n, m, out );   \n    for ( i = 0; i < n; i++ )\n        printf(\"%d \", out[i]);\n    printf(\"\\n\");\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n11 3\n```\n\n### 输出样例：\n```out\n4 10 1 7 5 2 11 9 3 6 8 \n```"}}
{"problemSetProblem": {"id": "338", "label": "习题8-5", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用函数实现字符串部分复制", "content": "本题要求编写函数，将输入字符串$$t$$中从第$$m$$个字符开始的全部字符复制到字符串$$s$$中。\n\n### 函数接口定义：\n```c++\nvoid strmcpy( char *t, int m, char *s );\n```\n函数`strmcpy`将输入字符串`char *t`中从第`m`个字符开始的全部字符复制到字符串`char *s`中。若`m`超过输入字符串的长度，则结果字符串应为空串。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 20\n\nvoid strmcpy( char *t, int m, char *s );\nvoid ReadString( char s[] ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char t[MAXN], s[MAXN];\n    int m;\n    \n    scanf(\"%d\\n\", &m);\n    ReadString(t);\n    strmcpy( t, m, s );\n    printf(\"%s\\n\", s);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n7\nhappy new year\n```\n\n### 输出样例：\n```out\nnew year\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "435", "description": "本题要求编写函数，将输入字符串$$t$$中从第$$m$$个字符开始的全部字符复制到字符串$$s$$中。\n\n### 函数接口定义：\n```c++\nvoid strmcpy( char *t, int m, char *s );\n```\n函数`strmcpy`将输入字符串`char *t`中从第`m`个字符开始的全部字符复制到字符串`char *s`中。若`m`超过输入字符串的长度，则结果字符串应为空串。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 20\n\nvoid strmcpy( char *t, int m, char *s );\nvoid ReadString( char s[] ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char t[MAXN], s[MAXN];\n    int m;\n    \n    scanf(\"%d\\n\", &m);\n    ReadString(t);\n    strmcpy( t, m, s );\n    printf(\"%s\\n\", s);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n7\nhappy new year\n```\n\n### 输出样例：\n```out\nnew year\n```"}}
{"problemSetProblem": {"id": "339", "label": "习题8-6", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "a\nhappy new year", "output": "hppy new yer"}, {"name": "", "input": "a\nhappy new year", "output": "hppy new yer"}], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "删除字符", "content": "本题要求实现一个删除字符串中的指定字符的简单函数。\n\n### 函数接口定义：\n```c++\nvoid delchar( char *str, char c );\n```\n其中`char *str`是传入的字符串，`c`是待删除的字符。函数`delchar`的功能是将字符串`str`中出现的所有`c`字符删除。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 20\n\nvoid delchar( char *str, char c );\nvoid ReadString( char s[] ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char str[MAXN], c;\n\n    scanf(\"%c\\n\", &c);\n    ReadString(str);\n    delchar(str, c);\n    printf(\"%s\\n\", str);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\na\nhappy new year\n```\n\n### 输出样例：\n```out\nhppy new yer\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "436", "description": "本题要求实现一个删除字符串中的指定字符的简单函数。\n\n### 函数接口定义：\n```c++\nvoid delchar( char *str, char c );\n```\n其中`char *str`是传入的字符串，`c`是待删除的字符。函数`delchar`的功能是将字符串`str`中出现的所有`c`字符删除。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 20\n\nvoid delchar( char *str, char c );\nvoid ReadString( char s[] ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char str[MAXN], c;\n\n    scanf(\"%c\\n\", &c);\n    ReadString(str);\n    delchar(str, c);\n    printf(\"%s\\n\", str);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\na\nhappy new year\n```\n\n### 输出样例：\n```out\nhppy new yer\n```"}}
{"problemSetProblem": {"id": "340", "label": "习题8-7", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "字符串排序", "content": "本题要求编写程序，读入5个字符串，按由小到大的顺序输出。\n\n### 输入格式：\n\n输入为由空格分隔的5个非空字符串，每个字符串不包括空格、制表符、换行符等空白字符，长度小于80。\n\n### 输出格式：\n\n按照以下格式输出排序后的结果：\n```\nAfter sorted:\n每行一个字符串\n```\n\n### 输入样例：\n```in\nred yellow blue green white\n```\n\n### 输出样例：\n```out\nAfter sorted:\nblue\ngreen\nred\nwhite\nyellow\n```", "type": "PROGRAMMING", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "437", "description": "本题要求编写程序，读入5个字符串，按由小到大的顺序输出。\n\n### 输入格式：\n\n输入为由空格分隔的5个非空字符串，每个字符串不包括空格、制表符、换行符等空白字符，长度小于80。\n\n### 输出格式：\n\n按照以下格式输出排序后的结果：\n```\nAfter sorted:\n每行一个字符串\n```\n\n### 输入样例：\n```in\nred yellow blue green white\n```\n\n### 输出样例：\n```out\nAfter sorted:\nblue\ngreen\nred\nwhite\nyellow\n```"}}
{"problemSetProblem": {"id": "341", "label": "习题8-10", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "输出学生成绩", "content": "本题要求编写程序，根据输入学生的成绩，统计并输出学生的平均成绩、最高成绩和最低成绩。建议使用动态内存分配来实现。\n\n### 输入格式：\n\n输入第一行首先给出一个正整数N，表示学生的个数。接下来一行给出N个学生的成绩，数字间以空格分隔。\n\n### 输出格式：\n\n按照以下格式输出：\n```\naverage = 平均成绩\nmax = 最高成绩\nmin = 最低成绩\n```\n结果均保留两位小数。\n\n### 输入样例：\n```in\n3\n85 90 95\n```\n\n### 输出样例：\n```out\naverage = 90.00\nmax = 95.00\nmin = 85.00\n```", "type": "PROGRAMMING", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "440", "description": "本题要求编写程序，根据输入学生的成绩，统计并输出学生的平均成绩、最高成绩和最低成绩。建议使用动态内存分配来实现。\n\n### 输入格式：\n\n输入第一行首先给出一个正整数N，表示学生的个数。接下来一行给出N个学生的成绩，数字间以空格分隔。\n\n### 输出格式：\n\n按照以下格式输出：\n```\naverage = 平均成绩\nmax = 最高成绩\nmin = 最低成绩\n```\n结果均保留两位小数。\n\n### 输入样例：\n```in\n3\n85 90 95\n```\n\n### 输出样例：\n```out\naverage = 90.00\nmax = 95.00\nmin = 85.00\n```"}}
{"problemSetProblem": {"id": "342", "label": "习题8-8", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "判断回文字符串", "content": "本题要求编写函数，判断给定的一串字符是否为“回文”。所谓“回文”是指顺读和倒读都一样的字符串。如“XYZYX”和“xyzzyx”都是回文。\n\n### 函数接口定义：\n```c++\nbool palindrome( char *s );\n```\n函数`palindrome`判断输入字符串`char *s`是否为回文。若是则返回`true`，否则返回`false`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXN 20\ntypedef enum {false, true} bool;\n\nbool palindrome( char *s );\n\nint main()\n{\n    char s[MAXN];\n    \n    scanf(\"%s\", s);\n    if ( palindrome(s)==true )\n        printf(\"Yes\\n\");\n    else\n        printf(\"No\\n\");\n    printf(\"%s\\n\", s);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nthisistrueurtsisiht\n```\n\n### 输出样例1：\n```out\nYes\nthisistrueurtsisiht\n```\n\n### 输入样例2：\n```\nthisisnottrue\n```\n\n### 输出样例2：\n```\nNo\nthisisnottrue\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "438", "description": "本题要求编写函数，判断给定的一串字符是否为“回文”。所谓“回文”是指顺读和倒读都一样的字符串。如“XYZYX”和“xyzzyx”都是回文。\n\n### 函数接口定义：\n```c++\nbool palindrome( char *s );\n```\n函数`palindrome`判断输入字符串`char *s`是否为回文。若是则返回`true`，否则返回`false`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXN 20\ntypedef enum {false, true} bool;\n\nbool palindrome( char *s );\n\nint main()\n{\n    char s[MAXN];\n    \n    scanf(\"%s\", s);\n    if ( palindrome(s)==true )\n        printf(\"Yes\\n\");\n    else\n        printf(\"No\\n\");\n    printf(\"%s\\n\", s);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nthisistrueurtsisiht\n```\n\n### 输出样例1：\n```out\nYes\nthisistrueurtsisiht\n```\n\n### 输入样例2：\n```\nthisisnottrue\n```\n\n### 输出样例2：\n```\nNo\nthisisnottrue\n```"}}
{"problemSetProblem": {"id": "343", "label": "习题8-9", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "分类统计各类字符个数", "content": "本题要求实现一个函数，统计给定字符串中的大写字母、小写字母、空格、数字以及其它字符各有多少。\n\n### 函数接口定义：\n```c++\nvoid StringCount( char *s );\n```\n其中 `char *s` 是用户传入的字符串。函数`StringCount`须在一行内按照\n```\n大写字母个数 小写字母个数 空格个数 数字个数 其它字符个数\n```\n的格式输出。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXS 15\n\nvoid StringCount( char *s );\nvoid ReadString( char *s ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char s[MAXS];\n\n    ReadString(s);\n    StringCount(s);\n\n    return 0;\n}\n\n/* Your function will be put here */\n```\n\n### 输入样例：\n```in\naZ&*?\n093 Az\n```\n\n### 输出样例：\n```out\n2 2 1 3 4\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "439", "description": "本题要求实现一个函数，统计给定字符串中的大写字母、小写字母、空格、数字以及其它字符各有多少。\n\n### 函数接口定义：\n```c++\nvoid StringCount( char *s );\n```\n其中 `char *s` 是用户传入的字符串。函数`StringCount`须在一行内按照\n```\n大写字母个数 小写字母个数 空格个数 数字个数 其它字符个数\n```\n的格式输出。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXS 15\n\nvoid StringCount( char *s );\nvoid ReadString( char *s ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char s[MAXS];\n\n    ReadString(s);\n    StringCount(s);\n\n    return 0;\n}\n\n/* Your function will be put here */\n```\n\n### 输入样例：\n```in\naZ&*?\n093 Az\n```\n\n### 输出样例：\n```out\n2 2 1 3 4\n```"}}
{"problemSetProblem": {"id": "344", "label": "习题9-1", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "时间换算", "content": "本题要求编写程序，以`hh:mm:ss`的格式输出某给定时间再过`n`秒后的时间值（超过23:59:59就从0点开始计时）。\n\n### 输入格式：\n\n输入在第一行中以`hh:mm:ss`的格式给出起始时间，第二行给出整秒数`n`（$$<$$60）。\n\n### 输出格式：\n\n输出在一行中给出`hh:mm:ss`格式的结果时间。\n\n### 输入样例：\n```in\n11:59:40\n30\n```\n\n### 输出样例：\n```out\n12:00:10\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "441", "description": "本题要求编写程序，以`hh:mm:ss`的格式输出某给定时间再过`n`秒后的时间值（超过23:59:59就从0点开始计时）。\n\n### 输入格式：\n\n输入在第一行中以`hh:mm:ss`的格式给出起始时间，第二行给出整秒数`n`（$$<$$60）。\n\n### 输出格式：\n\n输出在一行中给出`hh:mm:ss`格式的结果时间。\n\n### 输入样例：\n```in\n11:59:40\n30\n```\n\n### 输出样例：\n```out\n12:00:10\n```"}}
{"problemSetProblem": {"id": "345", "label": "习题9-3", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "平面向量加法", "content": "本题要求编写程序，计算两个二维平面向量的和向量。\n\n### 输入格式:\n\n输入在一行中按照“$$x_1$$ $$y_1$$ $$x_2$$ $$y_2$$”的格式给出两个二维平面向量$$v_1=(x_1, y_1)$$和$$v_2=(x_2, y_2)$$的分量。\n\n### 输出格式:\n\n在一行中按照`(x, y)`的格式输出和向量，坐标输出小数点后一位（注意不能输出$$-0.0$$）。\n\n### 输入样例:\n```in\n3.5 -2.7 -13.9 8.7\n```\n\n### 输出样例:\n```out\n(-10.4, 6.0)\n```", "type": "PROGRAMMING", "author": "乔林", "authorOrganization": {"id": "3", "name": "清华大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "443", "description": "本题要求编写程序，计算两个二维平面向量的和向量。\n\n### 输入格式:\n\n输入在一行中按照“$$x_1$$ $$y_1$$ $$x_2$$ $$y_2$$”的格式给出两个二维平面向量$$v_1=(x_1, y_1)$$和$$v_2=(x_2, y_2)$$的分量。\n\n### 输出格式:\n\n在一行中按照`(x, y)`的格式输出和向量，坐标输出小数点后一位（注意不能输出$$-0.0$$）。\n\n### 输入样例:\n```in\n3.5 -2.7 -13.9 8.7\n```\n\n### 输出样例:\n```out\n(-10.4, 6.0)\n```"}}
{"problemSetProblem": {"id": "346", "label": "习题9-4", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "查找书籍", "content": "给定n本书的名称和定价，本题要求编写程序，查找并输出其中定价最高和最低的书的名称和定价。\n\n### 输入格式:\n\n输入第一行给出正整数n（$$<$$10），随后给出n本书的信息。每本书在一行中给出书名，即长度不超过30的字符串，随后一行中给出正实数价格。题目保证没有同样价格的书。\n\n### 输出格式:\n\n在一行中按照“价格, 书名”的格式先后输出价格最高和最低的书。价格保留2位小数。\n\n### 输入样例:\n```in\n3\nProgramming in C\n21.5\nProgramming in VB\n18.5\nProgramming in Delphi\n25.0\n```\n\n### 输出样例:\n```out\n25.00, Programming in Delphi\n18.50, Programming in VB\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "444", "description": "给定n本书的名称和定价，本题要求编写程序，查找并输出其中定价最高和最低的书的名称和定价。\n\n### 输入格式:\n\n输入第一行给出正整数n（$$<$$10），随后给出n本书的信息。每本书在一行中给出书名，即长度不超过30的字符串，随后一行中给出正实数价格。题目保证没有同样价格的书。\n\n### 输出格式:\n\n在一行中按照“价格, 书名”的格式先后输出价格最高和最低的书。价格保留2位小数。\n\n### 输入样例:\n```in\n3\nProgramming in C\n21.5\nProgramming in VB\n18.5\nProgramming in Delphi\n25.0\n```\n\n### 输出样例:\n```out\n25.00, Programming in Delphi\n18.50, Programming in VB\n```"}}
{"problemSetProblem": {"id": "347", "label": "习题9-5", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3\nzhang 19850403 13912345678\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543\n", "output": "wang 19821020 +86-0571-88018448\nqian 19840619 13609876543\nzhang 19850403 13912345678\n"}, {"name": "", "input": "3\nzhang 19850403 13912345678\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543\n", "output": "wang 19821020 +86-0571-88018448\nqian 19840619 13609876543\nzhang 19850403 13912345678\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "通讯录排序", "content": "输入n个朋友的信息，包括姓名、生日、电话号码，本题要求编写程序，按照年龄从大到小的顺序依次输出通讯录。题目保证所有人的生日均不相同。\n\n### 输入格式:\n\n输入第一行给出正整数n（$$<$$10）。随后n行，每行按照“姓名 生日 电话号码”的格式给出一位朋友的信息，其中“姓名”是长度不超过10的英文字母组成的字符串，“生日”是`yyyymmdd`格式的日期，“电话号码”是不超过17位的数字及`+`、`-`组成的字符串。\n\n### 输出格式:\n\n按照年龄从大到小输出朋友的信息，格式同输出。\n\n### 输入样例:\n```in\n3\nzhang 19850403 13912345678\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543\n```\n\n### 输出样例:\n```out\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543\nzhang 19850403 13912345678\n```", "type": "PROGRAMMING", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "445", "description": "输入n个朋友的信息，包括姓名、生日、电话号码，本题要求编写程序，按照年龄从大到小的顺序依次输出通讯录。题目保证所有人的生日均不相同。\n\n### 输入格式:\n\n输入第一行给出正整数n（$$<$$10）。随后n行，每行按照“姓名 生日 电话号码”的格式给出一位朋友的信息，其中“姓名”是长度不超过10的英文字母组成的字符串，“生日”是`yyyymmdd`格式的日期，“电话号码”是不超过17位的数字及`+`、`-`组成的字符串。\n\n### 输出格式:\n\n按照年龄从大到小输出朋友的信息，格式同输出。\n\n### 输入样例:\n```in\n3\nzhang 19850403 13912345678\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543\n```\n\n### 输出样例:\n```out\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543\nzhang 19850403 13912345678\n```"}}
{"problemSetProblem": {"id": "348", "label": "习题9-2", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "计算两个复数之积", "content": "本题要求实现一个计算复数之积的简单函数。\n\n### 函数接口定义：\n```c++\nstruct complex multiply(struct complex x, struct complex y);\n```\n其中`struct complex`是复数结构体，其定义如下：\n```c++\nstruct complex{\n    int real;\n    int imag;\n};\n```\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nstruct complex{\n    int real;\n    int imag;\n};\n\nstruct complex multiply(struct complex x, struct complex y);\n\nint main()\n{\n    struct complex product, x, y;\n\n    scanf(\"%d%d%d%d\", &x.real, &x.imag, &y.real, &y.imag);\n    product = multiply(x, y);\n    printf(\"(%d+%di) * (%d+%di) = %d + %di\\n\", \n            x.real, x.imag, y.real, y.imag, product.real, product.imag);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n3 4 5 6\n```\n\n### 输出样例：\n```out\n(3+4i) * (5+6i) = -9 + 38i\n```", "type": "CODE_COMPLETION", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "442", "description": "本题要求实现一个计算复数之积的简单函数。\n\n### 函数接口定义：\n```c++\nstruct complex multiply(struct complex x, struct complex y);\n```\n其中`struct complex`是复数结构体，其定义如下：\n```c++\nstruct complex{\n    int real;\n    int imag;\n};\n```\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nstruct complex{\n    int real;\n    int imag;\n};\n\nstruct complex multiply(struct complex x, struct complex y);\n\nint main()\n{\n    struct complex product, x, y;\n\n    scanf(\"%d%d%d%d\", &x.real, &x.imag, &y.real, &y.imag);\n    product = multiply(x, y);\n    printf(\"(%d+%di) * (%d+%di) = %d + %di\\n\", \n            x.real, x.imag, y.real, y.imag, product.real, product.imag);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n3 4 5 6\n```\n\n### 输出样例：\n```out\n(3+4i) * (5+6i) = -9 + 38i\n```"}}
{"problemSetProblem": {"id": "349", "label": "习题9-6", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "按等级统计学生成绩", "content": "本题要求实现一个根据学生成绩设置其等级，并统计不及格人数的简单函数。\n\n### 函数接口定义：\n```c++\nint set_grade( struct student *p, int n );\n```\n其中`p`是指向学生信息的结构体数组的指针，该结构体的定义为：\n```\nstruct student{\n    int num;\n    char name[20];\n    int score;\n    char grade;\n};\n```\n\n`n`是数组元素个数。学号`num`、姓名`name`和成绩`score`均是已经存储好的。`set_grade`函数需要根据学生的成绩`score`设置其等级`grade`。等级设置：85－100为A，70－84为B，60－69为C，0－59为D。同时，`set_grade`还需要返回不及格的人数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 10\n\nstruct student{\n    int num;\n    char name[20];\n    int score;\n    char grade;\n};\n\nint set_grade( struct student *p, int n );\n\nint main()\n{   struct student stu[MAXN], *ptr;\n    int n, i, count;\n    \n    ptr = stu;\n    scanf(\"%d\\n\", &n);\n    for(i = 0; i < n; i++){\n       scanf(\"%d%s%d\", &stu[i].num, stu[i].name, &stu[i].score);\n    } \n   count = set_grade(ptr, n);\n   printf(\"The count for failed (<60): %d\\n\", count);\n   printf(\"The grades:\\n\"); \n   for(i = 0; i < n; i++)\n       printf(\"%d %s %c\\n\", stu[i].num, stu[i].name, stu[i].grade);\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n31001 annie 85\n31002 bonny 75\n31003 carol 70\n31004 dan 84\n31005 susan 90\n31006 paul 69\n31007 pam 60\n31008 apple 50\n31009 nancy 100\n31010 bob 78\n```\n\n### 输出样例：\n```out\nThe count for failed (<60): 1\nThe grades:\n31001 annie A\n31002 bonny B\n31003 carol B\n31004 dan B\n31005 susan A\n31006 paul C\n31007 pam C\n31008 apple D\n31009 nancy A\n31010 bob B\n```", "type": "CODE_COMPLETION", "author": "张泳", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "446", "description": "本题要求实现一个根据学生成绩设置其等级，并统计不及格人数的简单函数。\n\n### 函数接口定义：\n```c++\nint set_grade( struct student *p, int n );\n```\n其中`p`是指向学生信息的结构体数组的指针，该结构体的定义为：\n```\nstruct student{\n    int num;\n    char name[20];\n    int score;\n    char grade;\n};\n```\n\n`n`是数组元素个数。学号`num`、姓名`name`和成绩`score`均是已经存储好的。`set_grade`函数需要根据学生的成绩`score`设置其等级`grade`。等级设置：85－100为A，70－84为B，60－69为C，0－59为D。同时，`set_grade`还需要返回不及格的人数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 10\n\nstruct student{\n    int num;\n    char name[20];\n    int score;\n    char grade;\n};\n\nint set_grade( struct student *p, int n );\n\nint main()\n{   struct student stu[MAXN], *ptr;\n    int n, i, count;\n    \n    ptr = stu;\n    scanf(\"%d\\n\", &n);\n    for(i = 0; i < n; i++){\n       scanf(\"%d%s%d\", &stu[i].num, stu[i].name, &stu[i].score);\n    } \n   count = set_grade(ptr, n);\n   printf(\"The count for failed (<60): %d\\n\", count);\n   printf(\"The grades:\\n\"); \n   for(i = 0; i < n; i++)\n       printf(\"%d %s %c\\n\", stu[i].num, stu[i].name, stu[i].grade);\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n31001 annie 85\n31002 bonny 75\n31003 carol 70\n31004 dan 84\n31005 susan 90\n31006 paul 69\n31007 pam 60\n31008 apple 50\n31009 nancy 100\n31010 bob 78\n```\n\n### 输出样例：\n```out\nThe count for failed (<60): 1\nThe grades:\n31001 annie A\n31002 bonny B\n31003 carol B\n31004 dan B\n31005 susan A\n31006 paul C\n31007 pam C\n31008 apple D\n31009 nancy A\n31010 bob B\n```"}}
{"problemSetProblem": {"id": "350", "label": "练习10-1", "score": 10, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "使用递归函数计算1到n之和", "content": "本题要求实现一个用递归计算1+2+3+…+n的和的简单函数。\n\n### 函数接口定义：\n```c++\nint sum( int n );\n```\n该函数对于传入的正整数`n`返回`1+2+3+…+n`的和；若`n`不是正整数则返回0。题目保证输入输出在长整型范围内。建议尝试写成递归函数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint sum( int n );\n\nint main()\n{\n    int n;\n\n    scanf(\"%d\", &n);\n    printf (\"%d\\n\", sum(n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n10\n```\n\n### 输出样例1：\n```out\n55\n```\n\n### 输入样例2：\n```\n0\n```\n\n### 输出样例2：\n```\n0\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "447", "description": "本题要求实现一个用递归计算1+2+3+…+n的和的简单函数。\n\n### 函数接口定义：\n```c++\nint sum( int n );\n```\n该函数对于传入的正整数`n`返回`1+2+3+…+n`的和；若`n`不是正整数则返回0。题目保证输入输出在长整型范围内。建议尝试写成递归函数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint sum( int n );\n\nint main()\n{\n    int n;\n\n    scanf(\"%d\", &n);\n    printf (\"%d\\n\", sum(n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n10\n```\n\n### 输出样例1：\n```out\n55\n```\n\n### 输入样例2：\n```\n0\n```\n\n### 输出样例2：\n```\n0\n```"}}
{"problemSetProblem": {"id": "351", "label": "习题10-1", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "判断满足条件的三位数", "content": "本题要求实现一个函数，统计给定区间内的三位数中有两位数字相同的完全平方数（如144、676）的个数。\n\n### 函数接口定义：\n```c++\nint search( int n );\n```\n\n其中传入的参数`int n`是一个三位数的正整数（最高位数字非0）。函数`search`返回[101, `n`]区间内所有满足条件的数的个数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint search( int n );\n\nint main()\n{\n    int number;\n\n    scanf(\"%d\",&number);\n    printf(\"count=%d\\n\",search(number));\n\t\t\n    return 0;\n}\n\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n500\n```\n\n### 输出样例：\n```out\ncount=6\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "448", "description": "本题要求实现一个函数，统计给定区间内的三位数中有两位数字相同的完全平方数（如144、676）的个数。\n\n### 函数接口定义：\n```c++\nint search( int n );\n```\n\n其中传入的参数`int n`是一个三位数的正整数（最高位数字非0）。函数`search`返回[101, `n`]区间内所有满足条件的数的个数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint search( int n );\n\nint main()\n{\n    int number;\n\n    scanf(\"%d\",&number);\n    printf(\"count=%d\\n\",search(number));\n\t\t\n    return 0;\n}\n\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n500\n```\n\n### 输出样例：\n```out\ncount=6\n```"}}
{"problemSetProblem": {"id": "352", "label": "习题10-2", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "递归求阶乘和", "content": "本题要求实现一个计算非负整数阶乘的简单函数，并利用该函数求 1!+2!+3!+...+n! 的值。\n\n### 函数接口定义：\n```c++\ndouble fact( int n );\ndouble factsum( int n );\n```\n函数`fact`应返回`n`的阶乘，建议用递归实现。函数`factsum`应返回 1!+2!+...+`n`! 的值。题目保证输入输出在双精度范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble fact( int n );\ndouble factsum( int n );\n\nint main()\n{\n    int n;\n\n    scanf(\"%d\",&n);\n    printf(\"fact(%d) = %.0f\\n\", n, fact(n));\n    printf(\"sum = %.0f\\n\", factsum(n));\n\t\t\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n10\n```\n\n### 输出样例1：\n```out\nfact(10) = 3628800\nsum = 4037913\n```\n\n### 输入样例2：\n```\n0\n```\n\n### 输出样例2：\n```\nfact(0) = 1\nsum = 0\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "449", "description": "本题要求实现一个计算非负整数阶乘的简单函数，并利用该函数求 1!+2!+3!+...+n! 的值。\n\n### 函数接口定义：\n```c++\ndouble fact( int n );\ndouble factsum( int n );\n```\n函数`fact`应返回`n`的阶乘，建议用递归实现。函数`factsum`应返回 1!+2!+...+`n`! 的值。题目保证输入输出在双精度范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble fact( int n );\ndouble factsum( int n );\n\nint main()\n{\n    int n;\n\n    scanf(\"%d\",&n);\n    printf(\"fact(%d) = %.0f\\n\", n, fact(n));\n    printf(\"sum = %.0f\\n\", factsum(n));\n\t\t\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n10\n```\n\n### 输出样例1：\n```out\nfact(10) = 3628800\nsum = 4037913\n```\n\n### 输入样例2：\n```\n0\n```\n\n### 输出样例2：\n```\nfact(0) = 1\nsum = 0\n```"}}
{"problemSetProblem": {"id": "353", "label": "习题10-3", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "递归实现指数函数", "content": "本题要求实现一个计算$$x^n$$（$$n\\ge 1$$）的函数。\n\n### 函数接口定义：\n```c++\ndouble calc_pow( double x, int n );\n```\n函数`calc_pow`应返回`x`的`n`次幂的值。建议用递归实现。题目保证结果在双精度范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble calc_pow( double x, int n );\n\nint main()\n{\n    double x;\n    int n;\n\n    scanf(\"%lf %d\", &x, &n);\n    printf(\"%.0f\\n\", calc_pow(x, n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\n8\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "450", "description": "本题要求实现一个计算$$x^n$$（$$n\\ge 1$$）的函数。\n\n### 函数接口定义：\n```c++\ndouble calc_pow( double x, int n );\n```\n函数`calc_pow`应返回`x`的`n`次幂的值。建议用递归实现。题目保证结果在双精度范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble calc_pow( double x, int n );\n\nint main()\n{\n    double x;\n    int n;\n\n    scanf(\"%lf %d\", &x, &n);\n    printf(\"%.0f\\n\", calc_pow(x, n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\n8\n```"}}
{"problemSetProblem": {"id": "354", "label": "习题10-4", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "递归求简单交错幂级数的部分和", "content": "本题要求实现一个函数，计算下列简单交错幂级数的部分和：\n\n$$ f(x, n) = x - x^2 + x^3 - x^4 + \\cdots + (-1)^{n-1}x^n $$\n\n\n### 函数接口定义：\n```c++\ndouble fn( double x, int n );\n```\n其中题目保证传入的`n`是正整数，并且输入输出都在双精度范围内。函数`fn`应返回上述级数的部分和。建议尝试用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble fn( double x, int n );\n\nint main()\n{\n    double x;\n    int n;\n    \n    scanf(\"%lf %d\", &x, &n);\n    printf(\"%.2f\\n\", fn(x,n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n0.5 12\n```\n\n### 输出样例：\n```out\n0.33\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "451", "description": "本题要求实现一个函数，计算下列简单交错幂级数的部分和：\n\n$$ f(x, n) = x - x^2 + x^3 - x^4 + \\cdots + (-1)^{n-1}x^n $$\n\n\n### 函数接口定义：\n```c++\ndouble fn( double x, int n );\n```\n其中题目保证传入的`n`是正整数，并且输入输出都在双精度范围内。函数`fn`应返回上述级数的部分和。建议尝试用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble fn( double x, int n );\n\nint main()\n{\n    double x;\n    int n;\n    \n    scanf(\"%lf %d\", &x, &n);\n    printf(\"%.2f\\n\", fn(x,n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n0.5 12\n```\n\n### 输出样例：\n```out\n0.33\n```"}}
{"problemSetProblem": {"id": "355", "label": "习题10-5", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "递归计算Ackermenn函数", "content": "本题要求实现Ackermenn函数的计算，其函数定义如下：\n\n\n![](~/48)\n\n### 函数接口定义：\n```c++\nint Ack( int m, int n );\n```\n其中`m`和`n`是用户传入的非负整数。函数`Ack`返回Ackermenn函数的相应值。题目保证输入输出都在长整型\n\n范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint Ack( int m, int n );\n\nint main()\n{\n    int m, n;\n    \n    scanf(\"%d %d\", &m, &n);\n    printf(\"%d\\n\", Ack(m, n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\n9\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "452", "description": "本题要求实现Ackermenn函数的计算，其函数定义如下：\n\n\n![](~/48)\n\n### 函数接口定义：\n```c++\nint Ack( int m, int n );\n```\n其中`m`和`n`是用户传入的非负整数。函数`Ack`返回Ackermenn函数的相应值。题目保证输入输出都在长整型\n\n范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint Ack( int m, int n );\n\nint main()\n{\n    int m, n;\n    \n    scanf(\"%d %d\", &m, &n);\n    printf(\"%d\\n\", Ack(m, n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\n9\n```"}}
{"problemSetProblem": {"id": "356", "label": "习题10-6", "score": 10, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "递归求Fabonacci数列", "content": "本题要求实现求Fabonacci数列项的函数。Fabonacci数列的定义如下：\n\n$$f(n)=f(n-2)+f(n-1)$$ ($$n\\ge 2$$)，其中$$f(0)=0$$，$$f(1)=1$$。\n\n### 函数接口定义：\n```c++\nint f( int n );\n```\n函数`f`应返回第`n`个Fabonacci数。题目保证输入输出在长整型范围内。建议用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint f( int n );\n\nint main()\n{\n    int n;\n    \n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", f(n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n6\n```\n\n### 输出样例：\n```out\n8\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "453", "description": "本题要求实现求Fabonacci数列项的函数。Fabonacci数列的定义如下：\n\n$$f(n)=f(n-2)+f(n-1)$$ ($$n\\ge 2$$)，其中$$f(0)=0$$，$$f(1)=1$$。\n\n### 函数接口定义：\n```c++\nint f( int n );\n```\n函数`f`应返回第`n`个Fabonacci数。题目保证输入输出在长整型范围内。建议用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint f( int n );\n\nint main()\n{\n    int n;\n    \n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", f(n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n6\n```\n\n### 输出样例：\n```out\n8\n```"}}
{"problemSetProblem": {"id": "357", "label": "习题10-7", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "十进制转换二进制", "content": "本题要求实现一个函数，将正整数n转换为二进制后输出。\n\n### 函数接口定义：\n```c++\nvoid dectobin( int n );\n```\n函数`dectobin`应在一行中打印出二进制的`n`。建议用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid dectobin( int n );\n\nint main()\n{\n    int n;\n    \n    scanf(\"%d\", &n);\n    dectobin(n);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n```\n\n### 输出样例：\n```out\n1010\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "454", "description": "本题要求实现一个函数，将正整数n转换为二进制后输出。\n\n### 函数接口定义：\n```c++\nvoid dectobin( int n );\n```\n函数`dectobin`应在一行中打印出二进制的`n`。建议用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid dectobin( int n );\n\nint main()\n{\n    int n;\n    \n    scanf(\"%d\", &n);\n    dectobin(n);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n```\n\n### 输出样例：\n```out\n1010\n```"}}
{"problemSetProblem": {"id": "358", "label": "习题10-8", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "递归实现顺序输出整数", "content": "本题要求实现一个函数，对一个整数进行按位顺序输出。\n\n### 函数接口定义：\n```c++\nvoid printdigits( int n );\n```\n函数`printdigits`应将`n`的每一位数字从高位到低位顺序打印出来，每位数字占一行。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid printdigits( int n );\n\nint main()\n{\n    int n;\n\t\n    scanf(\"%d\", &n);\n    printdigits(n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n12345\n```\n\n### 输出样例：\n```out\n1\n2\n3\n4\n5\n```", "type": "CODE_COMPLETION", "author": "张高燕", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "455", "description": "本题要求实现一个函数，对一个整数进行按位顺序输出。\n\n### 函数接口定义：\n```c++\nvoid printdigits( int n );\n```\n函数`printdigits`应将`n`的每一位数字从高位到低位顺序打印出来，每位数字占一行。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid printdigits( int n );\n\nint main()\n{\n    int n;\n\t\n    scanf(\"%d\", &n);\n    printdigits(n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n12345\n```\n\n### 输出样例：\n```out\n1\n2\n3\n4\n5\n```"}}
{"problemSetProblem": {"id": "359", "label": "习题11-1", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "输出月份英文名", "content": "本题要求实现函数，可以返回一个给定月份的英文名称。\n\n### 函数接口定义：\n```c++\nchar *getmonth( int n );\n```\n函数`getmonth`应返回存储了`n`对应的月份英文名称的字符串头指针。如果传入的参数`n`不是一个代表月份的数字，则返回空指针NULL。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nchar *getmonth( int n );\n\nint main()\n{\n    int n;\n    char *s;\n    \n    scanf(\"%d\", &n);\n    s = getmonth(n);\n    if ( s==NULL ) printf(\"wrong input!\\n\");\n    else printf(\"%s\\n\", s);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n5\n```\n\n### 输出样例1：\n```out\nMay\n```\n### 输入样例2：\n```\n15\n```\n\n### 输出样例2：\n```\nwrong input!\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "456", "description": "本题要求实现函数，可以返回一个给定月份的英文名称。\n\n### 函数接口定义：\n```c++\nchar *getmonth( int n );\n```\n函数`getmonth`应返回存储了`n`对应的月份英文名称的字符串头指针。如果传入的参数`n`不是一个代表月份的数字，则返回空指针NULL。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nchar *getmonth( int n );\n\nint main()\n{\n    int n;\n    char *s;\n    \n    scanf(\"%d\", &n);\n    s = getmonth(n);\n    if ( s==NULL ) printf(\"wrong input!\\n\");\n    else printf(\"%s\\n\", s);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n5\n```\n\n### 输出样例1：\n```out\nMay\n```\n### 输入样例2：\n```\n15\n```\n\n### 输出样例2：\n```\nwrong input!\n```"}}
{"problemSetProblem": {"id": "360", "label": "习题11-2", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "查找星期", "content": "本题要求实现函数，可以根据下表查找到星期，返回对应的序号。\n\n| 序号 | 星期 | \n|:-----: |:--------:| \n| 0 | Sunday    |\n| 1 | Monday    |\n| 2 | Tuesday   |\n| 3 | Wednesday |\n| 4 | Thursday  |\n| 5 | Friday    |\n| 6 | Saturday  |\n\n### 函数接口定义：\n```c++\nint getindex( char *s );\n```\n函数`getindex`应返回字符串`s`序号。如果传入的参数`s`不是一个代表星期的字符串，则返回-1。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXS 80\n\nint getindex( char *s );\n\nint main()\n{\n    int n;\n    char s[MAXS];\n    \n    scanf(\"%s\", s);\n    n = getindex(s);\n    if ( n==-1 ) printf(\"wrong input!\\n\");\n    else printf(\"%d\\n\", n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nTuesday\n```\n\n### 输出样例1：\n```out\n2\n```\n### 输入样例2：\n```\ntoday\n```\n\n### 输出样例2：\n```\nwrong input!\n```", "type": "CODE_COMPLETION", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "457", "description": "本题要求实现函数，可以根据下表查找到星期，返回对应的序号。\n\n| 序号 | 星期 | \n|:-----: |:--------:| \n| 0 | Sunday    |\n| 1 | Monday    |\n| 2 | Tuesday   |\n| 3 | Wednesday |\n| 4 | Thursday  |\n| 5 | Friday    |\n| 6 | Saturday  |\n\n### 函数接口定义：\n```c++\nint getindex( char *s );\n```\n函数`getindex`应返回字符串`s`序号。如果传入的参数`s`不是一个代表星期的字符串，则返回-1。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXS 80\n\nint getindex( char *s );\n\nint main()\n{\n    int n;\n    char s[MAXS];\n    \n    scanf(\"%s\", s);\n    n = getindex(s);\n    if ( n==-1 ) printf(\"wrong input!\\n\");\n    else printf(\"%d\\n\", n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nTuesday\n```\n\n### 输出样例1：\n```out\n2\n```\n### 输入样例2：\n```\ntoday\n```\n\n### 输出样例2：\n```\nwrong input!\n```"}}
{"problemSetProblem": {"id": "361", "label": "习题11-3", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "计算最长的字符串长度", "content": "本题要求实现一个函数，用于计算有n个元素的指针数组s中最长的字符串的长度。\n\n### 函数接口定义：\n```c++\nint max_len( char *s[], int n );\n```\n其中`n`个字符串存储在`s[]`中，函数`max_len`应返回其中最长字符串的长度。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAXN 10\n#define MAXS 20\n\nint max_len( char *s[], int n );\n\nint main()\n{\n    int i, n;\n    char *string[MAXN] = {NULL};\n    \n    scanf(\"%d\", &n);\n    for(i = 0; i < n; i++) {\n        string[i] = (char *)malloc(sizeof(char)*MAXS);\n        scanf(\"%s\", string[i]);\n    }\n    printf(\"%d\\n\", max_len(string, n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n4\nblue\nyellow\nred\ngreen\n```\n\n### 输出样例：\n```out\n6\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "458", "description": "本题要求实现一个函数，用于计算有n个元素的指针数组s中最长的字符串的长度。\n\n### 函数接口定义：\n```c++\nint max_len( char *s[], int n );\n```\n其中`n`个字符串存储在`s[]`中，函数`max_len`应返回其中最长字符串的长度。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAXN 10\n#define MAXS 20\n\nint max_len( char *s[], int n );\n\nint main()\n{\n    int i, n;\n    char *string[MAXN] = {NULL};\n    \n    scanf(\"%d\", &n);\n    for(i = 0; i < n; i++) {\n        string[i] = (char *)malloc(sizeof(char)*MAXS);\n        scanf(\"%s\", string[i]);\n    }\n    printf(\"%d\\n\", max_len(string, n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n4\nblue\nyellow\nred\ngreen\n```\n\n### 输出样例：\n```out\n6\n```"}}
{"problemSetProblem": {"id": "362", "label": "习题11-4", "score": 15, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "字符串的连接", "content": "本题要求实现一个函数，将两个字符串连接起来。\n\n### 函数接口定义：\n```c++\nchar *str_cat( char *s, char *t );\n```\n函数`str_cat`应将字符串`t`复制到字符串`s`的末端，并且返回字符串`s`的首地址。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXS 10\n\nchar *str_cat( char *s, char *t );\n\nint main()\n{\n    char *p;\n    char str1[MAXS+MAXS] = {'\\0'}, str2[MAXS] = {'\\0'};\n    \n    scanf(\"%s%s\", str1, str2);\n    p = str_cat(str1, str2);\n    printf(\"%s\\n%s\\n\", p, str1);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\nabc\ndef\n```\n\n### 输出样例：\n```out\nabcdef\nabcdef\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "459", "description": "本题要求实现一个函数，将两个字符串连接起来。\n\n### 函数接口定义：\n```c++\nchar *str_cat( char *s, char *t );\n```\n函数`str_cat`应将字符串`t`复制到字符串`s`的末端，并且返回字符串`s`的首地址。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXS 10\n\nchar *str_cat( char *s, char *t );\n\nint main()\n{\n    char *p;\n    char str1[MAXS+MAXS] = {'\\0'}, str2[MAXS] = {'\\0'};\n    \n    scanf(\"%s%s\", str1, str2);\n    p = str_cat(str1, str2);\n    printf(\"%s\\n%s\\n\", p, str1);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\nabc\ndef\n```\n\n### 输出样例：\n```out\nabcdef\nabcdef\n```"}}
{"problemSetProblem": {"id": "363", "label": "习题11-5", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "指定位置输出字符串", "content": "本题要求实现一个函数，对给定的一个字符串和两个字符，打印出给定字符串中从与第一个字符匹配的位置开始到与第二个字符匹配的位置之间的所有字符。\n\n### 函数接口定义：\n```c++\nchar *match( char *s, char ch1, char ch2 );\n```\n函数`match`应打印`s`中从`ch1`到`ch2`之间的所有字符，并且返回`ch1`的地址。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n#define MAXS 10\n\nchar *match( char *s, char ch1, char ch2 );\n\nint main()\n{\n    char str[MAXS], ch_start, ch_end, *p;\n    \n    scanf(\"%s\\n\", str);\n    scanf(\"%c %c\", &ch_start, &ch_end);\n    p = match(str, ch_start, ch_end);\n    printf(\"%s\\n\", p);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nprogram\nr g\n```\n\n### 输出样例1：\n```out\nrog\nrogram\n```\n\n### 输入样例2：\n```\nprogram\nz o\n```\n\n### 输出样例2：\n```\n(空行)\n(空行)\n```\n\n### 输入样例3：\n```\nprogram\ng z\n```\n\n### 输出样例3：\n```\ngram\ngram\n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "460", "description": "本题要求实现一个函数，对给定的一个字符串和两个字符，打印出给定字符串中从与第一个字符匹配的位置开始到与第二个字符匹配的位置之间的所有字符。\n\n### 函数接口定义：\n```c++\nchar *match( char *s, char ch1, char ch2 );\n```\n函数`match`应打印`s`中从`ch1`到`ch2`之间的所有字符，并且返回`ch1`的地址。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n#define MAXS 10\n\nchar *match( char *s, char ch1, char ch2 );\n\nint main()\n{\n    char str[MAXS], ch_start, ch_end, *p;\n    \n    scanf(\"%s\\n\", str);\n    scanf(\"%c %c\", &ch_start, &ch_end);\n    p = match(str, ch_start, ch_end);\n    printf(\"%s\\n\", p);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nprogram\nr g\n```\n\n### 输出样例1：\n```out\nrog\nrogram\n```\n\n### 输入样例2：\n```\nprogram\nz o\n```\n\n### 输出样例2：\n```\n(空行)\n(空行)\n```\n\n### 输入样例3：\n```\nprogram\ng z\n```\n\n### 输出样例3：\n```\ngram\ngram\n```"}}
{"problemSetProblem": {"id": "364", "label": "习题11-6", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "查找子串", "content": "本题要求实现一个字符串查找的简单函数。\n\n### 函数接口定义：\n```c++\nchar *search( char *s, char *t );\n```\n函数`search`在字符串`s`中查找子串`t`，返回子串t在`s`中的首地址。若未找到，则返回NULL。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXS 30\n\nchar *search(char *s, char *t);\nvoid ReadString( char s[] ); /* 裁判提供，细节不表 */\n\nint main()\n{\n    char s[MAXS], t[MAXS], *pos;\n    \n    ReadString(s);\n    ReadString(t);\n    pos = search(s, t);\n    if ( pos != NULL )\n        printf(\"%d\\n\", pos - s);\n    else\n        printf(\"-1\\n\");\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nThe C Programming Language\nram\n```\n\n### 输出样例1：\n```out\n10\n```\n\n### 输入样例2：\n```\nThe C Programming Language\nbored\n```\n\n### 输出样例2：\n```\n-1\n```", "type": "CODE_COMPLETION", "author": "张泳", "authorOrganization": {"id": "2", "name": "浙大城市学院", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "461", "description": "本题要求实现一个字符串查找的简单函数。\n\n### 函数接口定义：\n```c++\nchar *search( char *s, char *t );\n```\n函数`search`在字符串`s`中查找子串`t`，返回子串t在`s`中的首地址。若未找到，则返回NULL。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXS 30\n\nchar *search(char *s, char *t);\nvoid ReadString( char s[] ); /* 裁判提供，细节不表 */\n\nint main()\n{\n    char s[MAXS], t[MAXS], *pos;\n    \n    ReadString(s);\n    ReadString(t);\n    pos = search(s, t);\n    if ( pos != NULL )\n        printf(\"%d\\n\", pos - s);\n    else\n        printf(\"-1\\n\");\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nThe C Programming Language\nram\n```\n\n### 输出样例1：\n```out\n10\n```\n\n### 输入样例2：\n```\nThe C Programming Language\nbored\n```\n\n### 输出样例2：\n```\n-1\n```"}}
{"problemSetProblem": {"id": "365", "label": "习题11-7", "score": 20, "problemConfig": {"codeCompletionProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [], "testdataDescriptionCode": ""}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "奇数值结点链表", "content": "本题要求实现两个函数，分别将读入的数据存储为单链表、将链表中奇数值的结点重新组成一个新的链表。链表结点定义如下：\n\n```\nstruct ListNode {\n    int data;\n    ListNode *next;\n};\n```\n\n### 函数接口定义：\n```c++\nstruct ListNode *readlist();\nstruct ListNode *getodd( struct ListNode **L );\n```\n函数`readlist`从标准输入读入一系列正整数，按照读入顺序建立单链表。当读到$$-1$$时表示输入结束，函数应返回指向单链表头结点的指针。\n\n函数`getodd`将单链表`L`中奇数值的结点分离出来，重新组成一个新的链表。返回指向新链表头结点的指针，同时将`L`中存储的地址改为删除了奇数值结点后的链表的头结点地址（所以要传入`L`的指针）。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct ListNode {\n    int data;\n    struct ListNode *next;\n};\n\nstruct ListNode *readlist();\nstruct ListNode *getodd( struct ListNode **L );\nvoid printlist( struct ListNode *L )\n{\n     struct ListNode *p = L;\n     while (p) {\n           printf(\"%d \", p->data);\n           p = p->next;\n     }\n     printf(\"\\n\");\n}\n\nint main()\n{\n    struct ListNode *L, *Odd;\n    L = readlist();\n    Odd = getodd(&L);\n    printlist(Odd);\n    printlist(L);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n1 2 2 3 4 5 6 7 -1\n```\n\n### 输出样例：\n```out\n1 3 5 7 \n2 2 4 6 \n```", "type": "CODE_COMPLETION", "author": "C课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "GCC", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "12", "problemId": "462", "description": "本题要求实现两个函数，分别将读入的数据存储为单链表、将链表中奇数值的结点重新组成一个新的链表。链表结点定义如下：\n\n```\nstruct ListNode {\n    int data;\n    ListNode *next;\n};\n```\n\n### 函数接口定义：\n```c++\nstruct ListNode *readlist();\nstruct ListNode *getodd( struct ListNode **L );\n```\n函数`readlist`从标准输入读入一系列正整数，按照读入顺序建立单链表。当读到$$-1$$时表示输入结束，函数应返回指向单链表头结点的指针。\n\n函数`getodd`将单链表`L`中奇数值的结点分离出来，重新组成一个新的链表。返回指向新链表头结点的指针，同时将`L`中存储的地址改为删除了奇数值结点后的链表的头结点地址（所以要传入`L`的指针）。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct ListNode {\n    int data;\n    struct ListNode *next;\n};\n\nstruct ListNode *readlist();\nstruct ListNode *getodd( struct ListNode **L );\nvoid printlist( struct ListNode *L )\n{\n     struct ListNode *p = L;\n     while (p) {\n           printf(\"%d \", p->data);\n           p = p->next;\n     }\n     printf(\"\\n\");\n}\n\nint main()\n{\n    struct ListNode *L, *Odd;\n    L = readlist();\n    Odd = getodd(&L);\n    printlist(Odd);\n    printlist(L);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n1 2 2 3 4 5 6 7 -1\n```\n\n### 输出样例：\n```out\n1 3 5 7 \n2 2 4 6 \n```"}}
