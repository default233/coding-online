{"problemSetProblem": {"id": "994805325918486528", "label": "1001", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3\n", "output": "5\n"}, {"name": "", "input": "3\n", "output": "5\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "害死人不偿命的(3n+1)猜想", "content": "卡拉兹(Callatz)猜想：\n\n对任何一个正整数 $$n$$，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 $$(3n+1)$$ 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 $$n=1$$。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 $$(3n+1)$$，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……\n\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 $$n$$，简单地数一下，需要多少步（砍几下）才能得到 $$n=1$$？\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，即给出正整数 $$n$$ 的值。\n\n### 输出格式：\n\n输出从 $$n$$ 计算到 1 需要的步数。\n\n### 输入样例：\n```in\n3\n```\n\n### 输出样例：\n```out\n5\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10112", "description": "卡拉兹(Callatz)猜想：\n\n对任何一个正整数 $$n$$，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 $$(3n+1)$$ 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 $$n=1$$。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 $$(3n+1)$$，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……\n\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 $$n$$，简单地数一下，需要多少步（砍几下）才能得到 $$n=1$$？\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，即给出正整数 $$n$$ 的值。\n\n### 输出格式：\n\n输出从 $$n$$ 计算到 1 需要的步数。\n\n### 输入样例：\n```in\n3\n```\n\n### 输出样例：\n```out\n5\n```\n"}}
{"problemSetProblem": {"id": "994805324509200384", "label": "1002", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "1234567890987654321123456789\n", "output": "yi san wu\n"}, {"name": "", "input": "1234567890987654321123456789\n", "output": "yi san wu\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "写出这个数", "content": "读入一个正整数 $$n$$，计算其各位数字之和，用汉语拼音写出和的每一位数字。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，即给出自然数 $$n$$ 的值。这里保证 $$n$$ 小于 $$10^{100}$$。\n\n### 输出格式：\n\n在一行内输出 $$n$$ 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。\n\n### 输入样例：\n```in\n1234567890987654321123456789\n```\n\n### 输出样例：\n```out\nyi san wu\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10113", "description": "读入一个正整数 $$n$$，计算其各位数字之和，用汉语拼音写出和的每一位数字。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，即给出自然数 $$n$$ 的值。这里保证 $$n$$ 小于 $$10^{100}$$。\n\n### 输出格式：\n\n在一行内输出 $$n$$ 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。\n\n### 输入样例：\n```in\n1234567890987654321123456789\n```\n\n### 输出样例：\n```out\nyi san wu\n```\n"}}
{"problemSetProblem": {"id": "994805323154440192", "label": "1003", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "8\nPAT\nPAAT\nAAPATAA\nAAPAATAAAA\nxPATx\nPT\nWhatever\nAPAAATAA\n", "output": "YES\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n"}, {"name": "", "input": "8\nPAT\nPAAT\nAAPATAA\nAAPAATAAAA\nxPATx\nPT\nWhatever\nAPAAATAA\n", "output": "YES\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "我要通过！", "content": "“**答案正确**”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“**答案正确**”大派送 —— 只要读入的字符串满足下列条件，系统就输出“**答案正确**”，否则输出“**答案错误**”。\n\n得到“**答案正确**”的条件是：\n\n1. 字符串中必须仅有 `P`、 `A`、 `T`这三种字符，不可以包含其它字符；\n2. 任意形如 `xPATx` 的字符串都可以获得“**答案正确**”，其中 `x` 或者是空字符串，或者是仅由字母 `A` 组成的字符串；\n3. 如果 `aPbTc` 是正确的，那么 `aPbATca` 也是正确的，其中 `a`、 `b`、 `c` 均或者是空字符串，或者是仅由字母 `A` 组成的字符串。\n\n现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“**答案正确**”的。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 $$n$$ ($$<10$$)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。\n\n### 输出格式：\n\n每个字符串的检测结果占一行，如果该字符串可以获得“**答案正确**”，则输出 `YES`，否则输出 `NO`。\n\n### 输入样例：\n```in\n8\nPAT\nPAAT\nAAPATAA\nAAPAATAAAA\nxPATx\nPT\nWhatever\nAPAAATAA\n```\n\n### 输出样例：\n```out\nYES\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10114", "description": "“**答案正确**”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“**答案正确**”大派送 —— 只要读入的字符串满足下列条件，系统就输出“**答案正确**”，否则输出“**答案错误**”。\n\n得到“**答案正确**”的条件是：\n\n1. 字符串中必须仅有 `P`、 `A`、 `T`这三种字符，不可以包含其它字符；\n2. 任意形如 `xPATx` 的字符串都可以获得“**答案正确**”，其中 `x` 或者是空字符串，或者是仅由字母 `A` 组成的字符串；\n3. 如果 `aPbTc` 是正确的，那么 `aPbATca` 也是正确的，其中 `a`、 `b`、 `c` 均或者是空字符串，或者是仅由字母 `A` 组成的字符串。\n\n现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“**答案正确**”的。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 $$n$$ ($$<10$$)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。\n\n### 输出格式：\n\n每个字符串的检测结果占一行，如果该字符串可以获得“**答案正确**”，则输出 `YES`，否则输出 `NO`。\n\n### 输入样例：\n```in\n8\nPAT\nPAAT\nAAPATAA\nAAPAATAAAA\nxPATx\nPT\nWhatever\nAPAAATAA\n```\n\n### 输出样例：\n```out\nYES\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n```\n"}}
{"problemSetProblem": {"id": "994805321640296448", "label": "1004", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3\nJoe Math990112 89\nMike CS991301 100\nMary EE990830 95\n", "output": "Mike CS991301\nJoe Math990112\n"}, {"name": "", "input": "3\nJoe Math990112 89\nMike CS991301 100\nMary EE990830 95\n", "output": "Mike CS991301\nJoe Math990112\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "成绩排名", "content": "读入 $$n$$（$$>0$$）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，格式为\n```\n第 1 行：正整数 n\n第 2 行：第 1 个学生的姓名 学号 成绩\n第 3 行：第 2 个学生的姓名 学号 成绩\n  ... ... ...\n第 n+1 行：第 n 个学生的姓名 学号 成绩\n```\n其中`姓名`和`学号`均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。\n\n### 输出格式：\n\n对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。\n\n### 输入样例：\n```in\n3\nJoe Math990112 89\nMike CS991301 100\nMary EE990830 95\n```\n\n### 输出样例：\n```out\nMike CS991301\nJoe Math990112\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10115", "description": "读入 $$n$$（$$>0$$）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，格式为\n```\n第 1 行：正整数 n\n第 2 行：第 1 个学生的姓名 学号 成绩\n第 3 行：第 2 个学生的姓名 学号 成绩\n  ... ... ...\n第 n+1 行：第 n 个学生的姓名 学号 成绩\n```\n其中`姓名`和`学号`均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。\n\n### 输出格式：\n\n对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。\n\n### 输入样例：\n```in\n3\nJoe Math990112 89\nMike CS991301 100\nMary EE990830 95\n```\n\n### 输出样例：\n```out\nMike CS991301\nJoe Math990112\n```\n"}}
{"problemSetProblem": {"id": "994805320306507776", "label": "1005", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6\n3 5 6 7 8 11\n", "output": "7 6\n"}, {"name": "", "input": "6\n3 5 6 7 8 11\n", "output": "7 6\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "继续(3n+1)猜想", "content": "卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。\n\n当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 $$n=3$$ 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 $$n=5$$、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 $$n$$ 为“关键数”，如果 $$n$$ 不能被数列中的其他数字所覆盖。\n\n现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 $$K$$ ($$<100$$)，第 2 行给出 $$K$$ 个互不相同的待验证的正整数 $$n$$ ($$1<n\\le 100$$)的值，数字间用空格隔开。\n\n### 输出格式：\n\n每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n\n### 输入样例：\n```in\n6\n3 5 6 7 8 11\n```\n\n### 输出样例：\n```out\n7 6\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10116", "description": "卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。\n\n当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 $$n=3$$ 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 $$n=5$$、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 $$n$$ 为“关键数”，如果 $$n$$ 不能被数列中的其他数字所覆盖。\n\n现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 $$K$$ ($$<100$$)，第 2 行给出 $$K$$ 个互不相同的待验证的正整数 $$n$$ ($$1<n\\le 100$$)的值，数字间用空格隔开。\n\n### 输出格式：\n\n每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n\n### 输入样例：\n```in\n6\n3 5 6 7 8 11\n```\n\n### 输出样例：\n```out\n7 6\n```\n"}}
{"problemSetProblem": {"id": "994805318855278592", "label": "1006", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "234\n", "output": "BBSSS1234\n"}, {"name": "", "input": "23\n", "output": "SS123\n"}, {"name": "", "input": "234\n", "output": "BBSSS1234\n"}, {"name": "", "input": "23\n", "output": "SS123\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "换个格式输出整数", "content": "让我们用字母 `B` 来表示“百”、字母 `S` 表示“十”，用 `12...n` 来表示不为零的个位数字 `n`（$$<10$$），换个格式来输出任一个不超过 3 位的正整数。例如 `234` 应该被输出为 `BBSSS1234`，因为它有 2 个“百”、3 个“十”、以及个位的 4。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，给出正整数 $$n$$（$$<1000$$）。\n\n### 输出格式：\n\n每个测试用例的输出占一行，用规定的格式输出 $$n$$。\n\n### 输入样例 1：\n```in\n234\n```\n\n### 输出样例 1：\n```out\nBBSSS1234\n```\n\n### 输入样例 2：\n```in\n23\n```\n\n### 输出样例 2：\n```out\nSS123\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10182", "description": "让我们用字母 `B` 来表示“百”、字母 `S` 表示“十”，用 `12...n` 来表示不为零的个位数字 `n`（$$<10$$），换个格式来输出任一个不超过 3 位的正整数。例如 `234` 应该被输出为 `BBSSS1234`，因为它有 2 个“百”、3 个“十”、以及个位的 4。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，给出正整数 $$n$$（$$<1000$$）。\n\n### 输出格式：\n\n每个测试用例的输出占一行，用规定的格式输出 $$n$$。\n\n### 输入样例 1：\n```in\n234\n```\n\n### 输出样例 1：\n```out\nBBSSS1234\n```\n\n### 输入样例 2：\n```in\n23\n```\n\n### 输出样例 2：\n```out\nSS123\n```\n"}}
{"problemSetProblem": {"id": "994805317546655744", "label": "1007", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "20\n", "output": "4\n"}, {"name": "", "input": "20\n", "output": "4\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "素数对猜想", "content": "让我们定义$$d_n$$为：$$d_n = p_{n+1}-p_n$$，其中$$p_i$$是第$$i$$个素数。显然有$$d_1 = 1$$，且对于$$n>1$$有$$d_n$$是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。\n\n现给定任意正整数`N`($$<10^5$$)，请计算不超过`N`的满足猜想的素数对的个数。\n\n\n### 输入格式:\n\n输入在一行给出正整数`N`。\n\n### 输出格式:\n\n在一行中输出不超过`N`的满足猜想的素数对的个数。\n\n### 输入样例:\n```in\n20\n```\n\n### 输出样例:\n```out\n4\n```", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10183", "description": "让我们定义$$d_n$$为：$$d_n = p_{n+1}-p_n$$，其中$$p_i$$是第$$i$$个素数。显然有$$d_1 = 1$$，且对于$$n>1$$有$$d_n$$是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。\n\n现给定任意正整数`N`($$<10^5$$)，请计算不超过`N`的满足猜想的素数对的个数。\n\n\n### 输入格式:\n\n输入在一行给出正整数`N`。\n\n### 输出格式:\n\n在一行中输出不超过`N`的满足猜想的素数对的个数。\n\n### 输入样例:\n```in\n20\n```\n\n### 输出样例:\n```out\n4\n```"}}
{"problemSetProblem": {"id": "994805316250615808", "label": "1008", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6 2\n1 2 3 4 5 6\n", "output": "5 6 1 2 3 4\n"}, {"name": "", "input": "6 2\n1 2 3 4 5 6\n", "output": "5 6 1 2 3 4\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "数组元素循环右移问题", "content": "一个数组$$A$$中存有$$N$$（$$>0$$）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移$$M$$（$$\\ge 0$$）个位置，即将$$A$$中的数据由（$$A_0 A_1 \\cdots A_{N-1}$$）变换为（$$A_{N-M} \\cdots A_{N-1} A_0 A_1 \\cdots A_{N-M-1}$$）（最后$$M$$个数循环移至最前面的$$M$$个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n### 输入格式:\n\n每个输入包含一个测试用例，第1行输入$$N$$（$$1\\le N \\le 100$$）和$$M$$（$$\\ge 0$$）；第2行输入$$N$$个整数，之间用空格分隔。\n\n### 输出格式:\n\n在一行中输出循环右移$$M$$位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n### 输入样例:\n```in\n6 2\n1 2 3 4 5 6\n```\n\n### 输出样例:\n```out\n5 6 1 2 3 4\n```", "type": "PROGRAMMING", "author": "DS课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10066", "description": "一个数组$$A$$中存有$$N$$（$$>0$$）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移$$M$$（$$\\ge 0$$）个位置，即将$$A$$中的数据由（$$A_0 A_1 \\cdots A_{N-1}$$）变换为（$$A_{N-M} \\cdots A_{N-1} A_0 A_1 \\cdots A_{N-M-1}$$）（最后$$M$$个数循环移至最前面的$$M$$个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n### 输入格式:\n\n每个输入包含一个测试用例，第1行输入$$N$$（$$1\\le N \\le 100$$）和$$M$$（$$\\ge 0$$）；第2行输入$$N$$个整数，之间用空格分隔。\n\n### 输出格式:\n\n在一行中输出循环右移$$M$$位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n### 输入样例:\n```in\n6 2\n1 2 3 4 5 6\n```\n\n### 输出样例:\n```out\n5 6 1 2 3 4\n```"}}
{"problemSetProblem": {"id": "994805314941992960", "label": "1009", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "Hello World Here I Come\n", "output": "Come I Here World Hello\n"}, {"name": "", "input": "Hello World Here I Come\n", "output": "Come I Here World Hello\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "说反话", "content": "给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。\n\n### 输入格式：\n\n测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n\n### 输出格式：\n\n每个测试用例的输出占一行，输出倒序后的句子。\n\n### 输入样例：\n```in\nHello World Here I Come\n```\n\n### 输出样例：\n```out\nCome I Here World Hello\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10184", "description": "给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。\n\n### 输入格式：\n\n测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n\n### 输出格式：\n\n每个测试用例的输出占一行，输出倒序后的句子。\n\n### 输入样例：\n```in\nHello World Here I Come\n```\n\n### 输出样例：\n```out\nCome I Here World Hello\n```\n"}}
{"problemSetProblem": {"id": "994805313708867584", "label": "1010", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3 4 -5 2 6 1 -2 0\n", "output": "12 3 -10 1 6 0\n"}, {"name": "", "input": "3 4 -5 2 6 1 -2 0\n", "output": "12 3 -10 1 6 0\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "一元多项式求导", "content": "设计函数求一元多项式的导数。（注：$$x^n$$（$$n$$为整数）的一阶导数为$$n x^{n-1}$$。）\n\n### 输入格式:\n\n以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。\n\n### 输出格式:\n\n以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 `0 0`。\n\n### 输入样例:\n```in\n3 4 -5 2 6 1 -2 0\n```\n\n### 输出样例:\n```out\n12 3 -10 1 6 0\n```", "type": "PROGRAMMING", "author": "DS课程组", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10069", "description": "设计函数求一元多项式的导数。（注：$$x^n$$（$$n$$为整数）的一阶导数为$$n x^{n-1}$$。）\n\n### 输入格式:\n\n以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。\n\n### 输出格式:\n\n以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 `0 0`。\n\n### 输入样例:\n```in\n3 4 -5 2 6 1 -2 0\n```\n\n### 输出样例:\n```out\n12 3 -10 1 6 0\n```"}}
{"problemSetProblem": {"id": "994805312417021952", "label": "1011", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647\n", "output": "Case #1: false\nCase #2: true\nCase #3: true\nCase #4: false\n"}, {"name": "", "input": "4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647\n", "output": "Case #1: false\nCase #2: true\nCase #3: true\nCase #4: false\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "A+B 和 C", "content": "给定区间 [$$-2^{31}, 2^{31}$$] 内的 3 个整数 $$A$$、$$B$$ 和 $$C$$，请判断 $$A+B$$ 是否大于 $$C$$。\n\n### 输入格式：\n\n输入第 1 行给出正整数 $$T$$ ($$\\le 10$$)，是测试用例的个数。随后给出 $$T$$ 组测试用例，每组占一行，顺序给出 $$A$$、$$B$$ 和 $$C$$。整数间以空格分隔。\n\n### 输出格式：\n\n对每组测试用例，在一行中输出 `Case #X: true` 如果 $$A+B>C$$，否则输出 `Case #X: false`，其中 `X` 是测试用例的编号（从 1 开始）。\n\n### 输入样例：\n```in\n4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647\n```\n\n### 输出样例：\n```out\nCase #1: false\nCase #2: true\nCase #3: true\nCase #4: false\n```\n", "type": "PROGRAMMING", "author": "HOU, Qiming", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10205", "description": "给定区间 [$$-2^{31}, 2^{31}$$] 内的 3 个整数 $$A$$、$$B$$ 和 $$C$$，请判断 $$A+B$$ 是否大于 $$C$$。\n\n### 输入格式：\n\n输入第 1 行给出正整数 $$T$$ ($$\\le 10$$)，是测试用例的个数。随后给出 $$T$$ 组测试用例，每组占一行，顺序给出 $$A$$、$$B$$ 和 $$C$$。整数间以空格分隔。\n\n### 输出格式：\n\n对每组测试用例，在一行中输出 `Case #X: true` 如果 $$A+B>C$$，否则输出 `Case #X: false`，其中 `X` 是测试用例的编号（从 1 开始）。\n\n### 输入样例：\n```in\n4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647\n```\n\n### 输出样例：\n```out\nCase #1: false\nCase #2: true\nCase #3: true\nCase #4: false\n```\n"}}
{"problemSetProblem": {"id": "994805311146147840", "label": "1012", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "13 1 2 3 4 5 6 7 8 9 10 20 16 18\n", "output": "30 11 2 9.7 9\n"}, {"name": "", "input": "8 1 2 4 5 6 7 9 16\n", "output": "N 11 2 N 9\n"}, {"name": "", "input": "13 1 2 3 4 5 6 7 8 9 10 20 16 18\n", "output": "30 11 2 9.7 9\n"}, {"name": "", "input": "8 1 2 4 5 6 7 9 16\n", "output": "N 11 2 N 9\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "数字分类", "content": "给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\n\n- $$A_1$$ = 能被 5 整除的数字中所有偶数的和；\n- $$A_2$$ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $$n_1-n_2+n_3-n_4\\cdots$$；\n- $$A_3$$ = 被 5 除后余 2 的数字的个数；\n- $$A_4$$ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；\n- $$A_5$$ = 被 5 除后余 4 的数字中最大数字。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $$N$$，随后给出 $$N$$ 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n\n### 输出格式：\n\n对给定的 $$N$$ 个正整数，按题目要求计算 $$A_1$$~$$A_5$$ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n\n若其中某一类数字不存在，则在相应位置输出 `N`。\n\n### 输入样例 1：\n```in\n13 1 2 3 4 5 6 7 8 9 10 20 16 18\n```\n\n### 输出样例 1：\n```out\n30 11 2 9.7 9\n```\n\n### 输入样例 2：\n```in\n8 1 2 4 5 6 7 9 16\n```\n\n### 输出样例 2：\n```out\nN 11 2 N 9\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10206", "description": "给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\n\n- $$A_1$$ = 能被 5 整除的数字中所有偶数的和；\n- $$A_2$$ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $$n_1-n_2+n_3-n_4\\cdots$$；\n- $$A_3$$ = 被 5 除后余 2 的数字的个数；\n- $$A_4$$ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；\n- $$A_5$$ = 被 5 除后余 4 的数字中最大数字。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $$N$$，随后给出 $$N$$ 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n\n### 输出格式：\n\n对给定的 $$N$$ 个正整数，按题目要求计算 $$A_1$$~$$A_5$$ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n\n若其中某一类数字不存在，则在相应位置输出 `N`。\n\n### 输入样例 1：\n```in\n13 1 2 3 4 5 6 7 8 9 10 20 16 18\n```\n\n### 输出样例 1：\n```out\n30 11 2 9.7 9\n```\n\n### 输入样例 2：\n```in\n8 1 2 4 5 6 7 9 16\n```\n\n### 输出样例 2：\n```out\nN 11 2 N 9\n```\n"}}
{"problemSetProblem": {"id": "994805309963354112", "label": "1013", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5 27\n", "output": "11 13 17 19 23 29 31 37 41 43\n47 53 59 61 67 71 73 79 83 89\n97 101 103\n"}, {"name": "", "input": "5 27\n", "output": "11 13 17 19 23 29 31 37 41 43\n47 53 59 61 67 71 73 79 83 89\n97 101 103\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "数素数", "content": "令 $$P_i$$ 表示第 $$i$$ 个素数。现任给两个正整数 $$M \\le N \\le 10^4$$，请输出 $$P_M$$ 到 $$P_N$$ 的所有素数。\n\n### 输入格式：\n\n输入在一行中给出 $$M$$ 和 $$N$$，其间以空格分隔。\n\n### 输出格式：\n\n输出从 $$P_M$$ 到 $$P_N$$ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。\n\n### 输入样例：\n```in\n5 27\n```\n\n### 输出样例：\n```out\n11 13 17 19 23 29 31 37 41 43\n47 53 59 61 67 71 73 79 83 89\n97 101 103\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10207", "description": "令 $$P_i$$ 表示第 $$i$$ 个素数。现任给两个正整数 $$M \\le N \\le 10^4$$，请输出 $$P_M$$ 到 $$P_N$$ 的所有素数。\n\n### 输入格式：\n\n输入在一行中给出 $$M$$ 和 $$N$$，其间以空格分隔。\n\n### 输出格式：\n\n输出从 $$P_M$$ 到 $$P_N$$ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。\n\n### 输入样例：\n```in\n5 27\n```\n\n### 输出样例：\n```out\n11 13 17 19 23 29 31 37 41 43\n47 53 59 61 67 71 73 79 83 89\n97 101 103\n```\n"}}
{"problemSetProblem": {"id": "994805308755394560", "label": "1014", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm\n", "output": "THU 14:04\n"}, {"name": "", "input": "3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm\n", "output": "THU 14:04\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "福尔摩斯的约会", "content": "大侦探福尔摩斯接到一张奇怪的字条：`我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&hgsfdk d&Hyscvnm`。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间`星期四 14:04`，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 `D`，代表星期四；第 2 对相同的字符是 `E` ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 `A` 到 `N` 表示）；后面两字符串第 1 对相同的英文字母 `s` 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。\n\n### 输入格式：\n\n输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。\n\n### 输出格式：\n\n在一行中输出约会的时间，格式为 `DAY HH:MM`，其中 `DAY` 是某星期的 3 字符缩写，即 `MON` 表示星期一，`TUE` 表示星期二，`WED` 表示星期三，`THU` 表示星期四，`FRI` 表示星期五，`SAT` 表示星期六，`SUN` 表示星期日。题目输入保证每个测试存在唯一解。\n\n### 输入样例：\n```in\n3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm\n```\n\n### 输出样例：\n```out\nTHU 14:04\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10208", "description": "大侦探福尔摩斯接到一张奇怪的字条：`我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&hgsfdk d&Hyscvnm`。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间`星期四 14:04`，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 `D`，代表星期四；第 2 对相同的字符是 `E` ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 `A` 到 `N` 表示）；后面两字符串第 1 对相同的英文字母 `s` 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。\n\n### 输入格式：\n\n输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。\n\n### 输出格式：\n\n在一行中输出约会的时间，格式为 `DAY HH:MM`，其中 `DAY` 是某星期的 3 字符缩写，即 `MON` 表示星期一，`TUE` 表示星期二，`WED` 表示星期三，`THU` 表示星期四，`FRI` 表示星期五，`SAT` 表示星期六，`SUN` 表示星期日。题目输入保证每个测试存在唯一解。\n\n### 输入样例：\n```in\n3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm\n```\n\n### 输出样例：\n```out\nTHU 14:04\n```\n"}}
{"problemSetProblem": {"id": "994805307551629312", "label": "1015", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "14 60 80\n10000001 64 90\n10000002 90 60\n10000011 85 80\n10000003 85 80\n10000004 80 85\n10000005 82 77\n10000006 83 76\n10000007 90 78\n10000008 75 79\n10000009 59 90\n10000010 88 45\n10000012 80 100\n10000013 90 99\n10000014 66 60\n", "output": "12\n10000013 90 99\n10000012 80 100\n10000003 85 80\n10000011 85 80\n10000004 80 85\n10000007 90 78\n10000006 83 76\n10000005 82 77\n10000002 90 60\n10000014 66 60\n10000008 75 79\n10000001 64 90\n"}, {"name": "", "input": "14 60 80\n10000001 64 90\n10000002 90 60\n10000011 85 80\n10000003 85 80\n10000004 80 85\n10000005 82 77\n10000006 83 76\n10000007 90 78\n10000008 75 79\n10000009 59 90\n10000010 88 45\n10000012 80 100\n10000013 90 99\n10000014 66 60\n", "output": "12\n10000013 90 99\n10000012 80 100\n10000003 85 80\n10000011 85 80\n10000004 80 85\n10000007 90 78\n10000006 83 76\n10000005 82 77\n10000002 90 60\n10000014 66 60\n10000008 75 79\n10000001 64 90\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "德才论", "content": "宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”\n\n现给出一批考生的德才分数，请根据司马光的理论给出录取排名。\n\n\n### 输入格式：\n\n输入第一行给出 3 个正整数，分别为：$$N$$（$$\\le 10^5$$），即考生总数；$$L$$（$$\\ge 60$$），为录取最低分数线，即德分和才分均不低于 $$L$$ 的考生才有资格被考虑录取；$$H$$（$$< 100$$），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 $$H$$，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 $$L$$ 的考生也按总分排序，但排在第三类考生之后。\n\n随后 $$N$$ 行，每行给出一位考生的信息，包括：`准考证号 德分 才分`，其中`准考证号`为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。\n\n### 输出格式：\n\n输出第一行首先给出达到最低分数线的考生人数 $$M$$，随后 $$M$$ 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。\n\n\n### 输入样例：\n```in\n14 60 80\n10000001 64 90\n10000002 90 60\n10000011 85 80\n10000003 85 80\n10000004 80 85\n10000005 82 77\n10000006 83 76\n10000007 90 78\n10000008 75 79\n10000009 59 90\n10000010 88 45\n10000012 80 100\n10000013 90 99\n10000014 66 60\n```\n\n### 输出样例：\n```out\n12\n10000013 90 99\n10000012 80 100\n10000003 85 80\n10000011 85 80\n10000004 80 85\n10000007 90 78\n10000006 83 76\n10000005 82 77\n10000002 90 60\n10000014 66 60\n10000008 75 79\n10000001 64 90\n```\n", "type": "PROGRAMMING", "author": "CHEN, Li", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10209", "description": "宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”\n\n现给出一批考生的德才分数，请根据司马光的理论给出录取排名。\n\n\n### 输入格式：\n\n输入第一行给出 3 个正整数，分别为：$$N$$（$$\\le 10^5$$），即考生总数；$$L$$（$$\\ge 60$$），为录取最低分数线，即德分和才分均不低于 $$L$$ 的考生才有资格被考虑录取；$$H$$（$$< 100$$），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 $$H$$，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 $$L$$ 的考生也按总分排序，但排在第三类考生之后。\n\n随后 $$N$$ 行，每行给出一位考生的信息，包括：`准考证号 德分 才分`，其中`准考证号`为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。\n\n### 输出格式：\n\n输出第一行首先给出达到最低分数线的考生人数 $$M$$，随后 $$M$$ 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。\n\n\n### 输入样例：\n```in\n14 60 80\n10000001 64 90\n10000002 90 60\n10000011 85 80\n10000003 85 80\n10000004 80 85\n10000005 82 77\n10000006 83 76\n10000007 90 78\n10000008 75 79\n10000009 59 90\n10000010 88 45\n10000012 80 100\n10000013 90 99\n10000014 66 60\n```\n\n### 输出样例：\n```out\n12\n10000013 90 99\n10000012 80 100\n10000003 85 80\n10000011 85 80\n10000004 80 85\n10000007 90 78\n10000006 83 76\n10000005 82 77\n10000002 90 60\n10000014 66 60\n10000008 75 79\n10000001 64 90\n```\n"}}
{"problemSetProblem": {"id": "994805306310115328", "label": "1016", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 150, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3862767 6 13530293 3\n", "output": "399\n"}, {"name": "", "input": "3862767 1 13530293 8\n", "output": "0\n"}, {"name": "", "input": "3862767 6 13530293 3\n", "output": "399\n"}, {"name": "", "input": "3862767 1 13530293 8\n", "output": "0\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "部分A+B", "content": "正整数 $$A$$ 的“$$D_A$$（为 1 位整数）部分”定义为由 $$A$$ 中所有 $$D_A$$ 组成的新整数 $$P_A$$。例如：给定 $$A = 3862767$$，$$D_A = 6$$，则 $$A$$ 的“6 部分”$$P_A$$ 是 66，因为 $$A$$ 中有 2 个 6。\n\n现给定 $$A$$、$$D_A$$、$$B$$、$$D_B$$，请编写程序计算 $$P_A + P_B$$。\n\n### 输入格式：\n\n输入在一行中依次给出 $$A$$、$$D_A$$、$$B$$、$$D_B$$，中间以空格分隔，其中 $$0 < A, B < 10^{10}$$。\n\n### 输出格式：\n\n在一行中输出 $$P_A + P_B$$ 的值。\n\n### 输入样例 1：\n```in\n3862767 6 13530293 3\n```\n\n### 输出样例 1：\n```out\n399\n```\n\n### 输入样例 2：\n```in\n3862767 1 13530293 8\n```\n\n### 输出样例 2：\n```out\n0\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10240", "description": "正整数 $$A$$ 的“$$D_A$$（为 1 位整数）部分”定义为由 $$A$$ 中所有 $$D_A$$ 组成的新整数 $$P_A$$。例如：给定 $$A = 3862767$$，$$D_A = 6$$，则 $$A$$ 的“6 部分”$$P_A$$ 是 66，因为 $$A$$ 中有 2 个 6。\n\n现给定 $$A$$、$$D_A$$、$$B$$、$$D_B$$，请编写程序计算 $$P_A + P_B$$。\n\n### 输入格式：\n\n输入在一行中依次给出 $$A$$、$$D_A$$、$$B$$、$$D_B$$，中间以空格分隔，其中 $$0 < A, B < 10^{10}$$。\n\n### 输出格式：\n\n在一行中输出 $$P_A + P_B$$ 的值。\n\n### 输入样例 1：\n```in\n3862767 6 13530293 3\n```\n\n### 输出样例 1：\n```out\n399\n```\n\n### 输入样例 2：\n```in\n3862767 1 13530293 8\n```\n\n### 输出样例 2：\n```out\n0\n```\n"}}
{"problemSetProblem": {"id": "994805305181847552", "label": "1017", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 100, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "123456789050987654321 7\n", "output": "17636684150141093474 3\n"}, {"name": "", "input": "123456789050987654321 7\n", "output": "17636684150141093474 3\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "A除以B", "content": "本题要求计算 $$A/B$$，其中 $$A$$ 是不超过 1000 位的正整数，$$B$$ 是 1 位正整数。你需要输出商数 $$Q$$ 和余数 $$R$$，使得 $$A = B \\times Q + R$$ 成立。\n\n### 输入格式：\n\n输入在一行中依次给出 $$A$$ 和 $$B$$，中间以 1 空格分隔。\n\n### 输出格式：\n\n在一行中依次输出 $$Q$$ 和 $$R$$，中间以 1 空格分隔。\n\n### 输入样例：\n```in\n123456789050987654321 7\n```\n\n### 输出样例：\n```out\n17636684150141093474 3\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10241", "description": "本题要求计算 $$A/B$$，其中 $$A$$ 是不超过 1000 位的正整数，$$B$$ 是 1 位正整数。你需要输出商数 $$Q$$ 和余数 $$R$$，使得 $$A = B \\times Q + R$$ 成立。\n\n### 输入格式：\n\n输入在一行中依次给出 $$A$$ 和 $$B$$，中间以 1 空格分隔。\n\n### 输出格式：\n\n在一行中依次输出 $$Q$$ 和 $$R$$，中间以 1 空格分隔。\n\n### 输入样例：\n```in\n123456789050987654321 7\n```\n\n### 输出样例：\n```out\n17636684150141093474 3\n```\n"}}
{"problemSetProblem": {"id": "994805304020025344", "label": "1018", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "10\nC J\nJ B\nC B\nB B\nB C\nC C\nC B\nJ B\nB C\nJ J\n", "output": "5 3 2\n2 3 5\nB B\n"}, {"name": "", "input": "10\nC J\nJ B\nC B\nB B\nB C\nC C\nC B\nJ B\nB C\nJ J\n", "output": "5 3 2\n2 3 5\nB B\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "锤子剪刀布", "content": "大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：\n\n\n![FigCJB.jpg](~/724da598-b37f-4f1f-99b4-71459654ce3a.jpg)\n\n\n现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。\n\n### 输入格式：\n\n输入第 1 行给出正整数 $$N$$（$$\\le 10^5$$），即双方交锋的次数。随后 $$N$$ 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。`C` 代表“锤子”、`J` 代表“剪刀”、`B` 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。\n\n### 输出格式：\n\n输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。\n\n### 输入样例：\n```in\n10\nC J\nJ B\nC B\nB B\nB C\nC C\nC B\nJ B\nB C\nJ J\n```\n\n### 输出样例：\n```out\n5 3 2\n2 3 5\nB B\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10242", "description": "大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：\n\n\n![FigCJB.jpg](~/724da598-b37f-4f1f-99b4-71459654ce3a.jpg)\n\n\n现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。\n\n### 输入格式：\n\n输入第 1 行给出正整数 $$N$$（$$\\le 10^5$$），即双方交锋的次数。随后 $$N$$ 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。`C` 代表“锤子”、`J` 代表“剪刀”、`B` 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。\n\n### 输出格式：\n\n输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。\n\n### 输入样例：\n```in\n10\nC J\nJ B\nC B\nB B\nB C\nC C\nC B\nJ B\nB C\nJ J\n```\n\n### 输出样例：\n```out\n5 3 2\n2 3 5\nB B\n```\n"}}
{"problemSetProblem": {"id": "994805302786899968", "label": "1019", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6767\n", "output": "7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n"}, {"name": "", "input": "2222\n", "output": "2222 - 2222 = 0000\n"}, {"name": "", "input": "6767\n", "output": "7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n"}, {"name": "", "input": "2222\n", "output": "2222 - 2222 = 0000\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "数字黑洞", "content": "给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 `6174`，这个神奇的数字也叫 Kaprekar 常数。\n\n例如，我们从`6767`开始，将得到\n```\n7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n7641 - 1467 = 6174\n... ...\n```\n\n现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。\n\n### 输入格式：\n\n输入给出一个 $$(0, 10^4)$$ 区间内的正整数 $$N$$。\n\n### 输出格式：\n\n如果 $$N$$ 的 4 位数字全相等，则在一行内输出 `N - N = 0000`；否则将计算的每一步在一行内输出，直到 `6174` 作为差出现，输出格式见样例。注意每个数字按 `4` 位数格式输出。\n\n### 输入样例 1：\n```in\n6767\n```\n\n### 输出样例 1：\n```out\n7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n```\n\n### 输入样例 2：\n```in\n2222\n```\n\n### 输出样例 2：\n```out\n2222 - 2222 = 0000\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10243", "description": "给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 `6174`，这个神奇的数字也叫 Kaprekar 常数。\n\n例如，我们从`6767`开始，将得到\n```\n7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n7641 - 1467 = 6174\n... ...\n```\n\n现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。\n\n### 输入格式：\n\n输入给出一个 $$(0, 10^4)$$ 区间内的正整数 $$N$$。\n\n### 输出格式：\n\n如果 $$N$$ 的 4 位数字全相等，则在一行内输出 `N - N = 0000`；否则将计算的每一步在一行内输出，直到 `6174` 作为差出现，输出格式见样例。注意每个数字按 `4` 位数格式输出。\n\n### 输入样例 1：\n```in\n6767\n```\n\n### 输出样例 1：\n```out\n7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n```\n\n### 输入样例 2：\n```in\n2222\n```\n\n### 输出样例 2：\n```out\n2222 - 2222 = 0000\n```\n"}}
{"problemSetProblem": {"id": "994805301562163200", "label": "1020", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 150, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3 20\n18 15 10\n75 72 45\n", "output": "94.50\n"}, {"name": "", "input": "3 20\n18 15 10\n75 72 45\n", "output": "94.50\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "月饼", "content": "月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。\n\n注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。\n\n### 输入格式：\n\n每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $$N$$ 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 $$D$$ 表示市场最大需求量。随后一行给出 $$N$$ 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 $$N$$ 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。\n\n### 输出格式：\n\n对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。\n\n### 输入样例：\n```in\n3 20\n18 15 10\n75 72 45\n```\n\n### 输出样例：\n```out\n94.50\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10244", "description": "月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。\n\n注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。\n\n### 输入格式：\n\n每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $$N$$ 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 $$D$$ 表示市场最大需求量。随后一行给出 $$N$$ 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 $$N$$ 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。\n\n### 输出格式：\n\n对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。\n\n### 输入样例：\n```in\n3 20\n18 15 10\n75 72 45\n```\n\n### 输出样例：\n```out\n94.50\n```\n"}}
{"problemSetProblem": {"id": "994805300404535296", "label": "1021", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "100311\n", "output": "0:2\n1:3\n3:1\n"}, {"name": "", "input": "100311\n", "output": "0:2\n1:3\n3:1\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "个位数统计", "content": "给定一个 $$k$$ 位整数 $$N = d_{k-1}10^{k-1} + \\cdots + d_1 10^1 + d_0$$ ($$0\\le d_i \\le 9$$, $$i=0,\\cdots ,k-1$$, $$d_{k-1}>0$$)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 $$N = 100311$$，则有 2 个 0，3 个 1，和 1 个 3。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 $$N$$。\n\n### 输出格式：\n\n对 $$N$$ 中每一种不同的个位数字，以 `D:M` 的格式在一行中输出该位数字 `D` 及其在 $$N$$ 中出现的次数 `M`。要求按 `D` 的升序输出。\n\n### 输入样例：\n```in\n100311\n```\n\n### 输出样例：\n```out\n0:2\n1:3\n3:1\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10249", "description": "给定一个 $$k$$ 位整数 $$N = d_{k-1}10^{k-1} + \\cdots + d_1 10^1 + d_0$$ ($$0\\le d_i \\le 9$$, $$i=0,\\cdots ,k-1$$, $$d_{k-1}>0$$)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 $$N = 100311$$，则有 2 个 0，3 个 1，和 1 个 3。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 $$N$$。\n\n### 输出格式：\n\n对 $$N$$ 中每一种不同的个位数字，以 `D:M` 的格式在一行中输出该位数字 `D` 及其在 $$N$$ 中出现的次数 `M`。要求按 `D` 的升序输出。\n\n### 输入样例：\n```in\n100311\n```\n\n### 输出样例：\n```out\n0:2\n1:3\n3:1\n```\n"}}
{"problemSetProblem": {"id": "994805299301433344", "label": "1022", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "123 456 8\n", "output": "1103\n"}, {"name": "", "input": "123 456 8\n", "output": "1103\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "D进制的A+B", "content": "输入两个非负 10 进制整数 $$A$$ 和 $$B$$ ($$\\le 2^{30} -1$$)，输出 $$A+B$$ 的 $$D$$ ($$1 < D \\le 10$$)进制数。\n\n### 输入格式：\n\n输入在一行中依次给出 3 个整数 $$A$$、$$B$$ 和 $$D$$。\n\n### 输出格式：\n\n输出 $$A+B$$ 的 $$D$$ 进制数。\n\n### 输入样例：\n```in\n123 456 8\n```\n\n### 输出样例：\n```out\n1103\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10250", "description": "输入两个非负 10 进制整数 $$A$$ 和 $$B$$ ($$\\le 2^{30} -1$$)，输出 $$A+B$$ 的 $$D$$ ($$1 < D \\le 10$$)进制数。\n\n### 输入格式：\n\n输入在一行中依次给出 3 个整数 $$A$$、$$B$$ 和 $$D$$。\n\n### 输出格式：\n\n输出 $$A+B$$ 的 $$D$$ 进制数。\n\n### 输入样例：\n```in\n123 456 8\n```\n\n### 输出样例：\n```out\n1103\n```\n"}}
{"problemSetProblem": {"id": "994805298269634560", "label": "1023", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "2 2 0 0 0 3 0 0 1 0\n", "output": "10015558\n"}, {"name": "", "input": "2 2 0 0 0 3 0 0 1 0\n", "output": "10015558\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "组个最小数", "content": "给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。\n\n现给定数字，请编写程序输出能够组成的最小的数。\n\n### 输入格式：\n\n输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。\n\n### 输出格式：\n\n在一行中输出能够组成的最小的数。\n\n### 输入样例：\n```in\n2 2 0 0 0 3 0 0 1 0\n```\n\n### 输出样例：\n```out\n10015558\n```", "type": "PROGRAMMING", "author": "CAO, Peng", "authorOrganization": {"id": "4", "name": "Google", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10251", "description": "给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。\n\n现给定数字，请编写程序输出能够组成的最小的数。\n\n### 输入格式：\n\n输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。\n\n### 输出格式：\n\n在一行中输出能够组成的最小的数。\n\n### 输入样例：\n```in\n2 2 0 0 0 3 0 0 1 0\n```\n\n### 输出样例：\n```out\n10015558\n```"}}
{"problemSetProblem": {"id": "994805297229447168", "label": "1024", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "+1.23400E-03\n", "output": "0.00123400\n"}, {"name": "", "input": "-1.2E+10\n", "output": "-12000000000\n"}, {"name": "", "input": "+1.23400E-03\n", "output": "0.00123400\n"}, {"name": "", "input": "-1.2E+10\n", "output": "-12000000000\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "科学计数法", "content": "科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9]`.`[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。\n\n现以科学计数法的格式给出实数 $$A$$，请编写程序按普通数字表示法输出 $$A$$，并保证所有有效位都被保留。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 $$A$$。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。\n\n### 输出格式：\n\n对每个测试用例，在一行中按普通数字表示法输出 $$A$$，并保证所有有效位都被保留，包括末尾的 0。\n\n### 输入样例 1：\n```in\n+1.23400E-03\n```\n\n### 输出样例 1：\n```out\n0.00123400\n```\n\n### 输入样例 2：\n```in\n-1.2E+10\n```\n\n### 输出样例 2：\n```out\n-12000000000\n```\n", "type": "PROGRAMMING", "author": "HOU, Qiming", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10252", "description": "科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9]`.`[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。\n\n现以科学计数法的格式给出实数 $$A$$，请编写程序按普通数字表示法输出 $$A$$，并保证所有有效位都被保留。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 $$A$$。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。\n\n### 输出格式：\n\n对每个测试用例，在一行中按普通数字表示法输出 $$A$$，并保证所有有效位都被保留，包括末尾的 0。\n\n### 输入样例 1：\n```in\n+1.23400E-03\n```\n\n### 输出样例 1：\n```out\n0.00123400\n```\n\n### 输入样例 2：\n```in\n-1.2E+10\n```\n\n### 输出样例 2：\n```out\n-12000000000\n```\n"}}
{"problemSetProblem": {"id": "994805296180871168", "label": "1025", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "00100 6 4\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218\n", "output": "00000 4 33218\n33218 3 12309\n12309 2 00100\n00100 1 99999\n99999 5 68237\n68237 6 -1\n"}, {"name": "", "input": "00100 6 4\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218\n", "output": "00000 4 33218\n33218 3 12309\n12309 2 00100\n00100 1 99999\n99999 5 68237\n68237 6 -1\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "反转链表", "content": "给定一个常数 $$K$$ 以及一个单链表 $$L$$，请编写程序将 $$L$$ 中每 $$K$$ 个结点反转。例如：给定 $$L$$ 为 1→2→3→4→5→6，$$K$$ 为 3，则输出应该为 3→2→1→6→5→4；如果 $$K$$ 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 $$K$$ 个元素不反转。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 $$N$$ ($$\\le 10^5$$)、以及正整数 $$K$$ ($$\\le N$$)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 $$-1$$ 表示。\n\n接下来有 $$N$$ 行，每行格式为：\n```\nAddress Data Next\n```\n\n其中 `Address` 是结点地址，`Data` 是该结点保存的整数数据，`Next` 是下一结点的地址。\n\n### 输出格式：\n\n对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。\n\n### 输入样例：\n```in\n00100 6 4\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218\n```\n\n### 输出样例：\n```out\n00000 4 33218\n33218 3 12309\n12309 2 00100\n00100 1 99999\n99999 5 68237\n68237 6 -1\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10253", "description": "给定一个常数 $$K$$ 以及一个单链表 $$L$$，请编写程序将 $$L$$ 中每 $$K$$ 个结点反转。例如：给定 $$L$$ 为 1→2→3→4→5→6，$$K$$ 为 3，则输出应该为 3→2→1→6→5→4；如果 $$K$$ 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 $$K$$ 个元素不反转。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 $$N$$ ($$\\le 10^5$$)、以及正整数 $$K$$ ($$\\le N$$)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 $$-1$$ 表示。\n\n接下来有 $$N$$ 行，每行格式为：\n```\nAddress Data Next\n```\n\n其中 `Address` 是结点地址，`Data` 是该结点保存的整数数据，`Next` 是下一结点的地址。\n\n### 输出格式：\n\n对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。\n\n### 输入样例：\n```in\n00100 6 4\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218\n```\n\n### 输出样例：\n```out\n00000 4 33218\n33218 3 12309\n12309 2 00100\n00100 1 99999\n99999 5 68237\n68237 6 -1\n```\n"}}
{"problemSetProblem": {"id": "994805295203598336", "label": "1026", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "123 4577973\n", "output": "12:42:59\n"}, {"name": "", "input": "123 4577973\n", "output": "12:42:59\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "程序运行时间", "content": "要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 $$f$$ 的运行时间，我们只要在调用 $$f$$ 之前先调用 clock()，获得一个时钟打点数 C1；在 $$f$$ 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 $$f$$ 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。\n\n这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。\n\n### 输入格式：\n\n输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 $$<$$ C2，并且取值在 $$[0, 10^7]$$。\n\n### 输出格式：\n\n在一行中输出被测函数运行的时间。运行时间必须按照 `hh:mm:ss`（即2位的 `时:分:秒`）格式输出；不足 1 秒的时间四舍五入到秒。\n\n### 输入样例：\n```in\n123 4577973\n```\n\n### 输出样例：\n```out\n12:42:59\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10347", "description": "要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 $$f$$ 的运行时间，我们只要在调用 $$f$$ 之前先调用 clock()，获得一个时钟打点数 C1；在 $$f$$ 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 $$f$$ 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。\n\n这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。\n\n### 输入格式：\n\n输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 $$<$$ C2，并且取值在 $$[0, 10^7]$$。\n\n### 输出格式：\n\n在一行中输出被测函数运行的时间。运行时间必须按照 `hh:mm:ss`（即2位的 `时:分:秒`）格式输出；不足 1 秒的时间四舍五入到秒。\n\n### 输入样例：\n```in\n123 4577973\n```\n\n### 输出样例：\n```out\n12:42:59\n```\n"}}
{"problemSetProblem": {"id": "994805294251491328", "label": "1027", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "19 *\n", "output": "*****\n ***\n  *\n ***\n*****\n2\n"}, {"name": "", "input": "19 *\n", "output": "*****\n ***\n  *\n ***\n*****\n2\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "打印沙漏", "content": "本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印\n```\n*****\n ***\n  *\n ***\n*****\n```\n\n所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。\n\n给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。\n\n\n### 输入格式:\n\n输入在一行给出1个正整数N（$$\\le$$1000）和一个符号，中间以空格分隔。\n\n### 输出格式:\n\n首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。\n\n### 输入样例:\n```in\n19 *\n```\n\n### 输出样例:\n```out\n*****\n ***\n  *\n ***\n*****\n2\n```", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10348", "description": "本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印\n```\n*****\n ***\n  *\n ***\n*****\n```\n\n所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。\n\n给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。\n\n\n### 输入格式:\n\n输入在一行给出1个正整数N（$$\\le$$1000）和一个符号，中间以空格分隔。\n\n### 输出格式:\n\n首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。\n\n### 输入样例:\n```in\n19 *\n```\n\n### 输出样例:\n```out\n*****\n ***\n  *\n ***\n*****\n2\n```"}}
{"problemSetProblem": {"id": "994805293282607104", "label": "1028", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5\nJohn 2001/05/12\nTom 1814/09/06\nAnn 2121/01/30\nJames 1814/09/05\nSteve 1967/11/20\n", "output": "3 Tom John\n"}, {"name": "", "input": "5\nJohn 2001/05/12\nTom 1814/09/06\nAnn 2121/01/30\nJames 1814/09/05\nSteve 1967/11/20\n", "output": "3 Tom John\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "人口普查", "content": "某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。\n\n这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。\n\n### 输入格式：\n\n输入在第一行给出正整数 $$N$$，取值在$$(0, 10^5]$$；随后 $$N$$ 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 `yyyy/mm/dd`（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。\n\n### 输出格式：\n\n在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。\n\n### 输入样例：\n```in\n5\nJohn 2001/05/12\nTom 1814/09/06\nAnn 2121/01/30\nJames 1814/09/05\nSteve 1967/11/20\n```\n\n### 输出样例：\n```out\n3 Tom John\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10349", "description": "某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。\n\n这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。\n\n### 输入格式：\n\n输入在第一行给出正整数 $$N$$，取值在$$(0, 10^5]$$；随后 $$N$$ 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 `yyyy/mm/dd`（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。\n\n### 输出格式：\n\n在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。\n\n### 输入样例：\n```in\n5\nJohn 2001/05/12\nTom 1814/09/06\nAnn 2121/01/30\nJames 1814/09/05\nSteve 1967/11/20\n```\n\n### 输出样例：\n```out\n3 Tom John\n```\n"}}
{"problemSetProblem": {"id": "994805292322111488", "label": "1029", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "7_This_is_a_test\n_hs_s_a_es\n", "output": "7TI\n"}, {"name": "", "input": "7_This_is_a_test\n_hs_s_a_es\n", "output": "7TI\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "旧键盘", "content": "旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。\n\n### 输入格式：\n\n输入在 2 行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过 80 个字符的串，由字母 A-Z（包括大、小写）、数字 0-9、以及下划线 `_`（代表空格）组成。题目保证 2 个字符串均非空。\n\n### 输出格式：\n\n按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键。\n\n### 输入样例：\n```in\n7_This_is_a_test\n_hs_s_a_es\n```\n\n### 输出样例：\n```out\n7TI\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10350", "description": "旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。\n\n### 输入格式：\n\n输入在 2 行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过 80 个字符的串，由字母 A-Z（包括大、小写）、数字 0-9、以及下划线 `_`（代表空格）组成。题目保证 2 个字符串均非空。\n\n### 输出格式：\n\n按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键。\n\n### 输入样例：\n```in\n7_This_is_a_test\n_hs_s_a_es\n```\n\n### 输出样例：\n```out\n7TI\n```\n"}}
{"problemSetProblem": {"id": "994805291311284224", "label": "1030", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "10 8\n2 3 20 4 5 1 6 7 8 9\n", "output": "8\n"}, {"name": "", "input": "10 8\n2 3 20 4 5 1 6 7 8 9\n", "output": "8\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "完美数列", "content": "给定一个正整数数列，和正整数 $$p$$，设这个数列中的最大值是 $$M$$，最小值是 $$m$$，如果 $$M \\le mp$$，则称这个数列是完美数列。\n\n现在给定参数 $$p$$ 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。\n\n### 输入格式：\n\n输入第一行给出两个正整数 $$N$$ 和 $$p$$，其中 $$N$$（$$\\le 10^5$$）是输入的正整数的个数，$$p$$（$$\\le 10^9$$）是给定的参数。第二行给出 $$N$$ 个正整数，每个数不超过 $$10^9$$。\n\n### 输出格式：\n\n在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。\n\n### 输入样例：\n```in\n10 8\n2 3 20 4 5 1 6 7 8 9\n```\n\n### 输出样例：\n```out\n8\n```\n", "type": "PROGRAMMING", "author": "CAO, Peng", "authorOrganization": {"id": "4", "name": "Google", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10351", "description": "给定一个正整数数列，和正整数 $$p$$，设这个数列中的最大值是 $$M$$，最小值是 $$m$$，如果 $$M \\le mp$$，则称这个数列是完美数列。\n\n现在给定参数 $$p$$ 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。\n\n### 输入格式：\n\n输入第一行给出两个正整数 $$N$$ 和 $$p$$，其中 $$N$$（$$\\le 10^5$$）是输入的正整数的个数，$$p$$（$$\\le 10^9$$）是给定的参数。第二行给出 $$N$$ 个正整数，每个数不超过 $$10^9$$。\n\n### 输出格式：\n\n在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。\n\n### 输入样例：\n```in\n10 8\n2 3 20 4 5 1 6 7 8 9\n```\n\n### 输出样例：\n```out\n8\n```\n"}}
{"problemSetProblem": {"id": "994805290334011392", "label": "1031", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "4\n320124198808240056\n12010X198901011234\n110108196711301866\n37070419881216001X\n", "output": "12010X198901011234\n110108196711301866\n37070419881216001X\n"}, {"name": "", "input": "4\n320124198808240056\n12010X198901011234\n110108196711301866\n37070419881216001X\n", "output": "12010X198901011234\n110108196711301866\n37070419881216001X\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "查验身份证", "content": "一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：\n\n首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值`Z`；最后按照以下关系对应`Z`值与校验码`M`的值：\n```\nZ：0 1 2 3 4 5 6 7 8 9 10\nM：1 0 X 9 8 7 6 5 4 3 2\n```\n现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。\n\n### 输入格式：\n\n输入第一行给出正整数$$N$$（$$\\le 100$$）是输入的身份证号码的个数。随后$$N$$行，每行给出1个18位身份证号码。\n\n### 输出格式：\n\n按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出`All passed`。\n\n### 输入样例1：\n```in\n4\n320124198808240056\n12010X198901011234\n110108196711301866\n37070419881216001X\n```\n\n### 输出样例1：\n```out\n12010X198901011234\n110108196711301866\n37070419881216001X\n```\n\n### 输入样例2：\n```\n2\n320124198808240056\n110108196711301862\n```\n\n### 输出样例2：\n```\nAll passed\n```\n\n**鸣谢阜阳师范学院范建中老师补充数据**\n\n**鸣谢浙江工业大学之江学院石洗凡老师纠正数据**", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10482", "description": "一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：\n\n首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值`Z`；最后按照以下关系对应`Z`值与校验码`M`的值：\n```\nZ：0 1 2 3 4 5 6 7 8 9 10\nM：1 0 X 9 8 7 6 5 4 3 2\n```\n现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。\n\n### 输入格式：\n\n输入第一行给出正整数$$N$$（$$\\le 100$$）是输入的身份证号码的个数。随后$$N$$行，每行给出1个18位身份证号码。\n\n### 输出格式：\n\n按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出`All passed`。\n\n### 输入样例1：\n```in\n4\n320124198808240056\n12010X198901011234\n110108196711301866\n37070419881216001X\n```\n\n### 输出样例1：\n```out\n12010X198901011234\n110108196711301866\n37070419881216001X\n```\n\n### 输入样例2：\n```\n2\n320124198808240056\n110108196711301862\n```\n\n### 输出样例2：\n```\nAll passed\n```\n\n**鸣谢阜阳师范学院范建中老师补充数据**\n\n**鸣谢浙江工业大学之江学院石洗凡老师纠正数据**"}}
{"problemSetProblem": {"id": "994805289432236032", "label": "1032", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6\n3 65\n2 80\n1 100\n2 70\n3 40\n3 0\n", "output": "2 150\n"}, {"name": "", "input": "6\n3 65\n2 80\n1 100\n2 70\n3 40\n3 0\n", "output": "2 150\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "挖掘机技术哪家强", "content": "为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。\n\n### 输入格式：\n\n输入在第 1 行给出不超过 $$10^5$$ 的正整数 $$N$$，即参赛人数。随后 $$N$$ 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。\n\n### 输出格式：\n\n在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。\n\n### 输入样例：\n```in\n6\n3 65\n2 80\n1 100\n2 70\n3 40\n3 0\n```\n\n### 输出样例：\n```out\n2 150\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10483", "description": "为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。\n\n### 输入格式：\n\n输入在第 1 行给出不超过 $$10^5$$ 的正整数 $$N$$，即参赛人数。随后 $$N$$ 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。\n\n### 输出格式：\n\n在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。\n\n### 输入样例：\n```in\n6\n3 65\n2 80\n1 100\n2 70\n3 40\n3 0\n```\n\n### 输出样例：\n```out\n2 150\n```\n"}}
{"problemSetProblem": {"id": "994805288530460672", "label": "1033", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "7+IE.\n7_This_is_a_test.\n", "output": "_hs_s_a_tst\n"}, {"name": "", "input": "7+IE.\n7_This_is_a_test.\n", "output": "_hs_s_a_tst\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "旧键盘打字", "content": "旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？\n\n### 输入格式：\n\n输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 $$10^5$$ 个字符的串。可用的字符包括字母 [`a`-`z`, `A`-`Z`]、数字 `0`-`9`、以及下划线 `_`（代表空格）、`,`、`.`、`-`、`+`（代表上档键）。题目保证第 2 行输入的文字串非空。\n\n注意：如果上档键坏掉了，那么大写的英文字母无法被打出。\n\n### 输出格式：\n\n在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。\n\n### 输入样例：\n```in\n7+IE.\n7_This_is_a_test.\n```\n\n### 输出样例：\n```out\n_hs_s_a_tst\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10484", "description": "旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？\n\n### 输入格式：\n\n输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 $$10^5$$ 个字符的串。可用的字符包括字母 [`a`-`z`, `A`-`Z`]、数字 `0`-`9`、以及下划线 `_`（代表空格）、`,`、`.`、`-`、`+`（代表上档键）。题目保证第 2 行输入的文字串非空。\n\n注意：如果上档键坏掉了，那么大写的英文字母无法被打出。\n\n### 输出格式：\n\n在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。\n\n### 输入样例：\n```in\n7+IE.\n7_This_is_a_test.\n```\n\n### 输出样例：\n```out\n_hs_s_a_tst\n```\n"}}
{"problemSetProblem": {"id": "994805287624491008", "label": "1034", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "2/3 -4/2\n", "output": "2/3 + (-2) = (-1 1/3)\n2/3 - (-2) = 2 2/3\n2/3 * (-2) = (-1 1/3)\n2/3 / (-2) = (-1/3)\n"}, {"name": "", "input": "5/3 0/6\n", "output": "1 2/3 + 0 = 1 2/3\n1 2/3 - 0 = 1 2/3\n1 2/3 * 0 = 0\n1 2/3 / 0 = Inf\n"}, {"name": "", "input": "2/3 -4/2\n", "output": "2/3 + (-2) = (-1 1/3)\n2/3 - (-2) = 2 2/3\n2/3 * (-2) = (-1 1/3)\n2/3 / (-2) = (-1/3)\n"}, {"name": "", "input": "5/3 0/6\n", "output": "1 2/3 + 0 = 1 2/3\n1 2/3 - 0 = 1 2/3\n1 2/3 * 0 = 0\n1 2/3 / 0 = Inf\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "有理数四则运算", "content": "本题要求编写程序，计算 2 个有理数的和、差、积、商。\n\n### 输入格式：\n\n输入在一行中按照 `a1/b1 a2/b2` 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。\n\n### 输出格式：\n\n分别在 4 行中按照 `有理数1 运算符 有理数2 = 结果` 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 `k a/b`，其中 `k` 是整数部分，`a/b` 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 `Inf`。题目保证正确的输出中没有超过整型范围的整数。\n\n### 输入样例 1：\n```in\n2/3 -4/2\n```\n\n### 输出样例 1：\n```out\n2/3 + (-2) = (-1 1/3)\n2/3 - (-2) = 2 2/3\n2/3 * (-2) = (-1 1/3)\n2/3 / (-2) = (-1/3)\n```\n\n### 输入样例 2：\n```in\n5/3 0/6\n```\n\n### 输出样例 2：\n```out\n1 2/3 + 0 = 1 2/3\n1 2/3 - 0 = 1 2/3\n1 2/3 * 0 = 0\n1 2/3 / 0 = Inf\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10485", "description": "本题要求编写程序，计算 2 个有理数的和、差、积、商。\n\n### 输入格式：\n\n输入在一行中按照 `a1/b1 a2/b2` 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。\n\n### 输出格式：\n\n分别在 4 行中按照 `有理数1 运算符 有理数2 = 结果` 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 `k a/b`，其中 `k` 是整数部分，`a/b` 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 `Inf`。题目保证正确的输出中没有超过整型范围的整数。\n\n### 输入样例 1：\n```in\n2/3 -4/2\n```\n\n### 输出样例 1：\n```out\n2/3 + (-2) = (-1 1/3)\n2/3 - (-2) = 2 2/3\n2/3 * (-2) = (-1 1/3)\n2/3 / (-2) = (-1/3)\n```\n\n### 输入样例 2：\n```in\n5/3 0/6\n```\n\n### 输出样例 2：\n```out\n1 2/3 + 0 = 1 2/3\n1 2/3 - 0 = 1 2/3\n1 2/3 * 0 = 0\n1 2/3 / 0 = Inf\n```\n"}}
{"problemSetProblem": {"id": "994805286714327040", "label": "1035", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "10\n3 1 2 8 7 5 9 4 6 0\n1 2 3 7 8 5 9 4 6 0\n", "output": "Insertion Sort\n1 2 3 5 7 8 9 4 6 0\n"}, {"name": "", "input": "10\n3 1 2 8 7 5 9 4 0 6\n1 3 2 8 5 7 4 9 0 6\n", "output": "Merge Sort\n1 2 3 8 4 5 7 9 0 6\n"}, {"name": "", "input": "10\n3 1 2 8 7 5 9 4 6 0\n1 2 3 7 8 5 9 4 6 0\n", "output": "Insertion Sort\n1 2 3 5 7 8 9 4 6 0\n"}, {"name": "", "input": "10\n3 1 2 8 7 5 9 4 0 6\n1 3 2 8 5 7 4 9 0 6\n", "output": "Merge Sort\n1 2 3 8 4 5 7 9 0 6\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "插入与归并", "content": "根据维基百科的定义：\n\n**插入排序**是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。\n\n**归并排序**进行如下迭代操作：首先将原始序列看成 N 个只包含 1 个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下 1 个有序的序列。\n\n现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？\n\n\n### 输入格式：\n\n输入在第一行给出正整数 N ($$\\le$$100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。\n\n### 输出格式：\n\n首先在第 1 行中输出`Insertion Sort`表示插入排序、或`Merge Sort`表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。\n\n### 输入样例 1：\n```in\n10\n3 1 2 8 7 5 9 4 6 0\n1 2 3 7 8 5 9 4 6 0\n```\n\n### 输出样例 1：\n```out\nInsertion Sort\n1 2 3 5 7 8 9 4 6 0\n```\n\n### 输入样例 2：\n```in\n10\n3 1 2 8 7 5 9 4 0 6\n1 3 2 8 5 7 4 9 0 6\n```\n\n### 输出样例 2：\n```out\nMerge Sort\n1 2 3 8 4 5 7 9 0 6\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10486", "description": "根据维基百科的定义：\n\n**插入排序**是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。\n\n**归并排序**进行如下迭代操作：首先将原始序列看成 N 个只包含 1 个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下 1 个有序的序列。\n\n现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？\n\n\n### 输入格式：\n\n输入在第一行给出正整数 N ($$\\le$$100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。\n\n### 输出格式：\n\n首先在第 1 行中输出`Insertion Sort`表示插入排序、或`Merge Sort`表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。\n\n### 输入样例 1：\n```in\n10\n3 1 2 8 7 5 9 4 6 0\n1 2 3 7 8 5 9 4 6 0\n```\n\n### 输出样例 1：\n```out\nInsertion Sort\n1 2 3 5 7 8 9 4 6 0\n```\n\n### 输入样例 2：\n```in\n10\n3 1 2 8 7 5 9 4 0 6\n1 3 2 8 5 7 4 9 0 6\n```\n\n### 输出样例 2：\n```out\nMerge Sort\n1 2 3 8 4 5 7 9 0 6\n```\n"}}
{"problemSetProblem": {"id": "994805285812551680", "label": "1036", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "10 a\n", "output": "aaaaaaaaaa\na        a\na        a\na        a\naaaaaaaaaa\n"}, {"name": "", "input": "10 a\n", "output": "aaaaaaaaaa\na        a\na        a\na        a\naaaaaaaaaa\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "跟奥巴马一起编程", "content": "美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！\n\n### 输入格式：\n\n输入在一行中给出正方形边长 $$N$$（$$3\\le N\\le 20$$）和组成正方形边的某种字符 C，间隔一个空格。\n\n### 输出格式：\n\n输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。\n\n### 输入样例：\n```in\n10 a\n```\n\n### 输出样例：\n```out\naaaaaaaaaa\na        a\na        a\na        a\naaaaaaaaaa\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10511", "description": "美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！\n\n### 输入格式：\n\n输入在一行中给出正方形边长 $$N$$（$$3\\le N\\le 20$$）和组成正方形边的某种字符 C，间隔一个空格。\n\n### 输出格式：\n\n输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。\n\n### 输入样例：\n```in\n10 a\n```\n\n### 输出样例：\n```out\naaaaaaaaaa\na        a\na        a\na        a\naaaaaaaaaa\n```\n"}}
{"problemSetProblem": {"id": "994805284923359232", "label": "1037", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "10.16.27 14.1.28\n", "output": "3.2.1\n"}, {"name": "", "input": "14.1.28 10.16.27\n", "output": "-3.2.1\n"}, {"name": "", "input": "10.16.27 14.1.28\n", "output": "3.2.1\n"}, {"name": "", "input": "14.1.28 10.16.27\n", "output": "-3.2.1\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "在霍格沃茨找零钱", "content": "如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 $$P$$ 和他实付的钱 $$A$$，你的任务是写一个程序来计算他应该被找的零钱。\n\n### 输入格式：\n\n输入在 1 行中分别给出 $$P$$ 和 $$A$$，格式为 `Galleon.Sickle.Knut`，其间用 1 个空格分隔。这里 `Galleon` 是 [0, $$10^7$$] 区间内的整数，`Sickle` 是 [0, 17) 区间内的整数，`Knut` 是 [0, 29) 区间内的整数。\n\n### 输出格式：\n\n在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。\n\n### 输入样例 1：\n```in\n10.16.27 14.1.28\n```\n\n### 输出样例 1：\n```out\n3.2.1\n```\n\n### 输入样例 2：\n```in\n14.1.28 10.16.27\n```\n\n### 输出样例 2：\n```out\n-3.2.1\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10512", "description": "如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 $$P$$ 和他实付的钱 $$A$$，你的任务是写一个程序来计算他应该被找的零钱。\n\n### 输入格式：\n\n输入在 1 行中分别给出 $$P$$ 和 $$A$$，格式为 `Galleon.Sickle.Knut`，其间用 1 个空格分隔。这里 `Galleon` 是 [0, $$10^7$$] 区间内的整数，`Sickle` 是 [0, 17) 区间内的整数，`Knut` 是 [0, 29) 区间内的整数。\n\n### 输出格式：\n\n在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。\n\n### 输入样例 1：\n```in\n10.16.27 14.1.28\n```\n\n### 输出样例 1：\n```out\n3.2.1\n```\n\n### 输入样例 2：\n```in\n14.1.28 10.16.27\n```\n\n### 输出样例 2：\n```out\n-3.2.1\n```\n"}}
{"problemSetProblem": {"id": "994805284092887040", "label": "1038", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 250, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "10\n60 75 90 55 75 99 82 90 75 50\n3 75 90 88\n", "output": "3 2 0\n"}, {"name": "", "input": "10\n60 75 90 55 75 99 82 90 75 50\n3 75 90 88\n", "output": "3 2 0\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "统计同成绩学生", "content": "本题要求读入 $$N$$ 名学生的成绩，将获得某一给定分数的学生人数输出。\n\n### 输入格式：\n\n输入在第 1 行给出不超过 $$10^5$$ 的正整数 $$N$$，即学生总人数。随后一行给出 $$N$$ 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 $$K$$（不超过 $$N$$ 的正整数），随后是 $$K$$ 个分数，中间以空格分隔。\n\n### 输出格式：\n\n在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。\n\n### 输入样例：\n```in\n10\n60 75 90 55 75 99 82 90 75 50\n3 75 90 88\n```\n\n### 输出样例：\n```out\n3 2 0\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10513", "description": "本题要求读入 $$N$$ 名学生的成绩，将获得某一给定分数的学生人数输出。\n\n### 输入格式：\n\n输入在第 1 行给出不超过 $$10^5$$ 的正整数 $$N$$，即学生总人数。随后一行给出 $$N$$ 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 $$K$$（不超过 $$N$$ 的正整数），随后是 $$K$$ 个分数，中间以空格分隔。\n\n### 输出格式：\n\n在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。\n\n### 输入样例：\n```in\n10\n60 75 90 55 75 99 82 90 75 50\n3 75 90 88\n```\n\n### 输出样例：\n```out\n3 2 0\n```\n"}}
{"problemSetProblem": {"id": "994805283241443328", "label": "1039", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 150, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "ppRYYGrrYBR2258\nYrR8RrY\n", "output": "Yes 8\n"}, {"name": "", "input": "ppRYYGrrYB225\nYrR8RrY\n", "output": "No 2\n"}, {"name": "", "input": "ppRYYGrrYBR2258\nYrR8RrY\n", "output": "Yes 8\n"}, {"name": "", "input": "ppRYYGrrYB225\nYrR8RrY\n", "output": "No 2\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "到底买不买", "content": "小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。\n\n为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。\n\n![figbuy.jpg](~/b7e2ffa6-8819-436d-ad79-a41263abe914.jpg)\n\n图 1\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。\n\n### 输出格式：\n\n如果可以买，则在一行中输出 `Yes` 以及有多少多余的珠子；如果不可以买，则在一行中输出 `No` 以及缺了多少珠子。其间以 1 个空格分隔。\n\n### 输入样例 1：\n```in\nppRYYGrrYBR2258\nYrR8RrY\n```\n\n### 输出样例 1：\n```out\nYes 8\n```\n\n### 输入样例 2：\n```in\nppRYYGrrYB225\nYrR8RrY\n```\n\n### 输出样例 2：\n```out\nNo 2\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10514", "description": "小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。\n\n为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。\n\n![figbuy.jpg](~/b7e2ffa6-8819-436d-ad79-a41263abe914.jpg)\n\n图 1\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。\n\n### 输出格式：\n\n如果可以买，则在一行中输出 `Yes` 以及有多少多余的珠子；如果不可以买，则在一行中输出 `No` 以及缺了多少珠子。其间以 1 个空格分隔。\n\n### 输入样例 1：\n```in\nppRYYGrrYBR2258\nYrR8RrY\n```\n\n### 输出样例 1：\n```out\nYes 8\n```\n\n### 输入样例 2：\n```in\nppRYYGrrYB225\nYrR8RrY\n```\n\n### 输出样例 2：\n```out\nNo 2\n```\n"}}
{"problemSetProblem": {"id": "994805282389999616", "label": "1040", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 150, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "APPAPT\n", "output": "2\n"}, {"name": "", "input": "APPAPT\n", "output": "2\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "有几个PAT", "content": "字符串 `APPAPT` 中包含了两个单词 `PAT`，其中第一个 `PAT` 是第 2 位(`P`)，第 4 位(`A`)，第 6 位(`T`)；第二个 `PAT` 是第 3 位(`P`)，第 4 位(`A`)，第 6 位(`T`)。\n\n现给定字符串，问一共可以形成多少个 `PAT`？\n\n### 输入格式：\n\n输入只有一行，包含一个字符串，长度不超过$$10^5$$，只包含 `P`、`A`、`T` 三种字母。\n\n### 输出格式：\n\n在一行中输出给定字符串中包含多少个 `PAT`。由于结果可能比较大，只输出对 1000000007 取余数的结果。\n\n### 输入样例：\n```in\nAPPAPT\n```\n\n### 输出样例：\n```out\n2\n```\n", "type": "PROGRAMMING", "author": "CAO, Peng", "authorOrganization": {"id": "4", "name": "Google", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10515", "description": "字符串 `APPAPT` 中包含了两个单词 `PAT`，其中第一个 `PAT` 是第 2 位(`P`)，第 4 位(`A`)，第 6 位(`T`)；第二个 `PAT` 是第 3 位(`P`)，第 4 位(`A`)，第 6 位(`T`)。\n\n现给定字符串，问一共可以形成多少个 `PAT`？\n\n### 输入格式：\n\n输入只有一行，包含一个字符串，长度不超过$$10^5$$，只包含 `P`、`A`、`T` 三种字母。\n\n### 输出格式：\n\n在一行中输出给定字符串中包含多少个 `PAT`。由于结果可能比较大，只输出对 1000000007 取余数的结果。\n\n### 输入样例：\n```in\nAPPAPT\n```\n\n### 输出样例：\n```out\n2\n```\n"}}
{"problemSetProblem": {"id": "994805281567916032", "label": "1041", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "4\n3310120150912233 2 4\n3310120150912119 4 1\n3310120150912126 1 3\n3310120150912002 3 2\n2\n3 4\n", "output": "3310120150912002 2\n3310120150912119 1\n"}, {"name": "", "input": "4\n3310120150912233 2 4\n3310120150912119 4 1\n3310120150912126 1 3\n3310120150912002 3 2\n2\n3 4\n", "output": "3310120150912002 2\n3310120150912119 1\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "考试座位号", "content": "每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$\\le 1000$$），随后 $$N$$ 行，每行给出一个考生的信息：`准考证号 试机座位号 考试座位号`。其中`准考证号`由 16 位数字组成，座位从 1 到 $$N$$ 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。\n\n考生信息之后，给出一个正整数 $$M$$（$$\\le N$$），随后一行中给出 $$M$$ 个待查询的试机座位号码，以空格分隔。\n\n### 输出格式：\n\n对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。\n\n### 输入样例：\n```in\n4\n3310120150912233 2 4\n3310120150912119 4 1\n3310120150912126 1 3\n3310120150912002 3 2\n2\n3 4\n```\n\n### 输出样例：\n```out\n3310120150912002 2\n3310120150912119 1\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10534", "description": "每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$\\le 1000$$），随后 $$N$$ 行，每行给出一个考生的信息：`准考证号 试机座位号 考试座位号`。其中`准考证号`由 16 位数字组成，座位从 1 到 $$N$$ 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。\n\n考生信息之后，给出一个正整数 $$M$$（$$\\le N$$），随后一行中给出 $$M$$ 个待查询的试机座位号码，以空格分隔。\n\n### 输出格式：\n\n对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。\n\n### 输入样例：\n```in\n4\n3310120150912233 2 4\n3310120150912119 4 1\n3310120150912126 1 3\n3310120150912002 3 2\n2\n3 4\n```\n\n### 输出样例：\n```out\n3310120150912002 2\n3310120150912119 1\n```\n"}}
{"problemSetProblem": {"id": "994805280817135616", "label": "1042", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "This is a simple TEST.  There ARE numbers and other symbols 1&2&3...........\n", "output": "e 7\n"}, {"name": "", "input": "This is a simple TEST.  There ARE numbers and other symbols 1&2&3...........\n", "output": "e 7\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "字符统计", "content": "请编写程序，找出一段给定文字中出现最频繁的那个英文字母。\n\n### 输入格式：\n\n输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。\n\n### 输出格式：\n\n在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。\n\n### 输入样例：\n```in\nThis is a simple TEST.  There ARE numbers and other symbols 1&2&3...........\n```\n\n### 输出样例：\n```out\ne 7\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10535", "description": "请编写程序，找出一段给定文字中出现最频繁的那个英文字母。\n\n### 输入格式：\n\n输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。\n\n### 输出格式：\n\n在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。\n\n### 输入样例：\n```in\nThis is a simple TEST.  There ARE numbers and other symbols 1&2&3...........\n```\n\n### 输出样例：\n```out\ne 7\n```\n"}}
{"problemSetProblem": {"id": "994805280074743808", "label": "1043", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "redlesPayBestPATTopTeePHPereatitAPPT\n", "output": "PATestPATestPTetPTePePee\n"}, {"name": "", "input": "redlesPayBestPATTopTeePHPereatitAPPT\n", "output": "PATestPATestPTetPTePePee\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "输出PATest", "content": "给定一个长度不超过 $$10^4$$ 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 `PATestPATest....` 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。\n\n### 输入格式：\n\n输入在一行中给出一个长度不超过 $$10^4$$ 的、仅由英文字母构成的非空字符串。\n\n### 输出格式：\n\n在一行中按题目要求输出排序后的字符串。题目保证输出非空。\n\n### 输入样例：\n```in\nredlesPayBestPATTopTeePHPereatitAPPT\n```\n\n### 输出样例：\n```out\nPATestPATestPTetPTePePee\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10536", "description": "给定一个长度不超过 $$10^4$$ 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 `PATestPATest....` 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。\n\n### 输入格式：\n\n输入在一行中给出一个长度不超过 $$10^4$$ 的、仅由英文字母构成的非空字符串。\n\n### 输出格式：\n\n在一行中按题目要求输出排序后的字符串。题目保证输出非空。\n\n### 输入样例：\n```in\nredlesPayBestPATTopTeePHPereatitAPPT\n```\n\n### 输出样例：\n```out\nPATestPATestPTetPTePePee\n```\n"}}
{"problemSetProblem": {"id": "994805279328157696", "label": "1044", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "4\n29\n5\nelo nov\ntam\n", "output": "hel mar\nmay\n115\n13\n"}, {"name": "", "input": "4\n29\n5\nelo nov\ntam\n", "output": "hel mar\nmay\n115\n13\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "火星数字", "content": "火星人是以 13 进制计数的：\n\n- 地球人的 0 被火星人称为 tret。\n- 地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。\n- 火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。\n\n例如地球人的数字 `29` 翻译成火星文就是 `hel mar`；而火星文 `elo nov` 对应地球数字 `115`。为了方便交流，请你编写程序实现地球和火星数字之间的互译。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$<100$$），随后 $$N$$ 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。\n\n### 输出格式：\n\n对应输入的每一行，在一行中输出翻译后的另一种语言的数字。\n\n### 输入样例：\n```in\n4\n29\n5\nelo nov\ntam\n```\n\n### 输出样例：\n```out\nhel mar\nmay\n115\n13\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10537", "description": "火星人是以 13 进制计数的：\n\n- 地球人的 0 被火星人称为 tret。\n- 地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。\n- 火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。\n\n例如地球人的数字 `29` 翻译成火星文就是 `hel mar`；而火星文 `elo nov` 对应地球数字 `115`。为了方便交流，请你编写程序实现地球和火星数字之间的互译。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$<100$$），随后 $$N$$ 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。\n\n### 输出格式：\n\n对应输入的每一行，在一行中输出翻译后的另一种语言的数字。\n\n### 输入样例：\n```in\n4\n29\n5\nelo nov\ntam\n```\n\n### 输出样例：\n```out\nhel mar\nmay\n115\n13\n```\n"}}
{"problemSetProblem": {"id": "994805278589960192", "label": "1045", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5\n1 3 2 4 5\n", "output": "3\n1 4 5\n"}, {"name": "", "input": "5\n1 3 2 4 5\n", "output": "3\n1 4 5\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "快速排序", "content": "著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 $$N$$ 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？\n\n例如给定 $N = 5$, 排列是1、3、2、4、5。则：\n\n- 1 的左边没有元素，右边的元素都比它大，所以它可能是主元；\n- 尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；\n- 尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；\n- 类似原因，4 和 5 都可能是主元。\n\n因此，有 3 个元素可能是主元。\n\n### 输入格式：\n\n输入在第 1 行中给出一个正整数 $$N$$（$$\\le 10^5$$）； 第 2 行是空格分隔的 $$N$$ 个不同的正整数，每个数不超过 $$10^9$$。\n\n### 输出格式：\n\n在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。\n\n### 输入样例：\n```in\n5\n1 3 2 4 5\n```\n\n### 输出样例：\n```out\n3\n1 4 5\n```\n", "type": "PROGRAMMING", "author": "CAO, Peng", "authorOrganization": {"id": "4", "name": "Google", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10538", "description": "著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 $$N$$ 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？\n\n例如给定 $N = 5$, 排列是1、3、2、4、5。则：\n\n- 1 的左边没有元素，右边的元素都比它大，所以它可能是主元；\n- 尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；\n- 尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；\n- 类似原因，4 和 5 都可能是主元。\n\n因此，有 3 个元素可能是主元。\n\n### 输入格式：\n\n输入在第 1 行中给出一个正整数 $$N$$（$$\\le 10^5$$）； 第 2 行是空格分隔的 $$N$$ 个不同的正整数，每个数不超过 $$10^9$$。\n\n### 输出格式：\n\n在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。\n\n### 输入样例：\n```in\n5\n1 3 2 4 5\n```\n\n### 输出样例：\n```out\n3\n1 4 5\n```\n"}}
{"problemSetProblem": {"id": "994805277847568384", "label": "1046", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15\n", "output": "1 2\n"}, {"name": "", "input": "5\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15\n", "output": "1 2\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "划拳", "content": "划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。\n\n下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。\n\n### 输入格式：\n\n输入第一行先给出一个正整数 $$N$$（$$\\le 100$$），随后 $$N$$ 行，每行给出一轮划拳的记录，格式为：\n```\n甲喊 甲划 乙喊 乙划\n```\n其中`喊`是喊出的数字，`划`是划出的数字，均为不超过 100 的正整数（两只手一起划）。\n\n### 输出格式：\n\n在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。\n\n### 输入样例：\n```in\n5\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15\n```\n\n### 输出样例：\n```out\n1 2\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10545", "description": "划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。\n\n下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。\n\n### 输入格式：\n\n输入第一行先给出一个正整数 $$N$$（$$\\le 100$$），随后 $$N$$ 行，每行给出一轮划拳的记录，格式为：\n```\n甲喊 甲划 乙喊 乙划\n```\n其中`喊`是喊出的数字，`划`是划出的数字，均为不超过 100 的正整数（两只手一起划）。\n\n### 输出格式：\n\n在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。\n\n### 输入样例：\n```in\n5\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15\n```\n\n### 输出样例：\n```out\n1 2\n```\n"}}
{"problemSetProblem": {"id": "994805277163896832", "label": "1047", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6\n3-10 99\n11-5 87\n102-1 0\n102-3 100\n11-9 89\n3-2 61\n", "output": "11 176\n"}, {"name": "", "input": "6\n3-10 99\n11-5 87\n102-1 0\n102-3 100\n11-9 89\n3-2 61\n", "output": "11 176\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "编程团体赛", "content": "编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。\n\n现给定所有队员的比赛成绩，请你编写程序找出冠军队。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$\\le 10^4$$），即所有参赛队员总数。随后 $$N$$ 行，每行给出一位队员的成绩，格式为：`队伍编号-队员编号 成绩`，其中`队伍编号`为 1 到 1000 的正整数，`队员编号`为 1 到 10 的正整数，`成绩`为 0 到 100 的整数。\n\n### 输出格式：\n\n在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。\n\n### 输入样例：\n```in\n6\n3-10 99\n11-5 87\n102-1 0\n102-3 100\n11-9 89\n3-2 61\n```\n\n### 输出样例：\n```out\n11 176\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10546", "description": "编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。\n\n现给定所有队员的比赛成绩，请你编写程序找出冠军队。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$\\le 10^4$$），即所有参赛队员总数。随后 $$N$$ 行，每行给出一位队员的成绩，格式为：`队伍编号-队员编号 成绩`，其中`队伍编号`为 1 到 1000 的正整数，`队员编号`为 1 到 10 的正整数，`成绩`为 0 到 100 的整数。\n\n### 输出格式：\n\n在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。\n\n### 输入样例：\n```in\n6\n3-10 99\n11-5 87\n102-1 0\n102-3 100\n11-9 89\n3-2 61\n```\n\n### 输出样例：\n```out\n11 176\n```\n"}}
{"problemSetProblem": {"id": "994805276438282240", "label": "1048", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "1234567 368782971\n", "output": "3695Q8118\n"}, {"name": "", "input": "1234567 368782971\n", "output": "3695Q8118\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "数字加密", "content": "本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。\n\n### 输入格式：\n\n输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中输出加密后的结果。\n\n### 输入样例：\n```in\n1234567 368782971\n```\n\n### 输出样例：\n```out\n3695Q8118\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10547", "description": "本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。\n\n### 输入格式：\n\n输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中输出加密后的结果。\n\n### 输入样例：\n```in\n1234567 368782971\n```\n\n### 输出样例：\n```out\n3695Q8118\n```\n"}}
{"problemSetProblem": {"id": "994805275792359424", "label": "1049", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "4\n0.1 0.2 0.3 0.4\n", "output": "5.00\n"}, {"name": "", "input": "4\n0.1 0.2 0.3 0.4\n", "output": "5.00\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "数列的片段和", "content": "给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。\n\n给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0。\n\n### 输入格式：\n\n输入第一行给出一个不超过 $$10^5$$ 的正整数 $$N$$，表示数列中数的个数，第二行给出 $$N $$ 个不超过 1.0 的正数，是数列中的数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中输出该序列所有片段包含的数之和，精确到小数点后 2 位。\n\n### 输入样例：\n```in\n4\n0.1 0.2 0.3 0.4\n```\n\n### 输出样例：\n```out\n5.00\n```\n\n**感谢 Ruihan Zheng 对测试数据的修正。**", "type": "PROGRAMMING", "author": "CAO, Peng", "authorOrganization": {"id": "4", "name": "Google", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10548", "description": "给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。\n\n给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0。\n\n### 输入格式：\n\n输入第一行给出一个不超过 $$10^5$$ 的正整数 $$N$$，表示数列中数的个数，第二行给出 $$N $$ 个不超过 1.0 的正数，是数列中的数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中输出该序列所有片段包含的数之和，精确到小数点后 2 位。\n\n### 输入样例：\n```in\n4\n0.1 0.2 0.3 0.4\n```\n\n### 输出样例：\n```out\n5.00\n```\n\n**感谢 Ruihan Zheng 对测试数据的修正。**"}}
{"problemSetProblem": {"id": "994805275146436608", "label": "1050", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "12\n37 76 20 98 76 42 53 95 60 81 58 93\n", "output": "98 95 93\n42 37 81\n53 20 76\n58 60 76\n"}, {"name": "", "input": "12\n37 76 20 98 76 42 53 95 60 81 58 93\n", "output": "98 95 93\n42 37 81\n53 20 76\n58 60 76\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "螺旋矩阵", "content": "本题要求将给定的 $$N$$ 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充。要求矩阵的规模为 $$m$$ 行 $$n$$ 列，满足条件：$$m\\times n$$ 等于 $$N$$；$$m\\ge n$$；且 $$m-n$$ 取所有可能值中的最小值。\n\n### 输入格式：\n\n输入在第 1 行中给出一个正整数 $$N$$，第 2 行给出 $$N$$ 个待填充的正整数。所有数字不超过 $$10^4$$，相邻数字以空格分隔。\n\n### 输出格式：\n\n输出螺旋矩阵。每行 $$n$$ 个数字，共 $$m$$ 行。相邻数字以 1 个空格分隔，行末不得有多余空格。\n\n### 输入样例：\n```in\n12\n37 76 20 98 76 42 53 95 60 81 58 93\n```\n\n### 输出样例：\n```out\n98 95 93\n42 37 81\n53 20 76\n58 60 76\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10549", "description": "本题要求将给定的 $$N$$ 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充。要求矩阵的规模为 $$m$$ 行 $$n$$ 列，满足条件：$$m\\times n$$ 等于 $$N$$；$$m\\ge n$$；且 $$m-n$$ 取所有可能值中的最小值。\n\n### 输入格式：\n\n输入在第 1 行中给出一个正整数 $$N$$，第 2 行给出 $$N$$ 个待填充的正整数。所有数字不超过 $$10^4$$，相邻数字以空格分隔。\n\n### 输出格式：\n\n输出螺旋矩阵。每行 $$n$$ 个数字，共 $$m$$ 行。相邻数字以 1 个空格分隔，行末不得有多余空格。\n\n### 输入样例：\n```in\n12\n37 76 20 98 76 42 53 95 60 81 58 93\n```\n\n### 输出样例：\n```out\n98 95 93\n42 37 81\n53 20 76\n58 60 76\n```\n"}}
{"problemSetProblem": {"id": "994805274496319488", "label": "1051", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "2.3 3.5 5.2 0.4\n", "output": "-8.68-8.23i\n"}, {"name": "", "input": "2.3 3.5 5.2 0.4\n", "output": "-8.68-8.23i\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "复数乘法", "content": "复数可以写成 $$(A + Bi)$$ 的常规形式，其中 $$A$$ 是实部，$$B$$ 是虚部，$$i$$ 是虚数单位，满足 $$i^2 = -1$$；也可以写成极坐标下的指数形式 $$(R\\times e^{(Pi)})$$，其中 $$R$$ 是复数模，$$P$$ 是辐角，$$i$$ 是虚数单位，其等价于三角形式 $$R(\\cos (P) + i \\sin (P))$$。\n\n现给定两个复数的 $$R$$ 和 $$P$$，要求输出两数乘积的常规形式。\n\n### 输入格式：\n\n输入在一行中依次给出两个复数的 $$R_1$$, $$P_1$$, $$R_2$$, $$P_2$$，数字间以空格分隔。\n\n### 输出格式：\n\n在一行中按照 `A+Bi` 的格式输出两数乘积的常规形式，实部和虚部均保留 2 位小数。注意：如果 `B` 是负数，则应该写成 `A-|B|i` 的形式。\n\n### 输入样例：\n```in\n2.3 3.5 5.2 0.4\n```\n\n### 输出样例：\n```out\n-8.68-8.23i\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10559", "description": "复数可以写成 $$(A + Bi)$$ 的常规形式，其中 $$A$$ 是实部，$$B$$ 是虚部，$$i$$ 是虚数单位，满足 $$i^2 = -1$$；也可以写成极坐标下的指数形式 $$(R\\times e^{(Pi)})$$，其中 $$R$$ 是复数模，$$P$$ 是辐角，$$i$$ 是虚数单位，其等价于三角形式 $$R(\\cos (P) + i \\sin (P))$$。\n\n现给定两个复数的 $$R$$ 和 $$P$$，要求输出两数乘积的常规形式。\n\n### 输入格式：\n\n输入在一行中依次给出两个复数的 $$R_1$$, $$P_1$$, $$R_2$$, $$P_2$$，数字间以空格分隔。\n\n### 输出格式：\n\n在一行中按照 `A+Bi` 的格式输出两数乘积的常规形式，实部和虚部均保留 2 位小数。注意：如果 `B` 是负数，则应该写成 `A-|B|i` 的形式。\n\n### 输入样例：\n```in\n2.3 3.5 5.2 0.4\n```\n\n### 输出样例：\n```out\n-8.68-8.23i\n```\n"}}
{"problemSetProblem": {"id": "994805273883951104", "label": "1052", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "[╮][╭][o][~\\][/~]  [<][>]\n [╯][╰][^][-][=][>][<][@][⊙]\n[Д][▽][_][ε][^]  ...\n4\n1 1 2 2 2\n6 8 1 5 5\n3 3 4 3 3\n2 10 3 9 3\n", "output": "╮(╯▽╰)╭\n<(@Д=)/~\no(^ε^)o\nAre you kidding me? @\\/@\n"}, {"name": "", "input": "[╮][╭][o][~\\][/~]  [<][>]\n [╯][╰][^][-][=][>][<][@][⊙]\n[Д][▽][_][ε][^]  ...\n4\n1 1 2 2 2\n6 8 1 5 5\n3 3 4 3 3\n2 10 3 9 3\n", "output": "╮(╯▽╰)╭\n<(@Д=)/~\no(^ε^)o\nAre you kidding me? @\\/@\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "卖个萌", "content": "萌萌哒表情符号通常由“手”、“眼”、“口”三个主要部分组成。简单起见，我们假设一个表情符号是按下列格式输出的：\n```\n[左手]([左眼][口][右眼])[右手]\n```\n现给出可选用的符号集合，请你按用户的要求输出表情。\n\n### 输入格式：\n\n输入首先在前三行顺序对应给出手、眼、口的可选符号集。每个符号括在一对方括号 `[]`内。题目保证每个集合都至少有一个符号，并不超过 10 个符号；每个符号包含 1 到 4 个非空字符。\n\n之后一行给出一个正整数 K，为用户请求的个数。随后 K 行，每行给出一个用户的符号选择，顺序为左手、左眼、口、右眼、右手——这里只给出符号在相应集合中的序号（从 1 开始），数字间以空格分隔。\n\n### 输出格式：\n\n对每个用户请求，在一行中输出生成的表情。若用户选择的序号不存在，则输出 `Are you kidding me? @\\/@`。\n\n### 输入样例：\n```in\n[╮][╭][o][~\\][/~]  [<][>]\n [╯][╰][^][-][=][>][<][@][⊙]\n[Д][▽][_][ε][^]  ...\n4\n1 1 2 2 2\n6 8 1 5 5\n3 3 4 3 3\n2 10 3 9 3\n```\n\n### 输出样例：\n```out\n╮(╯▽╰)╭\n<(@Д=)/~\no(^ε^)o\nAre you kidding me? @\\/@\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10560", "description": "萌萌哒表情符号通常由“手”、“眼”、“口”三个主要部分组成。简单起见，我们假设一个表情符号是按下列格式输出的：\n```\n[左手]([左眼][口][右眼])[右手]\n```\n现给出可选用的符号集合，请你按用户的要求输出表情。\n\n### 输入格式：\n\n输入首先在前三行顺序对应给出手、眼、口的可选符号集。每个符号括在一对方括号 `[]`内。题目保证每个集合都至少有一个符号，并不超过 10 个符号；每个符号包含 1 到 4 个非空字符。\n\n之后一行给出一个正整数 K，为用户请求的个数。随后 K 行，每行给出一个用户的符号选择，顺序为左手、左眼、口、右眼、右手——这里只给出符号在相应集合中的序号（从 1 开始），数字间以空格分隔。\n\n### 输出格式：\n\n对每个用户请求，在一行中输出生成的表情。若用户选择的序号不存在，则输出 `Are you kidding me? @\\/@`。\n\n### 输入样例：\n```in\n[╮][╭][o][~\\][/~]  [<][>]\n [╯][╰][^][-][=][>][<][@][⊙]\n[Д][▽][_][ε][^]  ...\n4\n1 1 2 2 2\n6 8 1 5 5\n3 3 4 3 3\n2 10 3 9 3\n```\n\n### 输出样例：\n```out\n╮(╯▽╰)╭\n<(@Д=)/~\no(^ε^)o\nAre you kidding me? @\\/@\n```\n"}}
{"problemSetProblem": {"id": "994805273284165632", "label": "1053", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5 0.5 10\n6 0.3 0.4 0.5 0.2 0.8 0.6\n10 0.0 0.1 0.2 0.3 0.0 0.8 0.6 0.7 0.0 0.5\n5 0.4 0.3 0.5 0.1 0.7\n11 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n11 2 2 2 1 1 0.1 1 0.1 0.1 0.1 0.1\n", "output": "40.0% 20.0%\n"}, {"name": "", "input": "5 0.5 10\n6 0.3 0.4 0.5 0.2 0.8 0.6\n10 0.0 0.1 0.2 0.3 0.0 0.8 0.6 0.7 0.0 0.5\n5 0.4 0.3 0.5 0.1 0.7\n11 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n11 2 2 2 1 1 0.1 1 0.1 0.1 0.1 0.1\n", "output": "40.0% 20.0%\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "住房空置率", "content": "在不打扰居民的前提下，统计住房空置率的一种方法是根据每户用电量的连续变化规律进行判断。判断方法如下：\n\n- 在观察期内，若存在超过一半的日子用电量低于某给定的阈值 $$e$$，则该住房为“可能空置”；\n\n- 若观察期超过某给定阈值 $$D$$ 天，且满足上一个条件，则该住房为“空置”。\n\n现给定某居民区的住户用电量数据，请你统计“可能空置”的比率和“空置”比率，即以上两种状态的住房占居民区住房总套数的百分比。\n\n### 输入格式：\n\n输入第一行给出正整数 $$N$$（$$\\le 1000$$），为居民区住房总套数；正实数 $$e$$，即低电量阈值；正整数 $$D$$，即观察期阈值。随后 $$N$$ 行，每行按以下格式给出一套住房的用电量数据：\n\n$$K$$ $$E_1$$ $$E_2$$ ... $$E_K$$\n\n其中 $$K$$ 为观察的天数，$$E_i$$ 为第 $$i$$ 天的用电量。\n\n### 输出格式：\n\n在一行中输出“可能空置”的比率和“空置”比率的百分比值，其间以一个空格分隔，保留小数点后 1 位。\n\n### 输入样例：\n```in\n5 0.5 10\n6 0.3 0.4 0.5 0.2 0.8 0.6\n10 0.0 0.1 0.2 0.3 0.0 0.8 0.6 0.7 0.0 0.5\n5 0.4 0.3 0.5 0.1 0.7\n11 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n11 2 2 2 1 1 0.1 1 0.1 0.1 0.1 0.1\n```\n\n### 输出样例：\n```out\n40.0% 20.0%\n```\n\n（样例解释：第2、3户为“可能空置”，第4户为“空置”，其他户不是空置。）\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10561", "description": "在不打扰居民的前提下，统计住房空置率的一种方法是根据每户用电量的连续变化规律进行判断。判断方法如下：\n\n- 在观察期内，若存在超过一半的日子用电量低于某给定的阈值 $$e$$，则该住房为“可能空置”；\n\n- 若观察期超过某给定阈值 $$D$$ 天，且满足上一个条件，则该住房为“空置”。\n\n现给定某居民区的住户用电量数据，请你统计“可能空置”的比率和“空置”比率，即以上两种状态的住房占居民区住房总套数的百分比。\n\n### 输入格式：\n\n输入第一行给出正整数 $$N$$（$$\\le 1000$$），为居民区住房总套数；正实数 $$e$$，即低电量阈值；正整数 $$D$$，即观察期阈值。随后 $$N$$ 行，每行按以下格式给出一套住房的用电量数据：\n\n$$K$$ $$E_1$$ $$E_2$$ ... $$E_K$$\n\n其中 $$K$$ 为观察的天数，$$E_i$$ 为第 $$i$$ 天的用电量。\n\n### 输出格式：\n\n在一行中输出“可能空置”的比率和“空置”比率的百分比值，其间以一个空格分隔，保留小数点后 1 位。\n\n### 输入样例：\n```in\n5 0.5 10\n6 0.3 0.4 0.5 0.2 0.8 0.6\n10 0.0 0.1 0.2 0.3 0.0 0.8 0.6 0.7 0.0 0.5\n5 0.4 0.3 0.5 0.1 0.7\n11 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n11 2 2 2 1 1 0.1 1 0.1 0.1 0.1 0.1\n```\n\n### 输出样例：\n```out\n40.0% 20.0%\n```\n\n（样例解释：第2、3户为“可能空置”，第4户为“空置”，其他户不是空置。）\n"}}
{"problemSetProblem": {"id": "994805272659214336", "label": "1054", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "7\n5 -3.2 aaa 9999 2.3.4 7.123 2.35\n", "output": "ERROR: aaa is not a legal number\nERROR: 9999 is not a legal number\nERROR: 2.3.4 is not a legal number\nERROR: 7.123 is not a legal number\nThe average of 3 numbers is 1.38\n"}, {"name": "", "input": "2\naaa -9999\n", "output": "ERROR: aaa is not a legal number\nERROR: -9999 is not a legal number\nThe average of 0 numbers is Undefined\n"}, {"name": "", "input": "7\n5 -3.2 aaa 9999 2.3.4 7.123 2.35\n", "output": "ERROR: aaa is not a legal number\nERROR: 9999 is not a legal number\nERROR: 2.3.4 is not a legal number\nERROR: 7.123 is not a legal number\nThe average of 3 numbers is 1.38\n"}, {"name": "", "input": "2\naaa -9999\n", "output": "ERROR: aaa is not a legal number\nERROR: -9999 is not a legal number\nThe average of 0 numbers is Undefined\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "求平均值", "content": "本题的基本要求非常简单：给定 $$N$$ 个实数，计算它们的平均值。但复杂的是有些输入数据可能是非法的。一个“合法”的输入是 [$$-1000, 1000$$] 区间内的实数，并且最多精确到小数点后 2 位。当你计算平均值的时候，不能把那些非法的数据算在内。\n\n### 输入格式：\n\n输入第一行给出正整数 $$N$$（$$\\le 100$$）。随后一行给出 $$N$$ 个实数，数字间以一个空格分隔。\n\n### 输出格式：\n\n对每个非法输入，在一行中输出 `ERROR: X is not a legal number`，其中 `X` 是输入。最后在一行中输出结果：`The average of K numbers is Y`，其中 `K` 是合法输入的个数，`Y` 是它们的平均值，精确到小数点后 2 位。如果平均值无法计算，则用 `Undefined` 替换 `Y`。如果 `K` 为 1，则输出 `The average of 1 number is Y`。\n\n### 输入样例 1：\n```in\n7\n5 -3.2 aaa 9999 2.3.4 7.123 2.35\n```\n\n### 输出样例 1：\n```out\nERROR: aaa is not a legal number\nERROR: 9999 is not a legal number\nERROR: 2.3.4 is not a legal number\nERROR: 7.123 is not a legal number\nThe average of 3 numbers is 1.38\n```\n\n### 输入样例 2：\n```in\n2\naaa -9999\n```\n\n### 输出样例 2：\n```out\nERROR: aaa is not a legal number\nERROR: -9999 is not a legal number\nThe average of 0 numbers is Undefined\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10562", "description": "本题的基本要求非常简单：给定 $$N$$ 个实数，计算它们的平均值。但复杂的是有些输入数据可能是非法的。一个“合法”的输入是 [$$-1000, 1000$$] 区间内的实数，并且最多精确到小数点后 2 位。当你计算平均值的时候，不能把那些非法的数据算在内。\n\n### 输入格式：\n\n输入第一行给出正整数 $$N$$（$$\\le 100$$）。随后一行给出 $$N$$ 个实数，数字间以一个空格分隔。\n\n### 输出格式：\n\n对每个非法输入，在一行中输出 `ERROR: X is not a legal number`，其中 `X` 是输入。最后在一行中输出结果：`The average of K numbers is Y`，其中 `K` 是合法输入的个数，`Y` 是它们的平均值，精确到小数点后 2 位。如果平均值无法计算，则用 `Undefined` 替换 `Y`。如果 `K` 为 1，则输出 `The average of 1 number is Y`。\n\n### 输入样例 1：\n```in\n7\n5 -3.2 aaa 9999 2.3.4 7.123 2.35\n```\n\n### 输出样例 1：\n```out\nERROR: aaa is not a legal number\nERROR: 9999 is not a legal number\nERROR: 2.3.4 is not a legal number\nERROR: 7.123 is not a legal number\nThe average of 3 numbers is 1.38\n```\n\n### 输入样例 2：\n```in\n2\naaa -9999\n```\n\n### 输出样例 2：\n```out\nERROR: aaa is not a legal number\nERROR: -9999 is not a legal number\nThe average of 0 numbers is Undefined\n```\n"}}
{"problemSetProblem": {"id": "994805272021680128", "label": "1055", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "10 3\nTom 188\nMike 170\nEva 168\nTim 160\nJoe 190\nAnn 168\nBob 175\nNick 186\nAmy 160\nJohn 159\n", "output": "Bob Tom Joe Nick\nAnn Mike Eva\nTim Amy John\n"}, {"name": "", "input": "10 3\nTom 188\nMike 170\nEva 168\nTim 160\nJoe 190\nAnn 168\nBob 175\nNick 186\nAmy 160\nJohn 159\n", "output": "Bob Tom Joe Nick\nAnn Mike Eva\nTim Amy John\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "集体照", "content": "拍集体照时队形很重要，这里对给定的 $$N$$ 个人 $$K$$ 排的队形设计排队规则如下：\n\n- 每排人数为 $$N/K$$（向下取整），多出来的人全部站在最后一排；\n\n- 后排所有人的个子都不比前排任何人矮；\n\n- 每排中最高者站中间（中间位置为 $$m/2+1$$，其中 $$m$$ 为该排人数，除法向下取整）；\n\n- 每排其他人以中间人为轴，按身高非增序，先右后左交替入队站在中间人的两侧（例如5人身高为190、188、186、175、170，则队形为175、188、190、186、170。这里假设你面对拍照者，所以你的左边是中间人的右边）；\n\n- 若多人身高相同，则按名字的字典序升序排列。这里保证无重名。\n\n现给定一组拍照人，请编写程序输出他们的队形。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例第 1 行给出两个正整数 $$N$$（$$\\le 10^4$$，总人数）和 $$K$$（$$\\le 10$$，总排数）。随后 $$N$$ 行，每行给出一个人的名字（不包含空格、长度不超过 8 个英文字母）和身高（[30, 300] 区间内的整数）。\n\n### 输出格式：\n\n输出拍照的队形。即K排人名，其间以空格分隔，行末不得有多余空格。注意：假设你面对拍照者，后排的人输出在上方，前排输出在下方。\n\n### 输入样例：\n```in\n10 3\nTom 188\nMike 170\nEva 168\nTim 160\nJoe 190\nAnn 168\nBob 175\nNick 186\nAmy 160\nJohn 159\n```\n\n### 输出样例：\n```out\nBob Tom Joe Nick\nAnn Mike Eva\nTim Amy John\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10563", "description": "拍集体照时队形很重要，这里对给定的 $$N$$ 个人 $$K$$ 排的队形设计排队规则如下：\n\n- 每排人数为 $$N/K$$（向下取整），多出来的人全部站在最后一排；\n\n- 后排所有人的个子都不比前排任何人矮；\n\n- 每排中最高者站中间（中间位置为 $$m/2+1$$，其中 $$m$$ 为该排人数，除法向下取整）；\n\n- 每排其他人以中间人为轴，按身高非增序，先右后左交替入队站在中间人的两侧（例如5人身高为190、188、186、175、170，则队形为175、188、190、186、170。这里假设你面对拍照者，所以你的左边是中间人的右边）；\n\n- 若多人身高相同，则按名字的字典序升序排列。这里保证无重名。\n\n现给定一组拍照人，请编写程序输出他们的队形。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例第 1 行给出两个正整数 $$N$$（$$\\le 10^4$$，总人数）和 $$K$$（$$\\le 10$$，总排数）。随后 $$N$$ 行，每行给出一个人的名字（不包含空格、长度不超过 8 个英文字母）和身高（[30, 300] 区间内的整数）。\n\n### 输出格式：\n\n输出拍照的队形。即K排人名，其间以空格分隔，行末不得有多余空格。注意：假设你面对拍照者，后排的人输出在上方，前排输出在下方。\n\n### 输入样例：\n```in\n10 3\nTom 188\nMike 170\nEva 168\nTim 160\nJoe 190\nAnn 168\nBob 175\nNick 186\nAmy 160\nJohn 159\n```\n\n### 输出样例：\n```out\nBob Tom Joe Nick\nAnn Mike Eva\nTim Amy John\n```\n"}}
{"problemSetProblem": {"id": "994805271455449088", "label": "1056", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3 2 8 5\n", "output": "330\n"}, {"name": "", "input": "3 2 8 5\n", "output": "330\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "组合数的和", "content": "给定 N 个非 0 的个位数字，用其中任意 2 个数字都可以组合成 1 个 2 位的数字。要求所有可能组合出来的 2 位数字的和。例如给定 2、5、8，则可以组合出：25、28、52、58、82、85，它们的和为330。\n\n### 输入格式：\n\n输入在一行中先给出 N（1 $$<$$ N $$<$$ 10），随后给出 N 个不同的非 0 个位数字。数字间以空格分隔。\n\n### 输出格式：\n\n输出所有可能组合出来的2位数字的和。\n\n### 输入样例：\n```in\n3 2 8 5\n```\n\n### 输出样例：\n```out\n330\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10638", "description": "给定 N 个非 0 的个位数字，用其中任意 2 个数字都可以组合成 1 个 2 位的数字。要求所有可能组合出来的 2 位数字的和。例如给定 2、5、8，则可以组合出：25、28、52、58、82、85，它们的和为330。\n\n### 输入格式：\n\n输入在一行中先给出 N（1 $$<$$ N $$<$$ 10），随后给出 N 个不同的非 0 个位数字。数字间以空格分隔。\n\n### 输出格式：\n\n输出所有可能组合出来的2位数字的和。\n\n### 输入样例：\n```in\n3 2 8 5\n```\n\n### 输出样例：\n```out\n330\n```\n"}}
{"problemSetProblem": {"id": "994805270914383872", "label": "1057", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "PAT (Basic)\n", "output": "3 4\n"}, {"name": "", "input": "PAT (Basic)\n", "output": "3 4\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "数零壹", "content": "给定一串长度不超过 $$10^5$$ 的字符串，本题要求你将其中所有英文字母的序号（字母 a-z 对应序号 1-26，不分大小写）相加，得到整数 N，然后再分析一下 N 的二进制表示中有多少 0、多少 1。例如给定字符串 `PAT (Basic)`，其字母序号之和为：16+1+20+2+1+19+9+3=71，而 71 的二进制是 1000111，即有 3 个 0、4 个 1。\n\n### 输入格式：\n\n输入在一行中给出长度不超过 $$10^5$$、以回车结束的字符串。\n\n### 输出格式：\n\n在一行中先后输出 0 的个数和 1 的个数，其间以空格分隔。注意：若字符串中不存在字母，则视为 N 不存在，也就没有 0 和 1。\n\n### 输入样例：\n```in\nPAT (Basic)\n```\n\n### 输出样例：\n```out\n3 4\n```\n\n**鸣谢浙江工业大学之江学院石洗凡老师补充题面说明。**", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10639", "description": "给定一串长度不超过 $$10^5$$ 的字符串，本题要求你将其中所有英文字母的序号（字母 a-z 对应序号 1-26，不分大小写）相加，得到整数 N，然后再分析一下 N 的二进制表示中有多少 0、多少 1。例如给定字符串 `PAT (Basic)`，其字母序号之和为：16+1+20+2+1+19+9+3=71，而 71 的二进制是 1000111，即有 3 个 0、4 个 1。\n\n### 输入格式：\n\n输入在一行中给出长度不超过 $$10^5$$、以回车结束的字符串。\n\n### 输出格式：\n\n在一行中先后输出 0 的个数和 1 的个数，其间以空格分隔。注意：若字符串中不存在字母，则视为 N 不存在，也就没有 0 和 1。\n\n### 输入样例：\n```in\nPAT (Basic)\n```\n\n### 输出样例：\n```out\n3 4\n```\n\n**鸣谢浙江工业大学之江学院石洗凡老师补充题面说明。**"}}
{"problemSetProblem": {"id": "994805270356541440", "label": "1058", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 300, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (2 b d) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (2 b c) (4 a b c d)\n", "output": "3\n6\n5\n2 2 3 4\n"}, {"name": "", "input": "3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (2 b d) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (2 b c) (4 a b c d)\n", "output": "3\n6\n5\n2 2 3 4\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "选择题", "content": "批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。\n\n### 输入格式：\n\n输入在第一行给出两个正整数 N（$$\\le$$ 1000）和 M（$$\\le$$ 100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 `(选中的选项个数 选项1 ……)`，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。\n\n### 输出格式：\n\n按照输入的顺序给出每个学生的得分，每个分数占一行。注意判题时只有选择全部正确才能得到该题的分数。最后一行输出错得最多的题目的错误次数和编号（题目按照输入的顺序从 1 开始编号）。如果有并列，则按编号递增顺序输出。数字间用空格分隔，行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 `Too simple`。\n\n### 输入样例：\n```in\n3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (2 b d) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (2 b c) (4 a b c d)\n```\n\n### 输出样例：\n```out\n3\n6\n5\n2 2 3 4\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10640", "description": "批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。\n\n### 输入格式：\n\n输入在第一行给出两个正整数 N（$$\\le$$ 1000）和 M（$$\\le$$ 100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 `(选中的选项个数 选项1 ……)`，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。\n\n### 输出格式：\n\n按照输入的顺序给出每个学生的得分，每个分数占一行。注意判题时只有选择全部正确才能得到该题的分数。最后一行输出错得最多的题目的错误次数和编号（题目按照输入的顺序从 1 开始编号）。如果有并列，则按编号递增顺序输出。数字间用空格分隔，行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 `Too simple`。\n\n### 输入样例：\n```in\n3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (2 b d) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (2 b c) (4 a b c d)\n```\n\n### 输出样例：\n```out\n3\n6\n5\n2 2 3 4\n```\n"}}
{"problemSetProblem": {"id": "994805269828059136", "label": "1059", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6\n1111\n6666\n8888\n1234\n5555\n0001\n6\n8888\n0001\n1111\n2222\n8888\n2222\n", "output": "8888: Minion\n0001: Chocolate\n1111: Mystery Award\n2222: Are you kidding?\n8888: Checked\n2222: Are you kidding?\n"}, {"name": "", "input": "6\n1111\n6666\n8888\n1234\n5555\n0001\n6\n8888\n0001\n1111\n2222\n8888\n2222\n", "output": "8888: Minion\n0001: Chocolate\n1111: Mystery Award\n2222: Are you kidding?\n8888: Checked\n2222: Are you kidding?\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "C语言竞赛", "content": "C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽：\n\n- 0、冠军将赢得一份“神秘大奖”（比如很巨大的一本学生研究论文集……）。\n- 1、排名为素数的学生将赢得最好的奖品 —— 小黄人玩偶！\n- 2、其他人将得到巧克力。\n\n给定比赛的最终排名以及一系列参赛者的 ID，你要给出这些参赛者应该获得的奖品。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$\\le 10^4$$），是参赛者人数。随后 $$N$$ 行给出最终排名，每行按排名顺序给出一位参赛者的 ID（4 位数字组成）。接下来给出一个正整数 $$K$$ 以及 $$K$$ 个需要查询的 ID。\n\n### 输出格式：\n\n对每个要查询的 ID，在一行中输出 `ID: 奖品`，其中奖品或者是 `Mystery Award`（神秘大奖）、或者是 `Minion`（小黄人）、或者是 `Chocolate`（巧克力）。如果所查 ID 根本不在排名里，打印 `Are you kidding?`（耍我呢？）。如果该 ID 已经查过了（即奖品已经领过了），打印 `ID: Checked`（不能多吃多占）。\n\n### 输入样例：\n```in\n6\n1111\n6666\n8888\n1234\n5555\n0001\n6\n8888\n0001\n1111\n2222\n8888\n2222\n```\n\n### 输出样例：\n```out\n8888: Minion\n0001: Chocolate\n1111: Mystery Award\n2222: Are you kidding?\n8888: Checked\n2222: Are you kidding?\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10641", "description": "C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽：\n\n- 0、冠军将赢得一份“神秘大奖”（比如很巨大的一本学生研究论文集……）。\n- 1、排名为素数的学生将赢得最好的奖品 —— 小黄人玩偶！\n- 2、其他人将得到巧克力。\n\n给定比赛的最终排名以及一系列参赛者的 ID，你要给出这些参赛者应该获得的奖品。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$\\le 10^4$$），是参赛者人数。随后 $$N$$ 行给出最终排名，每行按排名顺序给出一位参赛者的 ID（4 位数字组成）。接下来给出一个正整数 $$K$$ 以及 $$K$$ 个需要查询的 ID。\n\n### 输出格式：\n\n对每个要查询的 ID，在一行中输出 `ID: 奖品`，其中奖品或者是 `Mystery Award`（神秘大奖）、或者是 `Minion`（小黄人）、或者是 `Chocolate`（巧克力）。如果所查 ID 根本不在排名里，打印 `Are you kidding?`（耍我呢？）。如果该 ID 已经查过了（即奖品已经领过了），打印 `ID: Checked`（不能多吃多占）。\n\n### 输入样例：\n```in\n6\n1111\n6666\n8888\n1234\n5555\n0001\n6\n8888\n0001\n1111\n2222\n8888\n2222\n```\n\n### 输出样例：\n```out\n8888: Minion\n0001: Chocolate\n1111: Mystery Award\n2222: Are you kidding?\n8888: Checked\n2222: Are you kidding?\n```\n"}}
{"problemSetProblem": {"id": "994805269312159744", "label": "1060", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 250, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "10\n6 7 6 9 3 10 8 2 7 8\n", "output": "6\n"}, {"name": "", "input": "10\n6 7 6 9 3 10 8 2 7 8\n", "output": "6\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "爱丁顿数", "content": "英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” $$E$$ ，即满足有 $$E$$ 天骑车超过 $$E$$ 英里的最大整数 $$E$$。据说爱丁顿自己的 $$E$$ 等于87。\n\n现给定某人 $$N$$ 天的骑车距离，请你算出对应的爱丁顿数 $$E$$（$$\\le N$$）。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$ ($$\\le 10^5$$)，即连续骑车的天数；第二行给出 $$N$$ 个非负整数，代表每天的骑车距离。\n\n### 输出格式：\n\n在一行中给出 $$N$$ 天的爱丁顿数。\n\n### 输入样例：\n```in\n10\n6 7 6 9 3 10 8 2 7 8\n```\n\n### 输出样例：\n```out\n6\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10642", "description": "英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” $$E$$ ，即满足有 $$E$$ 天骑车超过 $$E$$ 英里的最大整数 $$E$$。据说爱丁顿自己的 $$E$$ 等于87。\n\n现给定某人 $$N$$ 天的骑车距离，请你算出对应的爱丁顿数 $$E$$（$$\\le N$$）。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$ ($$\\le 10^5$$)，即连续骑车的天数；第二行给出 $$N$$ 个非负整数，代表每天的骑车距离。\n\n### 输出格式：\n\n在一行中给出 $$N$$ 天的爱丁顿数。\n\n### 输入样例：\n```in\n10\n6 7 6 9 3 10 8 2 7 8\n```\n\n### 输出样例：\n```out\n6\n```\n"}}
{"problemSetProblem": {"id": "994805268817231872", "label": "1061", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3 6\n2 1 3 3 4 5\n0 0 1 0 1 1\n0 1 1 0 0 1\n1 0 1 0 1 0\n1 1 0 0 1 1\n", "output": "13\n11\n12\n"}, {"name": "", "input": "3 6\n2 1 3 3 4 5\n0 0 1 0 1 1\n0 1 1 0 0 1\n1 0 1 0 1 0\n1 1 0 0 1 1\n", "output": "13\n11\n12\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "判断题", "content": "判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。\n\n### 输入格式：\n\n输入在第一行给出两个不超过 100 的正整数 N 和 M，分别是学生人数和判断题数量。第二行给出 M 个不超过 5 的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0 代表“非”，1 代表“是”。随后 N 行，每行给出一个学生的解答。数字间均以空格分隔。\n\n### 输出格式：\n\n按照输入的顺序输出每个学生的得分，每个分数占一行。\n\n### 输入样例：\n```in\n3 6\n2 1 3 3 4 5\n0 0 1 0 1 1\n0 1 1 0 0 1\n1 0 1 0 1 0\n1 1 0 0 1 1\n```\n\n### 输出样例：\n```out\n13\n11\n12\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10649", "description": "判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。\n\n### 输入格式：\n\n输入在第一行给出两个不超过 100 的正整数 N 和 M，分别是学生人数和判断题数量。第二行给出 M 个不超过 5 的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0 代表“非”，1 代表“是”。随后 N 行，每行给出一个学生的解答。数字间均以空格分隔。\n\n### 输出格式：\n\n按照输入的顺序输出每个学生的得分，每个分数占一行。\n\n### 输入样例：\n```in\n3 6\n2 1 3 3 4 5\n0 0 1 0 1 1\n0 1 1 0 0 1\n1 0 1 0 1 0\n1 1 0 0 1 1\n```\n\n### 输出样例：\n```out\n13\n11\n12\n```\n"}}
{"problemSetProblem": {"id": "994805268334886912", "label": "1062", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "7/18 13/20 12\n", "output": "5/12 7/12\n"}, {"name": "", "input": "7/18 13/20 12\n", "output": "5/12 7/12\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "最简分数", "content": "一个分数一般写成两个整数相除的形式：$$N/M$$，其中 $$M$$ 不为0。最简分数是指分子和分母没有公约数的分数表示形式。\n\n现给定两个不相等的正分数 $$N_1/M_1$$ 和 $$N_2/M_2$$，要求你按从小到大的顺序列出它们之间分母为 $$K$$ 的最简分数。\n\n### 输入格式：\n\n输入在一行中按 $$N/M$$ 的格式给出两个正分数，随后是一个正整数分母 $$K$$，其间以空格分隔。题目保证给出的所有整数都不超过 1000。\n\n### 输出格式：\n\n在一行中按 $$N/M$$ 的格式列出两个给定分数之间分母为 $$K$$ 的所有最简分数，按从小到大的顺序，其间以 1 个空格分隔。行首尾不得有多余空格。题目保证至少有 1 个输出。\n\n### 输入样例：\n```in\n7/18 13/20 12\n```\n\n### 输出样例：\n```out\n5/12 7/12\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10650", "description": "一个分数一般写成两个整数相除的形式：$$N/M$$，其中 $$M$$ 不为0。最简分数是指分子和分母没有公约数的分数表示形式。\n\n现给定两个不相等的正分数 $$N_1/M_1$$ 和 $$N_2/M_2$$，要求你按从小到大的顺序列出它们之间分母为 $$K$$ 的最简分数。\n\n### 输入格式：\n\n输入在一行中按 $$N/M$$ 的格式给出两个正分数，随后是一个正整数分母 $$K$$，其间以空格分隔。题目保证给出的所有整数都不超过 1000。\n\n### 输出格式：\n\n在一行中按 $$N/M$$ 的格式列出两个给定分数之间分母为 $$K$$ 的所有最简分数，按从小到大的顺序，其间以 1 个空格分隔。行首尾不得有多余空格。题目保证至少有 1 个输出。\n\n### 输入样例：\n```in\n7/18 13/20 12\n```\n\n### 输出样例：\n```out\n5/12 7/12\n```\n"}}
{"problemSetProblem": {"id": "994805267860930560", "label": "1063", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5\n0 1\n2 0\n-1 0\n3 3\n0 -3\n", "output": "4.24\n"}, {"name": "", "input": "5\n0 1\n2 0\n-1 0\n3 3\n0 -3\n", "output": "4.24\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "计算谱半径", "content": "在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 $$n$$ 个复数空间的特征值 { $$a_1+b_1i, \\cdots , a_n+b_ni$$ }，它们的模为实部与虚部的平方和的开方，而“谱半径”就是最大模。\n\n现在给定一些复数空间的特征值，请你计算并输出这些特征值的谱半径。\n\n### 输入格式：\n\n输入第一行给出正整数 N（$$\\le$$ 10 000）是输入的特征值的个数。随后 N 行，每行给出 1 个特征值的实部和虚部，其间以空格分隔。注意：题目保证实部和虚部均为绝对值不超过 1000 的整数。\n\n### 输出格式：\n\n在一行中输出谱半径，四舍五入保留小数点后 2 位。\n\n### 输入样例：\n```in\n5\n0 1\n2 0\n-1 0\n3 3\n0 -3\n```\n\n### 输出样例：\n```out\n4.24\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10651", "description": "在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 $$n$$ 个复数空间的特征值 { $$a_1+b_1i, \\cdots , a_n+b_ni$$ }，它们的模为实部与虚部的平方和的开方，而“谱半径”就是最大模。\n\n现在给定一些复数空间的特征值，请你计算并输出这些特征值的谱半径。\n\n### 输入格式：\n\n输入第一行给出正整数 N（$$\\le$$ 10 000）是输入的特征值的个数。随后 N 行，每行给出 1 个特征值的实部和虚部，其间以空格分隔。注意：题目保证实部和虚部均为绝对值不超过 1000 的整数。\n\n### 输出格式：\n\n在一行中输出谱半径，四舍五入保留小数点后 2 位。\n\n### 输入样例：\n```in\n5\n0 1\n2 0\n-1 0\n3 3\n0 -3\n```\n\n### 输出样例：\n```out\n4.24\n```\n"}}
{"problemSetProblem": {"id": "994805267416334336", "label": "1064", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "8\n123 899 51 998 27 33 36 12\n", "output": "4\n3 6 9 26\n"}, {"name": "", "input": "8\n123 899 51 998 27 33 36 12\n", "output": "4\n3 6 9 26\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "朋友数", "content": "如果两个整数各位数字的和是一样的，则被称为是“朋友数”，而那个公共的和就是它们的“朋友证号”。例如 123 和 51 就是朋友数，因为 1+2+3 = 5+1 = 6，而 6 就是它们的朋友证号。给定一些整数，要求你统计一下它们中有多少个不同的朋友证号。\n\n### 输入格式：\n\n输入第一行给出正整数 N。随后一行给出 N 个正整数，数字间以空格分隔。题目保证所有数字小于 $$10^4$$。\n\n### 输出格式：\n\n首先第一行输出给定数字中不同的朋友证号的个数；随后一行按递增顺序输出这些朋友证号，数字间隔一个空格，且行末不得有多余空格。\n\n### 输入样例：\n```in\n8\n123 899 51 998 27 33 36 12\n```\n\n### 输出样例：\n```out\n4\n3 6 9 26\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10652", "description": "如果两个整数各位数字的和是一样的，则被称为是“朋友数”，而那个公共的和就是它们的“朋友证号”。例如 123 和 51 就是朋友数，因为 1+2+3 = 5+1 = 6，而 6 就是它们的朋友证号。给定一些整数，要求你统计一下它们中有多少个不同的朋友证号。\n\n### 输入格式：\n\n输入第一行给出正整数 N。随后一行给出 N 个正整数，数字间以空格分隔。题目保证所有数字小于 $$10^4$$。\n\n### 输出格式：\n\n首先第一行输出给定数字中不同的朋友证号的个数；随后一行按递增顺序输出这些朋友证号，数字间隔一个空格，且行末不得有多余空格。\n\n### 输入样例：\n```in\n8\n123 899 51 998 27 33 36 12\n```\n\n### 输出样例：\n```out\n4\n3 6 9 26\n```\n"}}
{"problemSetProblem": {"id": "994805266942377984", "label": "1065", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3\n11111 22222\n33333 44444\n55555 66666\n7\n55555 44444 10000 88888 22222 11111 23333\n", "output": "5\n10000 23333 44444 55555 88888\n"}, {"name": "", "input": "3\n11111 22222\n33333 44444\n55555 66666\n7\n55555 44444 10000 88888 22222 11111 23333\n", "output": "5\n10000 23333 44444 55555 88888\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "单身狗", "content": "“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le$$ 50 000），是已知夫妻/伴侣的对数；随后 N 行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（$$\\le$$ 10 000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。\n\n### 输出格式：\n\n首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。\n\n### 输入样例：\n```in\n3\n11111 22222\n33333 44444\n55555 66666\n7\n55555 44444 10000 88888 22222 11111 23333\n```\n\n### 输出样例：\n```out\n5\n10000 23333 44444 55555 88888\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10653", "description": "“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le$$ 50 000），是已知夫妻/伴侣的对数；随后 N 行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（$$\\le$$ 10 000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。\n\n### 输出格式：\n\n首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。\n\n### 输入样例：\n```in\n3\n11111 22222\n33333 44444\n55555 66666\n7\n55555 44444 10000 88888 22222 11111 23333\n```\n\n### 输出样例：\n```out\n5\n10000 23333 44444 55555 88888\n```\n"}}
{"problemSetProblem": {"id": "994805266514558976", "label": "1066", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3 5 100 150 0\n3 189 254 101 119\n150 233 151 99 100\n88 123 149 0 255\n", "output": "003 189 254 000 000\n000 233 151 099 000\n088 000 000 000 255\n"}, {"name": "", "input": "3 5 100 150 0\n3 189 254 101 119\n150 233 151 99 100\n88 123 149 0 255\n", "output": "003 189 254 000 000\n000 233 151 099 000\n088 000 000 000 255\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "图像过滤", "content": "图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像素颜色都用一种指定的颜色替换。\n\n### 输入格式：\n\n输入在第一行给出一幅图像的分辨率，即两个正整数 $$M$$ 和 $$N$$（$$0 < M, N \\le 500$$），另外是待过滤的灰度值区间端点 $$A$$ 和 $$B$$（$$0 \\le A < B \\le 255$$）、以及指定的替换灰度值。随后 $$M$$ 行，每行给出 $$N$$ 个像素点的灰度值，其间以空格分隔。所有灰度值都在 [0, 255] 区间内。\n\n### 输出格式：\n\n输出按要求过滤后的图像。即输出 $$M$$ 行，每行 $$N$$ 个像素灰度值，每个灰度值占 3 位（例如黑色要显示为 `000`），其间以一个空格分隔。行首尾不得有多余空格。\n\n### 输入样例：\n```in\n3 5 100 150 0\n3 189 254 101 119\n150 233 151 99 100\n88 123 149 0 255\n```\n\n### 输出样例：\n```out\n003 189 254 000 000\n000 233 151 099 000\n088 000 000 000 255\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10660", "description": "图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像素颜色都用一种指定的颜色替换。\n\n### 输入格式：\n\n输入在第一行给出一幅图像的分辨率，即两个正整数 $$M$$ 和 $$N$$（$$0 < M, N \\le 500$$），另外是待过滤的灰度值区间端点 $$A$$ 和 $$B$$（$$0 \\le A < B \\le 255$$）、以及指定的替换灰度值。随后 $$M$$ 行，每行给出 $$N$$ 个像素点的灰度值，其间以空格分隔。所有灰度值都在 [0, 255] 区间内。\n\n### 输出格式：\n\n输出按要求过滤后的图像。即输出 $$M$$ 行，每行 $$N$$ 个像素灰度值，每个灰度值占 3 位（例如黑色要显示为 `000`），其间以一个空格分隔。行首尾不得有多余空格。\n\n### 输入样例：\n```in\n3 5 100 150 0\n3 189 254 101 119\n150 233 151 99 100\n88 123 149 0 255\n```\n\n### 输出样例：\n```out\n003 189 254 000 000\n000 233 151 099 000\n088 000 000 000 255\n```\n"}}
{"problemSetProblem": {"id": "994805266007048192", "label": "1067", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "Correct%pw 3\ncorrect%pw\nCorrect@PW\nwhatisthepassword!\nCorrect%pw\n#\n", "output": "Wrong password: correct%pw\nWrong password: Correct@PW\nWrong password: whatisthepassword!\nAccount locked\n"}, {"name": "", "input": "cool@gplt 3\ncoolman@gplt\ncoollady@gplt\ncool@gplt\ntry again\n#\n", "output": "Wrong password: coolman@gplt\nWrong password: coollady@gplt\nWelcome in\n"}, {"name": "", "input": "Correct%pw 3\ncorrect%pw\nCorrect@PW\nwhatisthepassword!\nCorrect%pw\n#\n", "output": "Wrong password: correct%pw\nWrong password: Correct@PW\nWrong password: whatisthepassword!\nAccount locked\n"}, {"name": "", "input": "cool@gplt 3\ncoolman@gplt\ncoollady@gplt\ncool@gplt\ntry again\n#\n", "output": "Wrong password: coolman@gplt\nWrong password: coollady@gplt\nWelcome in\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "试密码", "content": "当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。\n\n### 输入格式：\n\n输入在第一行给出一个密码（长度不超过 20 的、不包含空格、Tab、回车的非空字符串）和一个正整数 N（$$\\le$$ 10），分别是正确的密码和系统允许尝试的次数。随后每行给出一个以回车结束的非空字符串，是用户尝试输入的密码。输入保证至少有一次尝试。当读到一行只有单个 # 字符时，输入结束，并且这一行不是用户的输入。\n\n### 输出格式：\n\n对用户的每个输入，如果是正确的密码且尝试次数不超过 N，则在一行中输出 `Welcome in`，并结束程序；如果是错误的，则在一行中按格式输出 `Wrong password: 用户输入的错误密码`；当错误尝试达到 N 次时，再输出一行 `Account locked`，并结束程序。\n\n### 输入样例 1：\n```in\nCorrect%pw 3\ncorrect%pw\nCorrect@PW\nwhatisthepassword!\nCorrect%pw\n#\n```\n\n### 输出样例 1：\n```out\nWrong password: correct%pw\nWrong password: Correct@PW\nWrong password: whatisthepassword!\nAccount locked\n```\n\n### 输入样例 2：\n```in\ncool@gplt 3\ncoolman@gplt\ncoollady@gplt\ncool@gplt\ntry again\n#\n```\n\n### 输出样例 2：\n```out\nWrong password: coolman@gplt\nWrong password: coollady@gplt\nWelcome in\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10661", "description": "当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。\n\n### 输入格式：\n\n输入在第一行给出一个密码（长度不超过 20 的、不包含空格、Tab、回车的非空字符串）和一个正整数 N（$$\\le$$ 10），分别是正确的密码和系统允许尝试的次数。随后每行给出一个以回车结束的非空字符串，是用户尝试输入的密码。输入保证至少有一次尝试。当读到一行只有单个 # 字符时，输入结束，并且这一行不是用户的输入。\n\n### 输出格式：\n\n对用户的每个输入，如果是正确的密码且尝试次数不超过 N，则在一行中输出 `Welcome in`，并结束程序；如果是错误的，则在一行中按格式输出 `Wrong password: 用户输入的错误密码`；当错误尝试达到 N 次时，再输出一行 `Account locked`，并结束程序。\n\n### 输入样例 1：\n```in\nCorrect%pw 3\ncorrect%pw\nCorrect@PW\nwhatisthepassword!\nCorrect%pw\n#\n```\n\n### 输出样例 1：\n```out\nWrong password: correct%pw\nWrong password: Correct@PW\nWrong password: whatisthepassword!\nAccount locked\n```\n\n### 输入样例 2：\n```in\ncool@gplt 3\ncoolman@gplt\ncoollady@gplt\ncool@gplt\ntry again\n#\n```\n\n### 输出样例 2：\n```out\nWrong password: coolman@gplt\nWrong password: coollady@gplt\nWelcome in\n```\n"}}
{"problemSetProblem": {"id": "994805265579229184", "label": "1068", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "8 6 200\n0 \t 0 \t  0 \t   0\t    0 \t     0 \t      0        0\n65280 \t 65280    65280    16711479 65280    65280    65280    65280\n16711479 65280    65280    65280    16711680 65280    65280    65280\n65280 \t 65280    65280    65280    65280    65280    165280   165280\n65280 \t 65280 \t  16777015 65280    65280    165280   65480    165280\n16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215\n", "output": "(5, 3): 16711680\n"}, {"name": "", "input": "4 5 2\n0 0 0 0\n0 0 3 0\n0 0 0 0\n0 5 0 0\n0 0 0 0\n", "output": "Not Unique\n"}, {"name": "", "input": "3 3 5\n1 2 3\n3 4 5\n5 6 7\n", "output": "Not Exist\n"}, {"name": "", "input": "8 6 200\n0 \t 0 \t  0 \t   0\t    0 \t     0 \t      0        0\n65280 \t 65280    65280    16711479 65280    65280    65280    65280\n16711479 65280    65280    65280    16711680 65280    65280    65280\n65280 \t 65280    65280    65280    65280    65280    165280   165280\n65280 \t 65280 \t  16777015 65280    65280    165280   65480    165280\n16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215\n", "output": "(5, 3): 16711680\n"}, {"name": "", "input": "4 5 2\n0 0 0 0\n0 0 3 0\n0 0 0 0\n0 5 0 0\n0 0 0 0\n", "output": "Not Unique\n"}, {"name": "", "input": "3 3 5\n1 2 3\n3 4 5\n5 6 7\n", "output": "Not Exist\n"}], "testdataDescriptionCode": "", "customizeLimits": [{"compiler": "JAVAC", "timeLimit": 600, "memoryLimit": 65536}, {"compiler": "PYTHON2", "timeLimit": 1400, "memoryLimit": 65536}, {"compiler": "PYTHON3", "timeLimit": 1400, "memoryLimit": 65536}], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "万绿丛中一点红", "content": "对于计算机而言，颜色不过是像素点对应的一个 24 位的数值。现给定一幅分辨率为 $$M\\times N$$ 的画，要求你找出万绿丛中的一点红，即有独一无二颜色的那个像素点，并且该点的颜色与其周围 8 个相邻像素的颜色差充分大。\n\n### 输入格式：\n\n输入第一行给出三个正整数，分别是 $$M$$ 和 $$N$$（$$\\le$$ 1000），即图像的分辨率；以及 TOL，是所求像素点与相邻点的颜色差阈值，色差超过 TOL 的点才被考虑。随后 $$N$$ 行，每行给出 $$M$$ 个像素的颜色值，范围在 $$[0, 2^{24})$$ 内。所有同行数字间用空格或 TAB 分开。\n\n### 输出格式：\n\n在一行中按照 `(x, y): color` 的格式输出所求像素点的位置以及颜色值，其中位置 `x` 和 `y` 分别是该像素在图像矩阵中的列、行编号（从 1 开始编号）。如果这样的点不唯一，则输出 `Not Unique`；如果这样的点不存在，则输出 `Not Exist`。\n\n### 输入样例 1：\n```in\n8 6 200\n0 \t 0 \t  0 \t   0\t    0 \t     0 \t      0        0\n65280 \t 65280    65280    16711479 65280    65280    65280    65280\n16711479 65280    65280    65280    16711680 65280    65280    65280\n65280 \t 65280    65280    65280    65280    65280    165280   165280\n65280 \t 65280 \t  16777015 65280    65280    165280   65480    165280\n16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215\n```\n\n### 输出样例 1：\n```out\n(5, 3): 16711680\n```\n\n### 输入样例 2：\n```in\n4 5 2\n0 0 0 0\n0 0 3 0\n0 0 0 0\n0 5 0 0\n0 0 0 0\n```\n\n### 输出样例 2：\n```out\nNot Unique\n```\n\n### 输入样例 3：\n```in\n3 3 5\n1 2 3\n3 4 5\n5 6 7\n```\n\n### 输出样例 3：\n```out\nNot Exist\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10662", "description": "对于计算机而言，颜色不过是像素点对应的一个 24 位的数值。现给定一幅分辨率为 $$M\\times N$$ 的画，要求你找出万绿丛中的一点红，即有独一无二颜色的那个像素点，并且该点的颜色与其周围 8 个相邻像素的颜色差充分大。\n\n### 输入格式：\n\n输入第一行给出三个正整数，分别是 $$M$$ 和 $$N$$（$$\\le$$ 1000），即图像的分辨率；以及 TOL，是所求像素点与相邻点的颜色差阈值，色差超过 TOL 的点才被考虑。随后 $$N$$ 行，每行给出 $$M$$ 个像素的颜色值，范围在 $$[0, 2^{24})$$ 内。所有同行数字间用空格或 TAB 分开。\n\n### 输出格式：\n\n在一行中按照 `(x, y): color` 的格式输出所求像素点的位置以及颜色值，其中位置 `x` 和 `y` 分别是该像素在图像矩阵中的列、行编号（从 1 开始编号）。如果这样的点不唯一，则输出 `Not Unique`；如果这样的点不存在，则输出 `Not Exist`。\n\n### 输入样例 1：\n```in\n8 6 200\n0 \t 0 \t  0 \t   0\t    0 \t     0 \t      0        0\n65280 \t 65280    65280    16711479 65280    65280    65280    65280\n16711479 65280    65280    65280    16711680 65280    65280    65280\n65280 \t 65280    65280    65280    65280    65280    165280   165280\n65280 \t 65280 \t  16777015 65280    65280    165280   65480    165280\n16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215\n```\n\n### 输出样例 1：\n```out\n(5, 3): 16711680\n```\n\n### 输入样例 2：\n```in\n4 5 2\n0 0 0 0\n0 0 3 0\n0 0 0 0\n0 5 0 0\n0 0 0 0\n```\n\n### 输出样例 2：\n```out\nNot Unique\n```\n\n### 输入样例 3：\n```in\n3 3 5\n1 2 3\n3 4 5\n5 6 7\n```\n\n### 输出样例 3：\n```out\nNot Exist\n```\n"}}
{"problemSetProblem": {"id": "994805265159798784", "label": "1069", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "9 3 2\nImgonnawin!\nPickMe\nPickMeMeMeee\nLookHere\nImgonnawin!\nTryAgainAgain\nTryAgainAgain\nImgonnawin!\nTryAgainAgain\n", "output": "PickMe\nImgonnawin!\nTryAgainAgain\n"}, {"name": "", "input": "2 3 5\nImgonnawin!\nPickMe\n", "output": "Keep going...\n"}, {"name": "", "input": "9 3 2\nImgonnawin!\nPickMe\nPickMeMeMeee\nLookHere\nImgonnawin!\nTryAgainAgain\nTryAgainAgain\nImgonnawin!\nTryAgainAgain\n", "output": "PickMe\nImgonnawin!\nTryAgainAgain\n"}, {"name": "", "input": "2 3 5\nImgonnawin!\nPickMe\n", "output": "Keep going...\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "微博转发抽奖", "content": "小明 PAT 考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔 N 个人就发出一个红包。请你编写程序帮助他确定中奖名单。\n\n### 输入格式：\n\n输入第一行给出三个正整数 M（$$\\le$$ 1000）、N 和 S，分别是转发的总量、小明决定的中奖间隔、以及第一位中奖者的序号（编号从 1 开始）。随后 M 行，顺序给出转发微博的网友的昵称（不超过 20 个字符、不包含空格回车的非空字符串）。\n\n注意：可能有人转发多次，但不能中奖多次。所以如果处于当前中奖位置的网友已经中过奖，则跳过他顺次取下一位。\n\n### 输出格式：\n\n按照输入的顺序输出中奖名单，每个昵称占一行。如果没有人中奖，则输出 `Keep going...`。\n\n### 输入样例 1：\n```in\n9 3 2\nImgonnawin!\nPickMe\nPickMeMeMeee\nLookHere\nImgonnawin!\nTryAgainAgain\nTryAgainAgain\nImgonnawin!\nTryAgainAgain\n```\n\n### 输出样例 1：\n```out\nPickMe\nImgonnawin!\nTryAgainAgain\n```\n\n### 输入样例 2：\n```in\n2 3 5\nImgonnawin!\nPickMe\n```\n\n### 输出样例 2：\n```out\nKeep going...\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10663", "description": "小明 PAT 考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔 N 个人就发出一个红包。请你编写程序帮助他确定中奖名单。\n\n### 输入格式：\n\n输入第一行给出三个正整数 M（$$\\le$$ 1000）、N 和 S，分别是转发的总量、小明决定的中奖间隔、以及第一位中奖者的序号（编号从 1 开始）。随后 M 行，顺序给出转发微博的网友的昵称（不超过 20 个字符、不包含空格回车的非空字符串）。\n\n注意：可能有人转发多次，但不能中奖多次。所以如果处于当前中奖位置的网友已经中过奖，则跳过他顺次取下一位。\n\n### 输出格式：\n\n按照输入的顺序输出中奖名单，每个昵称占一行。如果没有人中奖，则输出 `Keep going...`。\n\n### 输入样例 1：\n```in\n9 3 2\nImgonnawin!\nPickMe\nPickMeMeMeee\nLookHere\nImgonnawin!\nTryAgainAgain\nTryAgainAgain\nImgonnawin!\nTryAgainAgain\n```\n\n### 输出样例 1：\n```out\nPickMe\nImgonnawin!\nTryAgainAgain\n```\n\n### 输入样例 2：\n```in\n2 3 5\nImgonnawin!\nPickMe\n```\n\n### 输出样例 2：\n```out\nKeep going...\n```\n"}}
{"problemSetProblem": {"id": "994805264706813952", "label": "1070", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "8\n10 15 12 3 4 13 1 15\n", "output": "14\n"}, {"name": "", "input": "8\n10 15 12 3 4 13 1 15\n", "output": "14\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "结绳", "content": "给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一段绳子，可以再次对折去跟另一段绳子串连。每次串连后，原来两段绳子的长度就会减半。\n\n![rope.jpg](~/46293e57-aa0e-414b-b5c3-7c4b2d5201e2.jpg)\n\n给定 $$N$$ 段绳子的长度，你需要找出它们能串成的绳子的最大长度。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例第 1 行给出正整数 $$N$$ ($$2 \\le N \\le 10^4$$)；第 2 行给出 $$N$$ 个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过$$10^4$$。\n\n### 输出格式：\n\n在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。\n\n### 输入样例：\n```in\n8\n10 15 12 3 4 13 1 15\n```\n\n### 输出样例：\n```out\n14\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10664", "description": "给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一段绳子，可以再次对折去跟另一段绳子串连。每次串连后，原来两段绳子的长度就会减半。\n\n![rope.jpg](~/46293e57-aa0e-414b-b5c3-7c4b2d5201e2.jpg)\n\n给定 $$N$$ 段绳子的长度，你需要找出它们能串成的绳子的最大长度。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例第 1 行给出正整数 $$N$$ ($$2 \\le N \\le 10^4$$)；第 2 行给出 $$N$$ 个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过$$10^4$$。\n\n### 输出格式：\n\n在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。\n\n### 输入样例：\n```in\n8\n10 15 12 3 4 13 1 15\n```\n\n### 输出样例：\n```out\n14\n```\n"}}
{"problemSetProblem": {"id": "994805264312549376", "label": "1071", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "100 4\n8 0 100 2\n3 1 50 1\n5 1 200 6\n7 0 200 8\n", "output": "Win 100!  Total = 200.\nLose 50.  Total = 150.\nNot enough tokens.  Total = 150.\nNot enough tokens.  Total = 150.\n"}, {"name": "", "input": "100 4\n8 0 100 2\n3 1 200 1\n5 1 200 6\n7 0 200 8\n", "output": "Win 100!  Total = 200.\nLose 200.  Total = 0.\nGame Over.\n"}, {"name": "", "input": "100 4\n8 0 100 2\n3 1 50 1\n5 1 200 6\n7 0 200 8\n", "output": "Win 100!  Total = 200.\nLose 50.  Total = 150.\nNot enough tokens.  Total = 150.\nNot enough tokens.  Total = 150.\n"}, {"name": "", "input": "100 4\n8 0 100 2\n3 1 200 1\n5 1 200 6\n7 0 200 8\n", "output": "Win 100!  Total = 200.\nLose 200.  Total = 0.\nGame Over.\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "小赌怡情", "content": "常言道“小赌怡情”。这是一个很简单的小游戏：首先由计算机给出第一个整数；然后玩家下注赌第二个整数将会比第一个数大还是小；玩家下注 t 个筹码后，计算机给出第二个数。若玩家猜对了，则系统奖励玩家 t 个筹码；否则扣除玩家 t 个筹码。\n\n注意：玩家下注的筹码数不能超过自己帐户上拥有的筹码数。当玩家输光了全部筹码后，游戏就结束。\n\n### 输入格式：\n\n输入在第一行给出 2 个正整数 T 和 K（$$\\le$$ 100），分别是系统在初始状态下赠送给玩家的筹码数、以及需要处理的游戏次数。随后 K 行，每行对应一次游戏，顺序给出 4 个数字：\n```\nn1 b t n2\n```\n其中 `n1` 和 `n2` 是计算机先后给出的两个[0, 9]内的整数，保证两个数字不相等。`b` 为 0 表示玩家赌`小`，为 1 表示玩家赌`大`。`t` 表示玩家下注的筹码数，保证在整型范围内。\n\n### 输出格式：\n\n对每一次游戏，根据下列情况对应输出（其中 `t` 是玩家下注量，`x` 是玩家当前持有的筹码量）：\n\n- 玩家赢，输出 `Win t!  Total = x.`；\n- 玩家输，输出 `Lose t.  Total = x.`；\n- 玩家下注超过持有的筹码量，输出 `Not enough tokens.  Total = x.`；\n- 玩家输光后，输出 `Game Over.` 并结束程序。\n\n### 输入样例 1：\n```in\n100 4\n8 0 100 2\n3 1 50 1\n5 1 200 6\n7 0 200 8\n```\n\n### 输出样例 1：\n```out\nWin 100!  Total = 200.\nLose 50.  Total = 150.\nNot enough tokens.  Total = 150.\nNot enough tokens.  Total = 150.\n```\n\n### 输入样例 2：\n```in\n100 4\n8 0 100 2\n3 1 200 1\n5 1 200 6\n7 0 200 8\n```\n\n### 输出样例 2：\n```out\nWin 100!  Total = 200.\nLose 200.  Total = 0.\nGame Over.\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10716", "description": "常言道“小赌怡情”。这是一个很简单的小游戏：首先由计算机给出第一个整数；然后玩家下注赌第二个整数将会比第一个数大还是小；玩家下注 t 个筹码后，计算机给出第二个数。若玩家猜对了，则系统奖励玩家 t 个筹码；否则扣除玩家 t 个筹码。\n\n注意：玩家下注的筹码数不能超过自己帐户上拥有的筹码数。当玩家输光了全部筹码后，游戏就结束。\n\n### 输入格式：\n\n输入在第一行给出 2 个正整数 T 和 K（$$\\le$$ 100），分别是系统在初始状态下赠送给玩家的筹码数、以及需要处理的游戏次数。随后 K 行，每行对应一次游戏，顺序给出 4 个数字：\n```\nn1 b t n2\n```\n其中 `n1` 和 `n2` 是计算机先后给出的两个[0, 9]内的整数，保证两个数字不相等。`b` 为 0 表示玩家赌`小`，为 1 表示玩家赌`大`。`t` 表示玩家下注的筹码数，保证在整型范围内。\n\n### 输出格式：\n\n对每一次游戏，根据下列情况对应输出（其中 `t` 是玩家下注量，`x` 是玩家当前持有的筹码量）：\n\n- 玩家赢，输出 `Win t!  Total = x.`；\n- 玩家输，输出 `Lose t.  Total = x.`；\n- 玩家下注超过持有的筹码量，输出 `Not enough tokens.  Total = x.`；\n- 玩家输光后，输出 `Game Over.` 并结束程序。\n\n### 输入样例 1：\n```in\n100 4\n8 0 100 2\n3 1 50 1\n5 1 200 6\n7 0 200 8\n```\n\n### 输出样例 1：\n```out\nWin 100!  Total = 200.\nLose 50.  Total = 150.\nNot enough tokens.  Total = 150.\nNot enough tokens.  Total = 150.\n```\n\n### 输入样例 2：\n```in\n100 4\n8 0 100 2\n3 1 200 1\n5 1 200 6\n7 0 200 8\n```\n\n### 输出样例 2：\n```out\nWin 100!  Total = 200.\nLose 200.  Total = 0.\nGame Over.\n```\n"}}
{"problemSetProblem": {"id": "994805263964422144", "label": "1072", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "4 2\n2333 6666\nCYLL 3 1234 2345 3456\nU 4 9966 6666 8888 6666\nGG 2 2333 7777\nJJ 3 0012 6666 2333\n", "output": "U: 6666 6666\nGG: 2333\nJJ: 6666 2333\n3 5\n"}, {"name": "", "input": "4 2\n2333 6666\nCYLL 3 1234 2345 3456\nU 4 9966 6666 8888 6666\nGG 2 2333 7777\nJJ 3 0012 6666 2333\n", "output": "U: 6666 6666\nGG: 2333\nJJ: 6666 2333\n3 5\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "开学寄语", "content": "下图是上海某校的新学期开学寄语：天将降大任于斯人也，必先删其微博，卸其 QQ，封其电脑，夺其手机，收其 ipad，断其 wifi，使其百无聊赖，然后，净面、理发、整衣，然后思过、读书、锻炼、明智、开悟、精进。而后必成大器也！\n\n\n![jiyu.JPG](~/3b1d9f4a-778b-4942-a9e2-836262f363aa.JPG)\n\n\n本题要求你写个程序帮助这所学校的老师检查所有学生的物品，以助其成大器。\n\n### 输入格式：\n\n输入第一行给出两个正整数 N（$$\\le$$ 1000）和 M（$$\\le$$ 6），分别是学生人数和需要被查缴的物品种类数。第二行给出 M 个需要被查缴的物品编号，其中编号为 4 位数字。随后 N 行，每行给出一位学生的姓名缩写（由 1-4 个大写英文字母组成）、个人物品数量 K（0 $$\\le$$ K $$\\le$$ 10）、以及 K 个物品的编号。\n\n### 输出格式：\n\n顺次检查每个学生携带的物品，如果有需要被查缴的物品存在，则按以下格式输出该生的信息和其需要被查缴的物品的信息（注意行末不得有多余空格）：\n```\n姓名缩写: 物品编号1 物品编号2 ……\n```\n最后一行输出存在问题的学生的总人数和被查缴物品的总数。\n\n### 输入样例：\n```in\n4 2\n2333 6666\nCYLL 3 1234 2345 3456\nU 4 9966 6666 8888 6666\nGG 2 2333 7777\nJJ 3 0012 6666 2333\n```\n\n### 输出样例：\n```out\nU: 6666 6666\nGG: 2333\nJJ: 6666 2333\n3 5\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10706", "description": "下图是上海某校的新学期开学寄语：天将降大任于斯人也，必先删其微博，卸其 QQ，封其电脑，夺其手机，收其 ipad，断其 wifi，使其百无聊赖，然后，净面、理发、整衣，然后思过、读书、锻炼、明智、开悟、精进。而后必成大器也！\n\n\n![jiyu.JPG](~/3b1d9f4a-778b-4942-a9e2-836262f363aa.JPG)\n\n\n本题要求你写个程序帮助这所学校的老师检查所有学生的物品，以助其成大器。\n\n### 输入格式：\n\n输入第一行给出两个正整数 N（$$\\le$$ 1000）和 M（$$\\le$$ 6），分别是学生人数和需要被查缴的物品种类数。第二行给出 M 个需要被查缴的物品编号，其中编号为 4 位数字。随后 N 行，每行给出一位学生的姓名缩写（由 1-4 个大写英文字母组成）、个人物品数量 K（0 $$\\le$$ K $$\\le$$ 10）、以及 K 个物品的编号。\n\n### 输出格式：\n\n顺次检查每个学生携带的物品，如果有需要被查缴的物品存在，则按以下格式输出该生的信息和其需要被查缴的物品的信息（注意行末不得有多余空格）：\n```\n姓名缩写: 物品编号1 物品编号2 ……\n```\n最后一行输出存在问题的学生的总人数和被查缴物品的总数。\n\n### 输入样例：\n```in\n4 2\n2333 6666\nCYLL 3 1234 2345 3456\nU 4 9966 6666 8888 6666\nGG 2 2333 7777\nJJ 3 0012 6666 2333\n```\n\n### 输出样例：\n```out\nU: 6666 6666\nGG: 2333\nJJ: 6666 2333\n3 5\n```\n"}}
{"problemSetProblem": {"id": "994805263624683520", "label": "1073", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (3 b d e) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (1 c) (4 a b c d)\n", "output": "3.5\n6.0\n2.5\n2 2-e\n2 3-a\n2 3-b\n"}, {"name": "", "input": "2 2 \n3 4 2 a c\n2 5 1 b\n(2 a c) (1 b)\n(2 a c) (1 b)\n", "output": "5.0\n5.0\nToo simple\n"}, {"name": "", "input": "3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (3 b d e) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (1 c) (4 a b c d)\n", "output": "3.5\n6.0\n2.5\n2 2-e\n2 3-a\n2 3-b\n"}, {"name": "", "input": "2 2 \n3 4 2 a c\n2 5 1 b\n(2 a c) (1 b)\n(2 a c) (1 b)\n", "output": "5.0\n5.0\nToo simple\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "多选题常见计分法", "content": "批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到 50% 分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。\n\n### 输入格式：\n\n输入在第一行给出两个正整数 N（$$\\le$$1000）和 M（$$\\le$$100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 `(选中的选项个数 选项1 ……)`，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。\n\n### 输出格式：\n\n按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后 1 位。最后输出错得最多的题目选项的信息，格式为：`错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号`。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 `Too simple`。\n\n### 输入样例 1：\n```in\n3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (3 b d e) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (1 c) (4 a b c d)\n```\n\n### 输出样例 1：\n```out\n3.5\n6.0\n2.5\n2 2-e\n2 3-a\n2 3-b\n```\n\n### 输入样例 2：\n```in\n2 2 \n3 4 2 a c\n2 5 1 b\n(2 a c) (1 b)\n(2 a c) (1 b)\n```\n\n### 输出样例 2：\n```out\n5.0\n5.0\nToo simple\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10707", "description": "批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到 50% 分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。\n\n### 输入格式：\n\n输入在第一行给出两个正整数 N（$$\\le$$1000）和 M（$$\\le$$100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 `(选中的选项个数 选项1 ……)`，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。\n\n### 输出格式：\n\n按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后 1 位。最后输出错得最多的题目选项的信息，格式为：`错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号`。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 `Too simple`。\n\n### 输入样例 1：\n```in\n3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (3 b d e) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (1 c) (4 a b c d)\n```\n\n### 输出样例 1：\n```out\n3.5\n6.0\n2.5\n2 2-e\n2 3-a\n2 3-b\n```\n\n### 输入样例 2：\n```in\n2 2 \n3 4 2 a c\n2 5 1 b\n(2 a c) (1 b)\n(2 a c) (1 b)\n```\n\n### 输出样例 2：\n```out\n5.0\n5.0\nToo simple\n```\n"}}
{"problemSetProblem": {"id": "994805263297527808", "label": "1074", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "30527\n06203\n415\n", "output": "7201\n"}, {"name": "", "input": "30527\n06203\n415\n", "output": "7201\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "宇宙无敌加法器", "content": "地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在 PAT 星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。每个 PAT 星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是 7 进制数、第 2 位是 2 进制数、第 3 位是 5 进制数、第 4 位是 10 进制数，等等。每一位的进制 d 或者是 0（表示十进制）、或者是 [2，9] 区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT 星人通常只需要记住前 20 位就够用了，以后各位默认为 10 进制。\n\n在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203 + 415”呢？我们得首先计算最低位：3 + 5 = 8；因为最低位是 7 进制的，所以我们得到 1 和 1 个进位。第 2 位是：0 + 1 + 1（进位）= 2；因为此位是 2 进制的，所以我们得到 0 和 1 个进位。第 3 位是：2 + 4 + 1（进位）= 7；因为此位是 5 进制的，所以我们得到 2 和 1 个进位。第 4 位是：6 + 1（进位）= 7；因为此位是 10 进制的，所以我们就得到 7。最后我们得到：6203 + 415 = 7201。\n\n### 输入格式：\n\n输入首先在第一行给出一个 N 位的进制表（0 $$<$$ N $$\\le$$ 20），以回车结束。 随后两行，每行给出一个不超过 N 位的非负的 PAT 数。\n\n### 输出格式：\n\n在一行中输出两个 PAT 数之和。\n\n### 输入样例：\n```in\n30527\n06203\n415\n```\n\n### 输出样例：\n```out\n7201\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10708", "description": "地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在 PAT 星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。每个 PAT 星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是 7 进制数、第 2 位是 2 进制数、第 3 位是 5 进制数、第 4 位是 10 进制数，等等。每一位的进制 d 或者是 0（表示十进制）、或者是 [2，9] 区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT 星人通常只需要记住前 20 位就够用了，以后各位默认为 10 进制。\n\n在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203 + 415”呢？我们得首先计算最低位：3 + 5 = 8；因为最低位是 7 进制的，所以我们得到 1 和 1 个进位。第 2 位是：0 + 1 + 1（进位）= 2；因为此位是 2 进制的，所以我们得到 0 和 1 个进位。第 3 位是：2 + 4 + 1（进位）= 7；因为此位是 5 进制的，所以我们得到 2 和 1 个进位。第 4 位是：6 + 1（进位）= 7；因为此位是 10 进制的，所以我们就得到 7。最后我们得到：6203 + 415 = 7201。\n\n### 输入格式：\n\n输入首先在第一行给出一个 N 位的进制表（0 $$<$$ N $$\\le$$ 20），以回车结束。 随后两行，每行给出一个不超过 N 位的非负的 PAT 数。\n\n### 输出格式：\n\n在一行中输出两个 PAT 数之和。\n\n### 输入样例：\n```in\n30527\n06203\n415\n```\n\n### 输出样例：\n```out\n7201\n```\n"}}
{"problemSetProblem": {"id": "994805262953594880", "label": "1075", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "00100 9 10\n23333 10 27777\n00000 0 99999\n00100 18 12309\n68237 -6 23333\n33218 -4 00000\n48652 -2 -1\n99999 5 68237\n27777 11 48652\n12309 7 33218\n", "output": "33218 -4 68237\n68237 -6 48652\n48652 -2 12309\n12309 7 00000\n00000 0 99999\n99999 5 23333\n23333 10 00100\n00100 18 27777\n27777 11 -1\n"}, {"name": "", "input": "00100 9 10\n23333 10 27777\n00000 0 99999\n00100 18 12309\n68237 -6 23333\n33218 -4 00000\n48652 -2 -1\n99999 5 68237\n27777 11 48652\n12309 7 33218\n", "output": "33218 -4 68237\n68237 -6 48652\n48652 -2 12309\n12309 7 00000\n00000 0 99999\n99999 5 23333\n23333 10 00100\n00100 18 27777\n27777 11 -1\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "链表元素分类", "content": "给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而 [0, K] 区间内的元素都排在大于 K 的元素前面。但每一类内部元素的顺序是不能改变的。例如：给定链表为 18→7→-4→0→5→-6→10→11→-2，K 为 10，则输出应该为 -4→-6→-2→7→0→5→10→18→11。\n\n### 输入格式：\n\n每个输入包含一个测试用例。每个测试用例第 1 行给出：第 1 个结点的地址；结点总个数，即正整数N ($$\\le 10^5$$)；以及正整数K ($$\\le 10^3$$)。结点的地址是 5 位非负整数，NULL 地址用 $$-1$$ 表示。\n\n接下来有 N 行，每行格式为：\n```\nAddress Data Next\n```\n其中 `Address` 是结点地址；`Data` 是该结点保存的数据，为 $$[-10^5, 10^5]$$ 区间内的整数；`Next` 是下一结点的地址。题目保证给出的链表不为空。\n\n### 输出格式：\n\n对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。\n\n### 输入样例：\n```in\n00100 9 10\n23333 10 27777\n00000 0 99999\n00100 18 12309\n68237 -6 23333\n33218 -4 00000\n48652 -2 -1\n99999 5 68237\n27777 11 48652\n12309 7 33218\n```\n\n### 输出样例：\n```out\n33218 -4 68237\n68237 -6 48652\n48652 -2 12309\n12309 7 00000\n00000 0 99999\n99999 5 23333\n23333 10 00100\n00100 18 27777\n27777 11 -1\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10709", "description": "给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而 [0, K] 区间内的元素都排在大于 K 的元素前面。但每一类内部元素的顺序是不能改变的。例如：给定链表为 18→7→-4→0→5→-6→10→11→-2，K 为 10，则输出应该为 -4→-6→-2→7→0→5→10→18→11。\n\n### 输入格式：\n\n每个输入包含一个测试用例。每个测试用例第 1 行给出：第 1 个结点的地址；结点总个数，即正整数N ($$\\le 10^5$$)；以及正整数K ($$\\le 10^3$$)。结点的地址是 5 位非负整数，NULL 地址用 $$-1$$ 表示。\n\n接下来有 N 行，每行格式为：\n```\nAddress Data Next\n```\n其中 `Address` 是结点地址；`Data` 是该结点保存的数据，为 $$[-10^5, 10^5]$$ 区间内的整数；`Next` 是下一结点的地址。题目保证给出的链表不为空。\n\n### 输出格式：\n\n对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。\n\n### 输入样例：\n```in\n00100 9 10\n23333 10 27777\n00000 0 99999\n00100 18 12309\n68237 -6 23333\n33218 -4 00000\n48652 -2 -1\n99999 5 68237\n27777 11 48652\n12309 7 33218\n```\n\n### 输出样例：\n```out\n33218 -4 68237\n68237 -6 48652\n48652 -2 12309\n12309 7 00000\n00000 0 99999\n99999 5 23333\n23333 10 00100\n00100 18 27777\n27777 11 -1\n```\n"}}
{"problemSetProblem": {"id": "994805262622244864", "label": "1076", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "8\nA-T B-F C-F D-F\nC-T B-F A-F D-F\nA-F D-F C-F B-T\nB-T A-F C-F D-F\nB-F D-T A-F C-F\nA-T C-F B-F D-F\nD-T B-F C-F A-F\nC-T A-F B-F D-F\n", "output": "13224143\n"}, {"name": "", "input": "8\nA-T B-F C-F D-F\nC-T B-F A-F D-F\nA-F D-F C-F B-T\nB-T A-F C-F D-F\nB-F D-T A-F C-F\nA-T C-F B-F D-F\nD-T B-F C-F A-F\nC-T A-F B-F D-F\n", "output": "13224143\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "Wifi密码", "content": "下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用 wifi，又怕耽误亲们的学习，现将 wifi 密码设置为下列数学题答案：A-1；B-2；C-3；D-4；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序把一系列题目的答案按照卷子上给出的对应关系翻译成 wifi 的密码。这里简单假设每道选择题都有 4 个选项，有且只有 1 个正确答案。\n\n\n![wifi.jpg](~/7e56be3f-caba-45f1-b9cb-38a96d44de76.jpg)\n\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le$$ 100），随后 N 行，每行按照 `编号-答案` 的格式给出一道题的 4 个选项，`T` 表示正确选项，`F` 表示错误选项。选项间用空格分隔。\n\n### 输出格式：\n\n在一行中输出 wifi 密码。\n\n### 输入样例：\n```in\n8\nA-T B-F C-F D-F\nC-T B-F A-F D-F\nA-F D-F C-F B-T\nB-T A-F C-F D-F\nB-F D-T A-F C-F\nA-T C-F B-F D-F\nD-T B-F C-F A-F\nC-T A-F B-F D-F\n```\n\n### 输出样例：\n```out\n13224143\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10718", "description": "下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用 wifi，又怕耽误亲们的学习，现将 wifi 密码设置为下列数学题答案：A-1；B-2；C-3；D-4；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序把一系列题目的答案按照卷子上给出的对应关系翻译成 wifi 的密码。这里简单假设每道选择题都有 4 个选项，有且只有 1 个正确答案。\n\n\n![wifi.jpg](~/7e56be3f-caba-45f1-b9cb-38a96d44de76.jpg)\n\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le$$ 100），随后 N 行，每行按照 `编号-答案` 的格式给出一道题的 4 个选项，`T` 表示正确选项，`F` 表示错误选项。选项间用空格分隔。\n\n### 输出格式：\n\n在一行中输出 wifi 密码。\n\n### 输入样例：\n```in\n8\nA-T B-F C-F D-F\nC-T B-F A-F D-F\nA-F D-F C-F B-T\nB-T A-F C-F D-F\nB-F D-T A-F C-F\nA-T C-F B-F D-F\nD-T B-F C-F A-F\nC-T A-F B-F D-F\n```\n\n### 输出样例：\n```out\n13224143\n```\n"}}
{"problemSetProblem": {"id": "994805262303477760", "label": "1077", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6 50\n42 49 49 35 38 41\n36 51 50 28 -1 30\n40 36 41 33 47 49\n30 250 -25 27 45 31\n48 0 0 50 50 1234\n43 41 36 29 42 29\n", "output": "42\n33\n41\n31\n37\n39\n"}, {"name": "", "input": "6 50\n42 49 49 35 38 41\n36 51 50 28 -1 30\n40 36 41 33 47 49\n30 250 -25 27 45 31\n48 0 0 50 50 1234\n43 41 36 29 42 29\n", "output": "42\n33\n41\n31\n37\n39\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "互评成绩计算", "content": "在浙大的计算机专业课中，经常有互评分组报告这个环节。一个组上台介绍自己的工作，其他组在台下为其表现评分。最后这个组的互评成绩是这样计算的：所有其他组的评分中，去掉一个最高分和一个最低分，剩下的分数取平均分记为 $$G_1$$；老师给这个组的评分记为 $$G_2$$。该组得分为 $$(G_1+G_2)/2$$，最后结果四舍五入后保留整数分。本题就要求你写个程序帮助老师计算每个组的互评成绩。\n\n### 输入格式：\n\n输入第一行给出两个正整数 $$N$$（$$>$$ 3）和 $$M$$，分别是分组数和满分，均不超过 100。随后 $$N$$ 行，每行给出该组得到的 $$N$$ 个分数（均保证为整型范围内的整数），其中第 1 个是老师给出的评分，后面 $$N-1$$ 个是其他组给的评分。合法的输入应该是 $$[0, M]$$ 区间内的整数，若不在合法区间内，则该分数须被忽略。题目保证老师的评分都是合法的，并且每个组至少会有 3 个来自同学的合法评分。\n\n### 输出格式：\n\n为每个组输出其最终得分。每个得分占一行。\n\n### 输入样例：\n```in\n6 50\n42 49 49 35 38 41\n36 51 50 28 -1 30\n40 36 41 33 47 49\n30 250 -25 27 45 31\n48 0 0 50 50 1234\n43 41 36 29 42 29\n```\n\n### 输出样例：\n```out\n42\n33\n41\n31\n37\n39\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10719", "description": "在浙大的计算机专业课中，经常有互评分组报告这个环节。一个组上台介绍自己的工作，其他组在台下为其表现评分。最后这个组的互评成绩是这样计算的：所有其他组的评分中，去掉一个最高分和一个最低分，剩下的分数取平均分记为 $$G_1$$；老师给这个组的评分记为 $$G_2$$。该组得分为 $$(G_1+G_2)/2$$，最后结果四舍五入后保留整数分。本题就要求你写个程序帮助老师计算每个组的互评成绩。\n\n### 输入格式：\n\n输入第一行给出两个正整数 $$N$$（$$>$$ 3）和 $$M$$，分别是分组数和满分，均不超过 100。随后 $$N$$ 行，每行给出该组得到的 $$N$$ 个分数（均保证为整型范围内的整数），其中第 1 个是老师给出的评分，后面 $$N-1$$ 个是其他组给的评分。合法的输入应该是 $$[0, M]$$ 区间内的整数，若不在合法区间内，则该分数须被忽略。题目保证老师的评分都是合法的，并且每个组至少会有 3 个来自同学的合法评分。\n\n### 输出格式：\n\n为每个组输出其最终得分。每个得分占一行。\n\n### 输入样例：\n```in\n6 50\n42 49 49 35 38 41\n36 51 50 28 -1 30\n40 36 41 33 47 49\n30 250 -25 27 45 31\n48 0 0 50 50 1234\n43 41 36 29 42 29\n```\n\n### 输出样例：\n```out\n42\n33\n41\n31\n37\n39\n```\n"}}
{"problemSetProblem": {"id": "994805262018265088", "label": "1078", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "C\nTTTTThhiiiis isssss a   tesssst CAaaa as\n", "output": "5T2h4is i5s a3 te4st CA3a as\n"}, {"name": "", "input": "D\n5T2h4is i5s a3 te4st CA3a as10Z\n", "output": "TTTTThhiiiis isssss a   tesssst CAaaa asZZZZZZZZZZ\n"}, {"name": "", "input": "C\nTTTTThhiiiis isssss a   tesssst CAaaa as\n", "output": "5T2h4is i5s a3 te4st CA3a as\n"}, {"name": "", "input": "D\n5T2h4is i5s a3 te4st CA3a as10Z\n", "output": "TTTTThhiiiis isssss a   tesssst CAaaa asZZZZZZZZZZ\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "字符串压缩与解压", "content": "文本压缩有很多种方法，这里我们只考虑最简单的一种：把由相同字符组成的一个连续的片段用这个字符和片段中含有这个字符的个数来表示。例如 `ccccc` 就用 `5c` 来表示。如果字符没有重复，就原样输出。例如 `aba` 压缩后仍然是 `aba`。\n\n解压方法就是反过来，把形如 `5c` 这样的表示恢复为 `ccccc`。\n\n本题需要你根据压缩或解压的要求，对给定字符串进行处理。这里我们简单地假设原始字符串是完全由英文字母和空格组成的非空字符串。\n\n### 输入格式：\n\n输入第一行给出一个字符，如果是 `C` 就表示下面的字符串需要被压缩；如果是 `D` 就表示下面的字符串需要被解压。第二行给出需要被压缩或解压的不超过 1000 个字符的字符串，以回车结尾。题目保证字符重复个数在整型范围内，且输出文件不超过 1MB。\n\n### 输出格式：\n\n根据要求压缩或解压字符串，并在一行中输出结果。\n\n### 输入样例 1：\n```in\nC\nTTTTThhiiiis isssss a   tesssst CAaaa as\n```\n\n### 输出样例 1：\n```out\n5T2h4is i5s a3 te4st CA3a as\n```\n\n### 输入样例 2：\n```in\nD\n5T2h4is i5s a3 te4st CA3a as10Z\n```\n\n### 输出样例 2：\n```out\nTTTTThhiiiis isssss a   tesssst CAaaa asZZZZZZZZZZ\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10720", "description": "文本压缩有很多种方法，这里我们只考虑最简单的一种：把由相同字符组成的一个连续的片段用这个字符和片段中含有这个字符的个数来表示。例如 `ccccc` 就用 `5c` 来表示。如果字符没有重复，就原样输出。例如 `aba` 压缩后仍然是 `aba`。\n\n解压方法就是反过来，把形如 `5c` 这样的表示恢复为 `ccccc`。\n\n本题需要你根据压缩或解压的要求，对给定字符串进行处理。这里我们简单地假设原始字符串是完全由英文字母和空格组成的非空字符串。\n\n### 输入格式：\n\n输入第一行给出一个字符，如果是 `C` 就表示下面的字符串需要被压缩；如果是 `D` 就表示下面的字符串需要被解压。第二行给出需要被压缩或解压的不超过 1000 个字符的字符串，以回车结尾。题目保证字符重复个数在整型范围内，且输出文件不超过 1MB。\n\n### 输出格式：\n\n根据要求压缩或解压字符串，并在一行中输出结果。\n\n### 输入样例 1：\n```in\nC\nTTTTThhiiiis isssss a   tesssst CAaaa as\n```\n\n### 输出样例 1：\n```out\n5T2h4is i5s a3 te4st CA3a as\n```\n\n### 输入样例 2：\n```in\nD\n5T2h4is i5s a3 te4st CA3a as10Z\n```\n\n### 输出样例 2：\n```out\nTTTTThhiiiis isssss a   tesssst CAaaa asZZZZZZZZZZ\n```\n"}}
{"problemSetProblem": {"id": "994805261754023936", "label": "1079", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "97152\n", "output": "97152 + 25179 = 122331\n122331 + 133221 = 255552\n255552 is a palindromic number.\n"}, {"name": "", "input": "196\n", "output": "196 + 691 = 887\n887 + 788 = 1675\n1675 + 5761 = 7436\n7436 + 6347 = 13783\n13783 + 38731 = 52514\n52514 + 41525 = 94039\n94039 + 93049 = 187088\n187088 + 880781 = 1067869\n1067869 + 9687601 = 10755470\n10755470 + 07455701 = 18211171\nNot found in 10 iterations.\n"}, {"name": "", "input": "97152\n", "output": "97152 + 25179 = 122331\n122331 + 133221 = 255552\n255552 is a palindromic number.\n"}, {"name": "", "input": "196\n", "output": "196 + 691 = 887\n887 + 788 = 1675\n1675 + 5761 = 7436\n7436 + 6347 = 13783\n13783 + 38731 = 52514\n52514 + 41525 = 94039\n94039 + 93049 = 187088\n187088 + 880781 = 1067869\n1067869 + 9687601 = 10755470\n10755470 + 07455701 = 18211171\nNot found in 10 iterations.\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "延迟的回文数", "content": "给定一个 $$k+1$$ 位的正整数 $$N$$，写成 $$a_k \\cdots a_1 a_0$$ 的形式，其中对所有 $$i$$ 有 $$0 \\le a_i < 10$$ 且 $$a_k > 0$$。$$N$$ 被称为一个**回文数**，当且仅当对所有 $$i$$ 有 $$a_i = a_{k-i}$$。零也被定义为一个回文数。\n\n非回文数也可以通过一系列操作变出回文数。首先将该数字逆转，再将逆转数与该数相加，如果和还不是一个回文数，就重复这个逆转再相加的操作，直到一个回文数出现。如果一个非回文数可以变出回文数，就称这个数为**延迟的回文数**。（定义翻译自 https://en.wikipedia.org/wiki/Palindromic_number ）\n\n给定任意一个正整数，本题要求你找到其变出的那个回文数。\n\n### 输入格式：\n\n输入在一行中给出一个不超过1000位的正整数。\n\n### 输出格式：\n\n对给定的整数，一行一行输出其变出回文数的过程。每行格式如下\n```\nA + B = C\n```\n其中 `A` 是原始的数字，`B` 是 `A` 的逆转数，`C` 是它们的和。`A` 从输入的整数开始。重复操作直到 `C` 在 10 步以内变成回文数，这时在一行中输出 `C is a palindromic number.`；或者如果 10 步都没能得到回文数，最后就在一行中输出 `Not found in 10 iterations.`。\n\n### 输入样例 1：\n```in\n97152\n```\n\n### 输出样例 1：\n```out\n97152 + 25179 = 122331\n122331 + 133221 = 255552\n255552 is a palindromic number.\n```\n\n### 输入样例 2：\n```in\n196\n```\n\n### 输出样例 2：\n```out\n196 + 691 = 887\n887 + 788 = 1675\n1675 + 5761 = 7436\n7436 + 6347 = 13783\n13783 + 38731 = 52514\n52514 + 41525 = 94039\n94039 + 93049 = 187088\n187088 + 880781 = 1067869\n1067869 + 9687601 = 10755470\n10755470 + 07455701 = 18211171\nNot found in 10 iterations.\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10721", "description": "给定一个 $$k+1$$ 位的正整数 $$N$$，写成 $$a_k \\cdots a_1 a_0$$ 的形式，其中对所有 $$i$$ 有 $$0 \\le a_i < 10$$ 且 $$a_k > 0$$。$$N$$ 被称为一个**回文数**，当且仅当对所有 $$i$$ 有 $$a_i = a_{k-i}$$。零也被定义为一个回文数。\n\n非回文数也可以通过一系列操作变出回文数。首先将该数字逆转，再将逆转数与该数相加，如果和还不是一个回文数，就重复这个逆转再相加的操作，直到一个回文数出现。如果一个非回文数可以变出回文数，就称这个数为**延迟的回文数**。（定义翻译自 https://en.wikipedia.org/wiki/Palindromic_number ）\n\n给定任意一个正整数，本题要求你找到其变出的那个回文数。\n\n### 输入格式：\n\n输入在一行中给出一个不超过1000位的正整数。\n\n### 输出格式：\n\n对给定的整数，一行一行输出其变出回文数的过程。每行格式如下\n```\nA + B = C\n```\n其中 `A` 是原始的数字，`B` 是 `A` 的逆转数，`C` 是它们的和。`A` 从输入的整数开始。重复操作直到 `C` 在 10 步以内变成回文数，这时在一行中输出 `C is a palindromic number.`；或者如果 10 步都没能得到回文数，最后就在一行中输出 `Not found in 10 iterations.`。\n\n### 输入样例 1：\n```in\n97152\n```\n\n### 输出样例 1：\n```out\n97152 + 25179 = 122331\n122331 + 133221 = 255552\n255552 is a palindromic number.\n```\n\n### 输入样例 2：\n```in\n196\n```\n\n### 输出样例 2：\n```out\n196 + 691 = 887\n887 + 788 = 1675\n1675 + 5761 = 7436\n7436 + 6347 = 13783\n13783 + 38731 = 52514\n52514 + 41525 = 94039\n94039 + 93049 = 187088\n187088 + 880781 = 1067869\n1067869 + 9687601 = 10755470\n10755470 + 07455701 = 18211171\nNot found in 10 iterations.\n```\n"}}
{"problemSetProblem": {"id": "994805261493977088", "label": "1080", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6 6 7\n01234 880\na1903 199\nydjh2 200\nwehu8 300\ndx86w 220\nmissing 400\nydhfu77 99\nwehu8 55\nydjh2 98\ndx86w 88\na1903 86\n01234 39\nydhfu77 88\na1903 66\n01234 58\nwehu8 84\nydjh2 82\nmissing 99\ndx86w 81\n", "output": "missing 400 -1 99 99\nydjh2 200 98 82 88\ndx86w 220 88 81 84\nwehu8 300 55 84 84\n"}, {"name": "", "input": "6 6 7\n01234 880\na1903 199\nydjh2 200\nwehu8 300\ndx86w 220\nmissing 400\nydhfu77 99\nwehu8 55\nydjh2 98\ndx86w 88\na1903 86\n01234 39\nydhfu77 88\na1903 66\n01234 58\nwehu8 84\nydjh2 82\nmissing 99\ndx86w 81\n", "output": "missing 400 -1 99 99\nydjh2 200 98 82 88\ndx86w 220 88 81 84\nwehu8 300 55 84 84\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "MOOC期终成绩", "content": "对于在中国大学MOOC（http://www.icourse163.org/ ）学习“数据结构”课程的学生，想要获得一张合格证书，必须首先获得不少于200分的在线编程作业分，然后总评获得不少于60分（满分100）。总评成绩的计算公式为 $$G = (G_{mid-term}\\times 40\\% + G_{final}\\times 60\\%)$$，如果 $$G_{mid-term} > G_{final}$$；否则总评 $$G$$ 就是 $$G_{final}$$。这里 $$G_{mid-term}$$ 和 $$G_{final}$$ 分别为学生的期中和期末成绩。\n\n现在的问题是，每次考试都产生一张独立的成绩单。本题就请你编写程序，把不同的成绩单合为一张。\n\n### 输入格式：\n\n输入在第一行给出3个整数，分别是 P（做了在线编程作业的学生数）、M（参加了期中考试的学生数）、N（参加了期末考试的学生数）。每个数都不超过10000。\n\n接下来有三块输入。第一块包含 P 个在线编程成绩 $$G_p$$；第二块包含 M 个期中考试成绩 $$G_{mid-term}$$；第三块包含 N 个期末考试成绩 $$G_{final}$$。每个成绩占一行，格式为：`学生学号 分数`。其中`学生学号`为不超过20个字符的英文字母和数字；`分数`是非负整数（编程总分最高为900分，期中和期末的最高分为100分）。\n\n### 输出格式：\n\n打印出获得合格证书的学生名单。每个学生占一行，格式为：\n\n`学生学号` $$G_p$$ $$G_{mid-term}$$ $$G_{final}$$ $$G$$\n\n如果有的成绩不存在（例如某人没参加期中考试），则在相应的位置输出“$$-1$$”。输出顺序为按照总评分数（四舍五入精确到整数）递减。若有并列，则按学号递增。题目保证学号没有重复，且至少存在1个合格的学生。\n\n### 输入样例：\n```in\n6 6 7\n01234 880\na1903 199\nydjh2 200\nwehu8 300\ndx86w 220\nmissing 400\nydhfu77 99\nwehu8 55\nydjh2 98\ndx86w 88\na1903 86\n01234 39\nydhfu77 88\na1903 66\n01234 58\nwehu8 84\nydjh2 82\nmissing 99\ndx86w 81\n```\n\n### 输出样例：\n```out\nmissing 400 -1 99 99\nydjh2 200 98 82 88\ndx86w 220 88 81 84\nwehu8 300 55 84 84\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10722", "description": "对于在中国大学MOOC（http://www.icourse163.org/ ）学习“数据结构”课程的学生，想要获得一张合格证书，必须首先获得不少于200分的在线编程作业分，然后总评获得不少于60分（满分100）。总评成绩的计算公式为 $$G = (G_{mid-term}\\times 40\\% + G_{final}\\times 60\\%)$$，如果 $$G_{mid-term} > G_{final}$$；否则总评 $$G$$ 就是 $$G_{final}$$。这里 $$G_{mid-term}$$ 和 $$G_{final}$$ 分别为学生的期中和期末成绩。\n\n现在的问题是，每次考试都产生一张独立的成绩单。本题就请你编写程序，把不同的成绩单合为一张。\n\n### 输入格式：\n\n输入在第一行给出3个整数，分别是 P（做了在线编程作业的学生数）、M（参加了期中考试的学生数）、N（参加了期末考试的学生数）。每个数都不超过10000。\n\n接下来有三块输入。第一块包含 P 个在线编程成绩 $$G_p$$；第二块包含 M 个期中考试成绩 $$G_{mid-term}$$；第三块包含 N 个期末考试成绩 $$G_{final}$$。每个成绩占一行，格式为：`学生学号 分数`。其中`学生学号`为不超过20个字符的英文字母和数字；`分数`是非负整数（编程总分最高为900分，期中和期末的最高分为100分）。\n\n### 输出格式：\n\n打印出获得合格证书的学生名单。每个学生占一行，格式为：\n\n`学生学号` $$G_p$$ $$G_{mid-term}$$ $$G_{final}$$ $$G$$\n\n如果有的成绩不存在（例如某人没参加期中考试），则在相应的位置输出“$$-1$$”。输出顺序为按照总评分数（四舍五入精确到整数）递减。若有并列，则按学号递增。题目保证学号没有重复，且至少存在1个合格的学生。\n\n### 输入样例：\n```in\n6 6 7\n01234 880\na1903 199\nydjh2 200\nwehu8 300\ndx86w 220\nmissing 400\nydhfu77 99\nwehu8 55\nydjh2 98\ndx86w 88\na1903 86\n01234 39\nydhfu77 88\na1903 66\n01234 58\nwehu8 84\nydjh2 82\nmissing 99\ndx86w 81\n```\n\n### 输出样例：\n```out\nmissing 400 -1 99 99\nydjh2 200 98 82 88\ndx86w 220 88 81 84\nwehu8 300 55 84 84\n```\n"}}
{"problemSetProblem": {"id": "994805261217153024", "label": "1081", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5\n123s\nzheshi.wodepw\n1234.5678\nWanMei23333\npass*word.6\n", "output": "Your password is tai duan le.\nYour password needs shu zi.\nYour password needs zi mu.\nYour password is wan mei.\nYour password is tai luan le.\n"}, {"name": "", "input": "5\n123s\nzheshi.wodepw\n1234.5678\nWanMei23333\npass*word.6\n", "output": "Your password is tai duan le.\nYour password needs shu zi.\nYour password needs zi mu.\nYour password is wan mei.\nYour password is tai luan le.\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "检查密码", "content": "本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于6个字符组成，并且只能有英文字母、数字和小数点 `.`，还必须既有字母也有数字。\n\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le$$ 100），随后 N 行，每行给出一个用户设置的密码，为不超过 80 个字符的非空字符串，以回车结束。\n\n### 输出格式：\n\n对每个用户的密码，在一行中输出系统反馈信息，分以下5种：\n\n- 如果密码合法，输出`Your password is wan mei.`；\n- 如果密码太短，不论合法与否，都输出`Your password is tai duan le.`；\n- 如果密码长度合法，但存在不合法字符，则输出`Your password is tai luan le.`；\n- 如果密码长度合法，但只有字母没有数字，则输出`Your password needs shu zi.`；\n- 如果密码长度合法，但只有数字没有字母，则输出`Your password needs zi mu.`。\n\n### 输入样例：\n```in\n5\n123s\nzheshi.wodepw\n1234.5678\nWanMei23333\npass*word.6\n```\n\n### 输出样例：\n```out\nYour password is tai duan le.\nYour password needs shu zi.\nYour password needs zi mu.\nYour password is wan mei.\nYour password is tai luan le.\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10729", "description": "本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于6个字符组成，并且只能有英文字母、数字和小数点 `.`，还必须既有字母也有数字。\n\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le$$ 100），随后 N 行，每行给出一个用户设置的密码，为不超过 80 个字符的非空字符串，以回车结束。\n\n### 输出格式：\n\n对每个用户的密码，在一行中输出系统反馈信息，分以下5种：\n\n- 如果密码合法，输出`Your password is wan mei.`；\n- 如果密码太短，不论合法与否，都输出`Your password is tai duan le.`；\n- 如果密码长度合法，但存在不合法字符，则输出`Your password is tai luan le.`；\n- 如果密码长度合法，但只有字母没有数字，则输出`Your password needs shu zi.`；\n- 如果密码长度合法，但只有数字没有字母，则输出`Your password needs zi mu.`。\n\n### 输入样例：\n```in\n5\n123s\nzheshi.wodepw\n1234.5678\nWanMei23333\npass*word.6\n```\n\n### 输出样例：\n```out\nYour password is tai duan le.\nYour password needs shu zi.\nYour password needs zi mu.\nYour password is wan mei.\nYour password is tai luan le.\n```\n"}}
{"problemSetProblem": {"id": "994805260990660608", "label": "1082", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3\n0001 5 7\n1020 -1 3\n0233 0 -1\n", "output": "0233 0001\n"}, {"name": "", "input": "3\n0001 5 7\n1020 -1 3\n0233 0 -1\n", "output": "0233 0001\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "射击比赛", "content": "本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。\n\n### 输入格式：\n\n输入在第一行中给出一个正整数 N（$$\\le$$ 10 000）。随后 N 行，每行按下列格式给出：\n\n```\nID x y\n```\n\n其中 `ID` 是运动员的编号（由 4 位数字组成）；`x` 和 `y` 是其打出的弹洞的平面坐标(`x`,`y`)，均为整数，且 0 $$\\le$$ |`x`|, |`y`| $$\\le$$ 100。题目保证每个运动员的编号不重复，且每人只打 1 枪。\n\n### 输出格式：\n\n输出冠军和菜鸟的编号，中间空 1 格。题目保证他们是唯一的。\n\n### 输入样例：\n```in\n3\n0001 5 7\n1020 -1 3\n0233 0 -1\n```\n\n### 输出样例：\n```out\n0233 0001\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10730", "description": "本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。\n\n### 输入格式：\n\n输入在第一行中给出一个正整数 N（$$\\le$$ 10 000）。随后 N 行，每行按下列格式给出：\n\n```\nID x y\n```\n\n其中 `ID` 是运动员的编号（由 4 位数字组成）；`x` 和 `y` 是其打出的弹洞的平面坐标(`x`,`y`)，均为整数，且 0 $$\\le$$ |`x`|, |`y`| $$\\le$$ 100。题目保证每个运动员的编号不重复，且每人只打 1 枪。\n\n### 输出格式：\n\n输出冠军和菜鸟的编号，中间空 1 格。题目保证他们是唯一的。\n\n### 输入样例：\n```in\n3\n0001 5 7\n1020 -1 3\n0233 0 -1\n```\n\n### 输出样例：\n```out\n0233 0001\n```\n"}}
{"problemSetProblem": {"id": "994805260780945408", "label": "1083", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "8\n3 5 8 6 2 1 4 7\n", "output": "5 2\n3 3\n2 2\n"}, {"name": "", "input": "8\n3 5 8 6 2 1 4 7\n", "output": "5 2\n3 3\n2 2\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "是否存在相等的差", "content": "给定 N 张卡片，正面分别写上 1、2、……、N，然后全部翻面，洗牌，在背面分别写上 1、2、……、N。将每张牌的正反两面数字相减（大减小），得到 N 个非负差值，其中是否存在相等的差？\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（2 $$\\le$$ N $$\\le$$ 10 000），随后一行给出 1 到 N 的一个洗牌后的排列，第 i 个数表示正面写了 i 的那张卡片背面的数字。\n\n### 输出格式：\n\n按照“差值 重复次数”的格式从大到小输出重复的差值及其重复的次数，每行输出一个结果。\n\n### 输入样例：\n```in\n8\n3 5 8 6 2 1 4 7\n```\n\n### 输出样例：\n```out\n5 2\n3 3\n2 2\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10731", "description": "给定 N 张卡片，正面分别写上 1、2、……、N，然后全部翻面，洗牌，在背面分别写上 1、2、……、N。将每张牌的正反两面数字相减（大减小），得到 N 个非负差值，其中是否存在相等的差？\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（2 $$\\le$$ N $$\\le$$ 10 000），随后一行给出 1 到 N 的一个洗牌后的排列，第 i 个数表示正面写了 i 的那张卡片背面的数字。\n\n### 输出格式：\n\n按照“差值 重复次数”的格式从大到小输出重复的差值及其重复的次数，每行输出一个结果。\n\n### 输入样例：\n```in\n8\n3 5 8 6 2 1 4 7\n```\n\n### 输出样例：\n```out\n5 2\n3 3\n2 2\n```\n"}}
{"problemSetProblem": {"id": "994805260583813120", "label": "1084", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "1 8\n", "output": "1123123111\n"}, {"name": "", "input": "1 8\n", "output": "1123123111\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "外观数列", "content": "外观数列是指具有以下特点的整数序列：\n\n```\nd, d1, d111, d113, d11231, d112213111, ...\n```\n\n它从不等于 1 的数字 `d` 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 `d`，所以就是 `d1`；第 2 项是 1 个 `d`（对应 `d1`）和 1 个 1（对应 11），所以第 3 项就是 `d111`。又比如第 4 项是 `d113`，其描述就是 1 个 `d`，2 个 1，1 个 3，所以下一项就是 `d11231`。当然这个定义对 `d` = 1 也成立。本题要求你推算任意给定数字 `d` 的外观数列的第 N 项。\n\n### 输入格式：\n\n输入第一行给出 [0,9] 范围内的一个整数 `d`、以及一个正整数 N（$$\\le$$ 40），用空格分隔。\n\n### 输出格式：\n\n在一行中给出数字 `d` 的外观数列的第 N 项。\n\n### 输入样例：\n```in\n1 8\n```\n\n### 输出样例：\n```out\n1123123111\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10732", "description": "外观数列是指具有以下特点的整数序列：\n\n```\nd, d1, d111, d113, d11231, d112213111, ...\n```\n\n它从不等于 1 的数字 `d` 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 `d`，所以就是 `d1`；第 2 项是 1 个 `d`（对应 `d1`）和 1 个 1（对应 11），所以第 3 项就是 `d111`。又比如第 4 项是 `d113`，其描述就是 1 个 `d`，2 个 1，1 个 3，所以下一项就是 `d11231`。当然这个定义对 `d` = 1 也成立。本题要求你推算任意给定数字 `d` 的外观数列的第 N 项。\n\n### 输入格式：\n\n输入第一行给出 [0,9] 范围内的一个整数 `d`、以及一个正整数 N（$$\\le$$ 40），用空格分隔。\n\n### 输出格式：\n\n在一行中给出数字 `d` 的外观数列的第 N 项。\n\n### 输入样例：\n```in\n1 8\n```\n\n### 输出样例：\n```out\n1123123111\n```\n"}}
{"problemSetProblem": {"id": "994805260353126400", "label": "1085", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 800, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "10\nA57908 85 Au\nB57908 54 LanX\nA37487 60 au\nT28374 67 CMU\nT32486 24 hypu\nA66734 92 cmu\nB76378 71 AU\nA47780 45 lanx\nA72809 100 pku\nA03274 45 hypu\n", "output": "5\n1 cmu 192 2\n1 au 192 3\n3 pku 100 1\n4 hypu 81 2\n4 lanx 81 2\n"}, {"name": "", "input": "10\nA57908 85 Au\nB57908 54 LanX\nA37487 60 au\nT28374 67 CMU\nT32486 24 hypu\nA66734 92 cmu\nB76378 71 AU\nA47780 45 lanx\nA72809 100 pku\nA03274 45 hypu\n", "output": "5\n1 cmu 192 2\n1 au 192 3\n3 pku 100 1\n4 hypu 81 2\n4 lanx 81 2\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "PAT单位排行", "content": "每次 PAT 考试结束后，考试中心都会发布一个考生单位排行榜。本题就请你实现这个功能。\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le 10^5$$），即考生人数。随后 N 行，每行按下列格式给出一个考生的信息：\n\n```\n准考证号 得分 学校\n```\n\n其中`准考证号`是由 6 个字符组成的字符串，其首字母表示考试的级别：`B`代表乙级，`A`代表甲级，`T`代表顶级；`得分`是 [0, 100] 区间内的整数；`学校`是由不超过 6 个英文字母组成的单位码（大小写无关）。注意：题目保证每个考生的准考证号是不同的。\n\n### 输出格式：\n\n首先在一行中输出单位个数。随后按以下格式非降序输出单位的排行榜：\n\n```\n排名 学校 加权总分 考生人数\n```\n\n其中`排名`是该单位的排名（从 1 开始）；`学校`是全部按小写字母输出的单位码；`加权总分`定义为`乙级总分/1.5 + 甲级总分 + 顶级总分*1.5`的**整数部分**；`考生人数`是该属于单位的考生的总人数。\n\n学校首先按加权总分排行。如有并列，则应对应相同的排名，并按考生人数升序输出。如果仍然并列，则按单位码的字典序输出。\n\n### 输入样例：\n```in\n10\nA57908 85 Au\nB57908 54 LanX\nA37487 60 au\nT28374 67 CMU\nT32486 24 hypu\nA66734 92 cmu\nB76378 71 AU\nA47780 45 lanx\nA72809 100 pku\nA03274 45 hypu\n```\n\n### 输出样例：\n```out\n5\n1 cmu 192 2\n1 au 192 3\n3 pku 100 1\n4 hypu 81 2\n4 lanx 81 2\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "10733", "description": "每次 PAT 考试结束后，考试中心都会发布一个考生单位排行榜。本题就请你实现这个功能。\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le 10^5$$），即考生人数。随后 N 行，每行按下列格式给出一个考生的信息：\n\n```\n准考证号 得分 学校\n```\n\n其中`准考证号`是由 6 个字符组成的字符串，其首字母表示考试的级别：`B`代表乙级，`A`代表甲级，`T`代表顶级；`得分`是 [0, 100] 区间内的整数；`学校`是由不超过 6 个英文字母组成的单位码（大小写无关）。注意：题目保证每个考生的准考证号是不同的。\n\n### 输出格式：\n\n首先在一行中输出单位个数。随后按以下格式非降序输出单位的排行榜：\n\n```\n排名 学校 加权总分 考生人数\n```\n\n其中`排名`是该单位的排名（从 1 开始）；`学校`是全部按小写字母输出的单位码；`加权总分`定义为`乙级总分/1.5 + 甲级总分 + 顶级总分*1.5`的**整数部分**；`考生人数`是该属于单位的考生的总人数。\n\n学校首先按加权总分排行。如有并列，则应对应相同的排名，并按考生人数升序输出。如果仍然并列，则按单位码的字典序输出。\n\n### 输入样例：\n```in\n10\nA57908 85 Au\nB57908 54 LanX\nA37487 60 au\nT28374 67 CMU\nT32486 24 hypu\nA66734 92 cmu\nB76378 71 AU\nA47780 45 lanx\nA72809 100 pku\nA03274 45 hypu\n```\n\n### 输出样例：\n```out\n5\n1 cmu 192 2\n1 au 192 3\n3 pku 100 1\n4 hypu 81 2\n4 lanx 81 2\n```\n"}}
{"problemSetProblem": {"id": "1038429065476579328", "label": "1086", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5 7\n", "output": "53\n"}, {"name": "", "input": "5 7\n", "output": "53\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "就不告诉你", "content": "做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。\n\n![53.jpg](~/0c3a4497-27c3-45ea-9c8e-5a1ab2df48af.jpg)\n\n\n### 输入格式：\n\n输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。\n\n### 输出格式：\n\n在一行中倒着输出 A 和 B 的乘积。\n\n### 输入样例：\n```in\n5 7\n```\n\n### 输出样例：\n```out\n53\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1030282835490684928", "description": "做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。\n\n![53.jpg](~/0c3a4497-27c3-45ea-9c8e-5a1ab2df48af.jpg)\n\n\n### 输入格式：\n\n输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。\n\n### 输出格式：\n\n在一行中倒着输出 A 和 B 的乘积。\n\n### 输入样例：\n```in\n5 7\n```\n\n### 输出样例：\n```out\n53\n```\n"}}
{"problemSetProblem": {"id": "1038429191091781632", "label": "1087", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 150, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "2017\n", "output": "1480\n"}, {"name": "", "input": "2017\n", "output": "1480\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "有多少不同的值", "content": "当自然数 $$n$$ 依次取 1、2、3、……、$$N$$ 时，算式 $$\\lfloor n/2\\rfloor +\\lfloor n/3\\rfloor +\\lfloor n/5\\rfloor $$ 有多少个不同的值？（注：$$\\lfloor x\\rfloor$$ 为取整函数，表示不超过 $$x$$ 的最大自然数，即 $$x$$ 的整数部分。）\n\n### 输入格式：\n\n输入给出一个正整数 $$N$$（$$2 \\le N \\le 10^4$$）。\n\n### 输出格式：\n\n在一行中输出题面中算式取到的不同值的个数。\n\n### 输入样例：\n```in\n2017\n```\n\n### 输出样例：\n```out\n1480\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1030283762448637952", "description": "当自然数 $$n$$ 依次取 1、2、3、……、$$N$$ 时，算式 $$\\lfloor n/2\\rfloor +\\lfloor n/3\\rfloor +\\lfloor n/5\\rfloor $$ 有多少个不同的值？（注：$$\\lfloor x\\rfloor$$ 为取整函数，表示不超过 $$x$$ 的最大自然数，即 $$x$$ 的整数部分。）\n\n### 输入格式：\n\n输入给出一个正整数 $$N$$（$$2 \\le N \\le 10^4$$）。\n\n### 输出格式：\n\n在一行中输出题面中算式取到的不同值的个数。\n\n### 输入样例：\n```in\n2017\n```\n\n### 输出样例：\n```out\n1480\n```\n"}}
{"problemSetProblem": {"id": "1038429286185074688", "label": "1088", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "48 3 7\n", "output": "48 Ping Cong Gai\n"}, {"name": "", "input": "48 11 6\n", "output": "No Solution\n"}, {"name": "", "input": "48 3 7\n", "output": "48 Ping Cong Gai\n"}, {"name": "", "input": "48 11 6\n", "output": "No Solution\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "三人行", "content": "子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”\n\n本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。\n\n### 输入格式：\n\n输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。\n\n### 输出格式：\n\n在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 `Cong`；平等则输出 `Ping`；比你弱则输出 `Gai`。其间以 1 个空格分隔，行首尾不得有多余空格。\n\n注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 `No Solution`。\n\n### 输入样例 1：\n```in\n48 3 7\n```\n\n### 输出样例 1：\n```out\n48 Ping Cong Gai\n```\n\n### 输入样例 2：\n```in\n48 11 6\n```\n\n### 输出样例 2：\n```out\nNo Solution\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1030284889411985408", "description": "子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”\n\n本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。\n\n### 输入格式：\n\n输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。\n\n### 输出格式：\n\n在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 `Cong`；平等则输出 `Ping`；比你弱则输出 `Gai`。其间以 1 个空格分隔，行首尾不得有多余空格。\n\n注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 `No Solution`。\n\n### 输入样例 1：\n```in\n48 3 7\n```\n\n### 输出样例 1：\n```out\n48 Ping Cong Gai\n```\n\n### 输入样例 2：\n```in\n48 11 6\n```\n\n### 输出样例 2：\n```out\nNo Solution\n```\n"}}
{"problemSetProblem": {"id": "1038429385296453632", "label": "1089", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5\n-2\n+3\n-4\n+5\n+4\n", "output": "1 4\n"}, {"name": "", "input": "6\n+6\n+3\n+1\n-5\n-2\n+4\n", "output": "1 5\n"}, {"name": "", "input": "5\n-2\n-3\n-4\n-5\n-1\n", "output": "No Solution\n"}, {"name": "", "input": "5\n-2\n+3\n-4\n+5\n+4\n", "output": "1 4\n"}, {"name": "", "input": "6\n+6\n+3\n+1\n-5\n-2\n+4\n", "output": "1 5\n"}, {"name": "", "input": "5\n-2\n-3\n-4\n-5\n-1\n", "output": "No Solution\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "狼人杀-简单版", "content": "以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是狼人”，2 号玩家说：“3 号是好人”，3 号玩家说：“4 号是狼人”，4 号玩家说：“5 号是好人”，5 号玩家说：“4 号是好人”。已知这 5 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？\n\n本题是这个问题的升级版：已知 $$N$$ 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？\n\n### 输入格式：\n\n输入在第一行中给出一个正整数 $$N$$（$$5 \\le N \\le 100$$）。随后 $$N$$ 行，第 $$i$$ 行给出第 $$i$$ 号玩家说的话（$$1 \\le i \\le N$$），即一个玩家编号，用正号表示好人，负号表示狼人。\n\n### 输出格式：\n\n如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 $$A = { a[1], ..., a[M] }$$ 和 $$B = { b[1], ..., b[M] }$$，若存在 $$0 \\le k < M$$ 使得 $$a[i]=b[i]$$ （$$i \\le k$$），且 $$a[k+1]<b[k+1]$$，则称序列 $$A$$ 小于序列 $$B$$。若无解则输出 `No Solution`。\n\n### 输入样例 1：\n```in\n5\n-2\n+3\n-4\n+5\n+4\n```\n\n### 输出样例 1：\n```out\n1 4\n```\n\n### 输入样例 2：\n```in\n6\n+6\n+3\n+1\n-5\n-2\n+4\n```\n\n### 输出样例 2（解不唯一）：\n```out\n1 5\n```\n\n### 输入样例 3：\n```in\n5\n-2\n-3\n-4\n-5\n-1\n```\n\n### 输出样例 3：\n```out\nNo Solution\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1030285575478484992", "description": "以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是狼人”，2 号玩家说：“3 号是好人”，3 号玩家说：“4 号是狼人”，4 号玩家说：“5 号是好人”，5 号玩家说：“4 号是好人”。已知这 5 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？\n\n本题是这个问题的升级版：已知 $$N$$ 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？\n\n### 输入格式：\n\n输入在第一行中给出一个正整数 $$N$$（$$5 \\le N \\le 100$$）。随后 $$N$$ 行，第 $$i$$ 行给出第 $$i$$ 号玩家说的话（$$1 \\le i \\le N$$），即一个玩家编号，用正号表示好人，负号表示狼人。\n\n### 输出格式：\n\n如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 $$A = { a[1], ..., a[M] }$$ 和 $$B = { b[1], ..., b[M] }$$，若存在 $$0 \\le k < M$$ 使得 $$a[i]=b[i]$$ （$$i \\le k$$），且 $$a[k+1]<b[k+1]$$，则称序列 $$A$$ 小于序列 $$B$$。若无解则输出 `No Solution`。\n\n### 输入样例 1：\n```in\n5\n-2\n+3\n-4\n+5\n+4\n```\n\n### 输出样例 1：\n```out\n1 4\n```\n\n### 输入样例 2：\n```in\n6\n+6\n+3\n+1\n-5\n-2\n+4\n```\n\n### 输出样例 2（解不唯一）：\n```out\n1 5\n```\n\n### 输入样例 3：\n```in\n5\n-2\n-3\n-4\n-5\n-1\n```\n\n### 输出样例 3：\n```out\nNo Solution\n```\n"}}
{"problemSetProblem": {"id": "1038429484026175488", "label": "1090", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "6 3\n20001 20002\n20003 20004\n20005 20006\n20003 20001\n20005 20004\n20004 20006\n4 00001 20004 00002 20003\n5 98823 20002 20003 20006 10010\n3 12345 67890 23333\n", "output": "No\nYes\nYes\n"}, {"name": "", "input": "6 3\n20001 20002\n20003 20004\n20005 20006\n20003 20001\n20005 20004\n20004 20006\n4 00001 20004 00002 20003\n5 98823 20002 20003 20006 10010\n3 12345 67890 23333\n", "output": "No\nYes\nYes\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "危险品装箱", "content": "集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。\n\n本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。\n\n### 输入格式：\n\n输入第一行给出两个正整数：$$N$$ ($$\\le 10^4$$) 是成对的不相容物品的对数；$$M$$ ($$\\le 100$$) 是集装箱货品清单的单数。\n\n随后数据分两大块给出。第一块有 $$N$$ 行，每行给出一对不相容的物品。第二块有 $$M$$ 行，每行给出一箱货物的清单，格式如下：\n```\nK G[1] G[2] ... G[K]\n```\n其中 `K` ($$\\le 1000$$) 是物品件数，`G[i]` 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。\n\n### 输出格式：\n\n对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 `Yes`，否则输出 `No`。\n\n### 输入样例：\n```in\n6 3\n20001 20002\n20003 20004\n20005 20006\n20003 20001\n20005 20004\n20004 20006\n4 00001 20004 00002 20003\n5 98823 20002 20003 20006 10010\n3 12345 67890 23333\n```\n\n### 输出样例：\n```out\nNo\nYes\nYes\n```\n", "type": "PROGRAMMING", "author": "CHEN, Yue", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1030286213499232256", "description": "集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。\n\n本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。\n\n### 输入格式：\n\n输入第一行给出两个正整数：$$N$$ ($$\\le 10^4$$) 是成对的不相容物品的对数；$$M$$ ($$\\le 100$$) 是集装箱货品清单的单数。\n\n随后数据分两大块给出。第一块有 $$N$$ 行，每行给出一对不相容的物品。第二块有 $$M$$ 行，每行给出一箱货物的清单，格式如下：\n```\nK G[1] G[2] ... G[K]\n```\n其中 `K` ($$\\le 1000$$) 是物品件数，`G[i]` 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。\n\n### 输出格式：\n\n对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 `Yes`，否则输出 `No`。\n\n### 输入样例：\n```in\n6 3\n20001 20002\n20003 20004\n20005 20006\n20003 20001\n20005 20004\n20004 20006\n4 00001 20004 00002 20003\n5 98823 20002 20003 20006 10010\n3 12345 67890 23333\n```\n\n### 输出样例：\n```out\nNo\nYes\nYes\n```\n"}}
{"problemSetProblem": {"id": "1071785664454127616", "label": "1091", "score": 15, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "3\n92 5 233\n", "output": "3 25392\n1 25\nNo\n"}, {"name": "", "input": "3\n92 5 233\n", "output": "3 25392\n1 25\nNo\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "N-自守数", "content": "如果某个数 $$K$$ 的平方乘以 $$N$$ 以后，结果的末尾几位数等于 $$K$$，那么就称这个数为“$$N$$-自守数”。例如 $$3\\times 92^2 = 25 392$$，而 $$25 392$$ 的末尾两位正好是 $$92$$，所以 $$92$$ 是一个 $$3$$-自守数。\n\n本题就请你编写程序判断一个给定的数字是否关于某个 $$N$$ 是 $$N$$-自守数。\n\n### 输入格式：\n\n输入在第一行中给出正整数 $$M$$（$$\\le 20$$），随后一行给出 $$M$$ 个待检测的、不超过 1000 的正整数。\n\n### 输出格式：\n\n对每个需要检测的数字，如果它是 $$N$$-自守数就在一行中输出最小的 $$N$$ 和 $$NK^2$$ 的值，以一个空格隔开；否则输出 `No`。注意题目保证 $$N < 10$$。\n\n### 输入样例：\n```in\n3\n92 5 233\n```\n\n### 输出样例：\n```out\n3 25392\n1 25\nNo\n```\n", "type": "PROGRAMMING", "author": "陈越", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1066567733114494976", "description": "如果某个数 $$K$$ 的平方乘以 $$N$$ 以后，结果的末尾几位数等于 $$K$$，那么就称这个数为“$$N$$-自守数”。例如 $$3\\times 92^2 = 25 392$$，而 $$25 392$$ 的末尾两位正好是 $$92$$，所以 $$92$$ 是一个 $$3$$-自守数。\n\n本题就请你编写程序判断一个给定的数字是否关于某个 $$N$$ 是 $$N$$-自守数。\n\n### 输入格式：\n\n输入在第一行中给出正整数 $$M$$（$$\\le 20$$），随后一行给出 $$M$$ 个待检测的、不超过 1000 的正整数。\n\n### 输出格式：\n\n对每个需要检测的数字，如果它是 $$N$$-自守数就在一行中输出最小的 $$N$$ 和 $$NK^2$$ 的值，以一个空格隔开；否则输出 `No`。注意题目保证 $$N < 10$$。\n\n### 输入样例：\n```in\n3\n92 5 233\n```\n\n### 输出样例：\n```out\n3 25392\n1 25\nNo\n```\n"}}
{"problemSetProblem": {"id": "1071785779399028736", "label": "1092", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "5 3\n1001 992 0 233 6\n8 0 2018 0 2008\n36 18 0 1024 4\n", "output": "2018\n3 5\n"}, {"name": "", "input": "5 3\n1001 992 0 233 6\n8 0 2018 0 2008\n36 18 0 1024 4\n", "output": "2018\n3 5\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "最好吃的月饼", "content": "月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。\n\n![mk.jpg](~/fcb325a0-7090-4bf4-acb0-d4d7ea832f27.jpg)\n\n\n若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。\n\n### 输入格式：\n\n输入首先给出两个正整数 $$N$$（$$\\le 1000$$）和 $$M$$（$$\\le 100$$），分别为月饼的种类数（于是默认月饼种类从 1 到 $$N$$ 编号）和参与统计的城市数量。\n\n接下来 $$M$$ 行，每行给出 $$N$$ 个非负整数（均不超过 1 百万），其中第 $$i$$ 个整数为第 $$i$$ 种月饼的销量（块）。数字间以空格分隔。\n\n### 输出格式：\n\n在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。\n\n### 输入样例：\n```in\n5 3\n1001 992 0 233 6\n8 0 2018 0 2008\n36 18 0 1024 4\n```\n\n### 输出样例：\n```out\n2018\n3 5\n```\n", "type": "PROGRAMMING", "author": "陈越", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1066568660076650496", "description": "月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。\n\n![mk.jpg](~/fcb325a0-7090-4bf4-acb0-d4d7ea832f27.jpg)\n\n\n若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。\n\n### 输入格式：\n\n输入首先给出两个正整数 $$N$$（$$\\le 1000$$）和 $$M$$（$$\\le 100$$），分别为月饼的种类数（于是默认月饼种类从 1 到 $$N$$ 编号）和参与统计的城市数量。\n\n接下来 $$M$$ 行，每行给出 $$N$$ 个非负整数（均不超过 1 百万），其中第 $$i$$ 个整数为第 $$i$$ 种月饼的销量（块）。数字间以空格分隔。\n\n### 输出格式：\n\n在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。\n\n### 输入样例：\n```in\n5 3\n1001 992 0 233 6\n8 0 2018 0 2008\n36 18 0 1024 4\n```\n\n### 输出样例：\n```out\n2018\n3 5\n```\n"}}
{"problemSetProblem": {"id": "1071785884776722432", "label": "1093", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 400, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "This is a sample test\nto show you_How it works\n", "output": "This ampletowyu_Hrk\n"}, {"name": "", "input": "This is a sample test\nto show you_How it works\n", "output": "This ampletowyu_Hrk\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "字符串A+B", "content": "给定两个字符串 $$A$$ 和 $$B$$，本题要求你输出 $$A+B$$，即两个字符串的并集。要求先输出 $$A$$，再输出 $$B$$，但**重复的字符必须被剔除**。\n\n### 输入格式：\n\n输入在两行中分别给出 $$A$$ 和 $$B$$，均为长度不超过 $$10^6$$的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。\n\n### 输出格式：\n\n在一行中输出题面要求的 $$A$$ 和 $$B$$ 的和。\n\n### 输入样例：\n```in\nThis is a sample test\nto show you_How it works\n```\n\n### 输出样例：\n```out\nThis ampletowyu_Hrk\n```\n", "type": "PROGRAMMING", "author": "陈越", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1066570337781465088", "description": "给定两个字符串 $$A$$ 和 $$B$$，本题要求你输出 $$A+B$$，即两个字符串的并集。要求先输出 $$A$$，再输出 $$B$$，但**重复的字符必须被剔除**。\n\n### 输入格式：\n\n输入在两行中分别给出 $$A$$ 和 $$B$$，均为长度不超过 $$10^6$$的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。\n\n### 输出格式：\n\n在一行中输出题面要求的 $$A$$ 和 $$B$$ 的和。\n\n### 输入样例：\n```in\nThis is a sample test\nto show you_How it works\n```\n\n### 输出样例：\n```out\nThis ampletowyu_Hrk\n```\n"}}
{"problemSetProblem": {"id": "1071785997033074688", "label": "1094", "score": 20, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "20 5\n23654987725541023819\n", "output": "49877\n"}, {"name": "", "input": "10 3\n2468024680\n", "output": "404\n"}, {"name": "", "input": "20 5\n23654987725541023819\n", "output": "49877\n"}, {"name": "", "input": "10 3\n2468024680\n", "output": "404\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "谷歌的招聘", "content": "2004 年 7 月，谷歌在硅谷的 101 号公路边竖立了一块巨大的广告牌（如下图）用于招聘。内容超级简单，就是一个以 .com 结尾的网址，而前面的网址是一个 10 位素数，这个素数是自然常数 e 中最早出现的 10 位连续数字。能找出这个素数的人，就可以通过访问谷歌的这个网站进入招聘流程的下一步。\n\n![prime.jpg](~/57148679-d574-4f49-b048-775c6c07791c.jpg)\n\n\n自然常数 e 是一个著名的超越数，前面若干位写出来是这样的：e = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642**7427466391**932003059921... 其中粗体标出的 10 位数就是答案。\n\n本题要求你编程解决一个更通用的问题：从任一给定的长度为 L 的数字中，找出最早出现的 K 位连续数字所组成的素数。\n\n### 输入格式：\n\n输入在第一行给出 2 个正整数，分别是 L（不超过 1000 的正整数，为数字长度）和 K（小于 10 的正整数）。接下来一行给出一个长度为 L 的正整数 N。\n\n### 输出格式：\n\n在一行中输出 N 中最早出现的 K 位连续数字所组成的素数。如果这样的素数不存在，则输出 `404`。注意，原始数字中的前导零也计算在位数之内。例如在 200236 中找 4 位素数，0023 算是解；但第一位 2 不能被当成 0002 输出，因为在原始数字中不存在这个 2 的前导零。\n\n### 输入样例 1：\n```in\n20 5\n23654987725541023819\n```\n\n### 输出样例 1：\n```out\n49877\n```\n\n### 输入样例 2：\n```in\n10 3\n2468024680\n```\n\n### 输出样例 2：\n```out\n404\n```\n", "type": "PROGRAMMING", "author": "陈越", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "REVIEWED", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1066576425377521664", "description": ""}}
{"problemSetProblem": {"id": "1071786104348536832", "label": "1095", "score": 25, "problemConfig": {"programmingProblemConfig": {"timeLimit": 200, "memoryLimit": 65536, "codeSizeLimit": 16, "cases": {}, "exampleTestDatas": [{"name": "", "input": "8 4\nB123180908127 99\nB102180908003 86\nA112180318002 98\nT107150310127 62\nA107180908108 100\nT123180908010 78\nB112160918035 88\nA107180908021 98\n1 A\n2 107\n3 180908\n2 999\n", "output": "Case 1: 1 A\nA107180908108 100\nA107180908021 98\nA112180318002 98\nCase 2: 2 107\n3 260\nCase 3: 3 180908\n107 2\n123 2\n102 1\nCase 4: 2 999\nNA\n"}, {"name": "", "input": "8 4\nB123180908127 99\nB102180908003 86\nA112180318002 98\nT107150310127 62\nA107180908108 100\nT123180908010 78\nB112160918035 88\nA107180908021 98\n1 A\n2 107\n3 180908\n2 999\n", "output": "Case 1: 1 A\nA107180908108 100\nA107180908021 98\nA112180318002 98\nCase 2: 2 107\n3 260\nCase 3: 3 180908\n107 2\n123 2\n102 1\nCase 4: 2 999\nNA\n"}], "testdataDescriptionCode": "", "customizeLimits": [], "stackSizeLimit": 0}, "solutionVisible": false}, "deadline": "1970-01-01T00:00:00Z", "title": "解码PAT准考证", "content": "PAT 准考证号由 4 部分组成：\n\n- 第 1 位是级别，即 `T` 代表顶级；`A` 代表甲级；`B` 代表乙级；\n- 第 2~4 位是考场编号，范围从 101 到 999；\n- 第 5~10 位是考试日期，格式为年、月、日顺次各占 2 位；\n- 最后 11~13 位是考生编号，范围从 000 到 999。\n\n现给定一系列考生的准考证号和他们的成绩，请你按照要求输出各种统计信息。\n\n### 输入格式：\n\n输入首先在一行中给出两个正整数 $$N$$（$$\\le 10^4$$）和 $$M$$（$$\\le 100$$），分别为考生人数和统计要求的个数。\n\n接下来 $$N$$ 行，每行给出一个考生的准考证号和其分数（在区间 $$[0, 100]$$ 内的整数），其间以空格分隔。\n\n考生信息之后，再给出 $$M$$ 行，每行给出一个统计要求，格式为：`类型 指令`，其中\n\n- `类型` 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 `指令` 则给出代表指定级别的字母；\n- `类型` 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 `指令` 则给出指定考场的编号；\n- `类型` 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 `指令` 则给出指定日期，格式与准考证上日期相同。\n\n### 输出格式：\n\n对每项统计要求，首先在一行中输出 `Case #: 要求`，其中 `#` 是该项要求的编号，从 1 开始；`要求` 即复制输入给出的要求。随后输出相应的统计结果：\n\n- `类型` 为 1 的指令，输出格式与输入的考生信息格式相同，即 `准考证号 成绩`。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）；\n- `类型` 为 2 的指令，按 `人数 总分` 的格式输出；\n- `类型` 为 3 的指令，输出按人数非递增顺序，格式为 `考场编号 总人数`。若人数并列则按考场编号递增顺序输出。\n\n如果查询结果为空，则输出 `NA`。\n\n### 输入样例：\n```in\n8 4\nB123180908127 99\nB102180908003 86\nA112180318002 98\nT107150310127 62\nA107180908108 100\nT123180908010 78\nB112160918035 88\nA107180908021 98\n1 A\n2 107\n3 180908\n2 999\n```\n\n### 输出样例：\n```out\nCase 1: 1 A\nA107180908108 100\nA107180908021 98\nA112180318002 98\nCase 2: 2 107\n3 260\nCase 3: 3 180908\n107 2\n123 2\n102 1\nCase 4: 2 999\nNA\n```\n", "type": "PROGRAMMING", "author": "陈越", "authorOrganization": {"id": "1", "name": "浙江大学", "comment": "", "code": "", "country": "NO_COUNTRY", "membersCount": 0, "type": "UNKNOWN", "balance": 0, "subdomain": "", "logo": ""}, "compiler": "NO_COMPILER", "problemStatus": "PRIVATE", "lastSubmissionId": "0", "solution": "", "problemSetId": "994805260223102976", "problemId": "1066577601011572736", "description": "PAT 准考证号由 4 部分组成：\n\n- 第 1 位是级别，即 `T` 代表顶级；`A` 代表甲级；`B` 代表乙级；\n- 第 2~4 位是考场编号，范围从 101 到 999；\n- 第 5~10 位是考试日期，格式为年、月、日顺次各占 2 位；\n- 最后 11~13 位是考生编号，范围从 000 到 999。\n\n现给定一系列考生的准考证号和他们的成绩，请你按照要求输出各种统计信息。\n\n### 输入格式：\n\n输入首先在一行中给出两个正整数 $$N$$（$$\\le 10^4$$）和 $$M$$（$$\\le 100$$），分别为考生人数和统计要求的个数。\n\n接下来 $$N$$ 行，每行给出一个考生的准考证号和其分数（在区间 $$[0, 100]$$ 内的整数），其间以空格分隔。\n\n考生信息之后，再给出 $$M$$ 行，每行给出一个统计要求，格式为：`类型 指令`，其中\n\n- `类型` 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 `指令` 则给出代表指定级别的字母；\n- `类型` 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 `指令` 则给出指定考场的编号；\n- `类型` 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 `指令` 则给出指定日期，格式与准考证上日期相同。\n\n### 输出格式：\n\n对每项统计要求，首先在一行中输出 `Case #: 要求`，其中 `#` 是该项要求的编号，从 1 开始；`要求` 即复制输入给出的要求。随后输出相应的统计结果：\n\n- `类型` 为 1 的指令，输出格式与输入的考生信息格式相同，即 `准考证号 成绩`。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）；\n- `类型` 为 2 的指令，按 `人数 总分` 的格式输出；\n- `类型` 为 3 的指令，输出按人数非递增顺序，格式为 `考场编号 总人数`。若人数并列则按考场编号递增顺序输出。\n\n如果查询结果为空，则输出 `NA`。\n\n### 输入样例：\n```in\n8 4\nB123180908127 99\nB102180908003 86\nA112180318002 98\nT107150310127 62\nA107180908108 100\nT123180908010 78\nB112160918035 88\nA107180908021 98\n1 A\n2 107\n3 180908\n2 999\n```\n\n### 输出样例：\n```out\nCase 1: 1 A\nA107180908108 100\nA107180908021 98\nA112180318002 98\nCase 2: 2 107\n3 260\nCase 3: 3 180908\n107 2\n123 2\n102 1\nCase 4: 2 999\nNA\n```\n"}}
