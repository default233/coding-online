/*
 Navicat MySQL Data Transfer

 Source Server         : localhostDB
 Source Server Type    : MySQL
 Source Server Version : 50625
 Source Host           : localhost:3306
 Source Schema         : coding_online

 Target Server Type    : MySQL
 Target Server Version : 50625
 File Encoding         : 65001

 Date: 15/05/2021 11:35:37
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for class
-- ----------------------------
DROP TABLE IF EXISTS `class`;
CREATE TABLE `class`  (
  `class_id` bigint(20) NOT NULL COMMENT '主键',
  `class_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '班级名称',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`class_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of class
-- ----------------------------
INSERT INTO `class` VALUES (1392781599531102210, '计算机班', '2021-05-13 17:59:45', '2021-05-13 17:59:45', 1, NULL);
INSERT INTO `class` VALUES (1392784493198200834, '电子商务班', '2021-05-13 18:11:15', '2021-05-13 18:11:15', 0, NULL);
INSERT INTO `class` VALUES (1392784549095690241, '信息管理班', '2021-05-13 18:11:28', '2021-05-13 18:11:28', 0, NULL);
INSERT INTO `class` VALUES (1392842152685355010, '计算机班', '2021-05-13 22:00:22', '2021-05-13 22:00:22', 0, NULL);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `comment_id` bigint(20) NOT NULL COMMENT '主键',
  `question_id` bigint(20) NULL DEFAULT NULL COMMENT '问题id',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题',
  `content` varchar(9999) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论',
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `img` varchar(2500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像地址',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`comment_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of comment
-- ----------------------------

-- ----------------------------
-- Table structure for comment_reply
-- ----------------------------
DROP TABLE IF EXISTS `comment_reply`;
CREATE TABLE `comment_reply`  (
  `comment_reply_id` bigint(20) NOT NULL COMMENT '主键',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `comment_id` bigint(20) NULL DEFAULT NULL COMMENT '评论id',
  `content` varchar(9999) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论',
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `img` varchar(2500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像地址',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`comment_reply_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of comment_reply
-- ----------------------------

-- ----------------------------
-- Table structure for compiler_type
-- ----------------------------
DROP TABLE IF EXISTS `compiler_type`;
CREATE TABLE `compiler_type`  (
  `compiler_id` bigint(20) NOT NULL COMMENT '主键',
  `compiler_type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '编译器类型',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`compiler_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of compiler_type
-- ----------------------------
INSERT INTO `compiler_type` VALUES (1, 'gcc', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `compiler_type` VALUES (2, 'g++', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `compiler_type` VALUES (3, 'java', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `compiler_type` VALUES (4, 'python', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);

-- ----------------------------
-- Table structure for input_example
-- ----------------------------
DROP TABLE IF EXISTS `input_example`;
CREATE TABLE `input_example`  (
  `input_example_id` bigint(20) NOT NULL COMMENT '主键',
  `question_id` bigint(20) NULL DEFAULT NULL COMMENT '问题id',
  `input_example` varchar(1280) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '输入示例',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`input_example_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of input_example
-- ----------------------------
INSERT INTO `input_example` VALUES (1383271604104040449, 1383271604087263234, '-5 8', '2021-04-17 12:10:25', '2021-04-17 12:10:25', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871330656257, 1383813203741462530, '-5 8', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871422930946, 1383813204123144194, '-5 8', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871477456898, 1383813204148310018, '5', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871536177154, 1383813204173475842, '10', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871594897410, 1383813204198641665, '6\n2 -3 7 88 0 15', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871645229058, 1383813204223807490, '10 10 200 100', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871695560706, 1383813204257361921, '-1 10', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871758475266, 1383813204282527745, '-21252 2', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871821389825, 1383813204316082178, '153 400', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871888498690, 1383813204341248002, '0.01 -3.14', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817871989161985, 1383813204366413826, 'aZ &\n09 Az', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872064659458, 1383813204391579650, '2 3', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872152739841, 1383813204429328385, '6 30', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872198877186, 1383813204454494210, '20 100 7', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872240820225, 1383813204479660034, '89 100', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872312123394, 1383813204529991681, '-12340', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872362455042, 1383813204588711938, '1+2*10-10/2=', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872396009474, 1383813204609683458, 'Let\'s go to room 209.', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872433758209, 1383813204634849282, '6\n2 8 10 1 9 10', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872475701250, 1383813204660015106, '4\n10 8 1 2', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872517644289, 1383813204680986625, '10 3 -5 2 8 0 3 5 -15 9 100\n11 6 4 8 2 6 -5 9 0 100 8 1', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872559587330, 1383813204706152450, '4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872597336066, 1383813204722929666, '2 3\n1 2 3\n4 5 6\n7 8 9', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872639279106, 1383813204756484098, '2009/03/02', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872672833538, 1383813204773261314, 'm\nprogramming', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872714776578, 1383813204798427138, 'Hello World!', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872756719618, 1383813204819398658, '4\n5 1 7 6', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872790274050, 1383813204848758786, '3\n1234 2345 3456', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872823828482, 1383813204865536002, '2\n3\n1 2 3\n0 4 5\n0 0 6\n2\n1 0\n-8 2', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872857382913, 1383813204899090434, '3 2\n6 3\n1 -8\n3 12', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872890937345, 1383813204915867650, '4\n1 7 4 1\n4 8 3 6\n1 6 1 2\n0 7 8 9', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872924491778, 1383813204932644865, 'HELLO World!', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872958046209, 1383813204957810689, 'Only the 11 CAPItaL LeTtERS are replaced.', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817872991600642, 1383813204974587906, '+-P-xf4+-1!#', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873025155073, 1383813204999753730, '4 6', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873058709506, 1383813205020725249, 'abcdef', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873092263937, 1383813205037502466, '2.718', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873121624066, 1383813205062668290, '5\n1 2 2 5 4\n2', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873150984193, 1383813205087834114, '6 2\n1 2 3 4 5 6', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873171955713, 1383813205112999938, '11 3', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873197121537, 1383813205138165761, '7\nhappy new year', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873230675969, 1383813205167525889, 'a\nhappy new year', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873260036098, 1383813205175914497, 'red yellow blue green white', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873285201922, 1383813205192691713, '3\n85 90 95', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873318756354, 1383813205209468929, 'thisistrueurtsisiht', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873348116482, 1383813205226246146, 'aZ&*?\n093 Az', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873373282306, 1383813205243023361, '11:59:40\n30', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 1, NULL);
INSERT INTO `input_example` VALUES (1383817873406836738, 1383813205251411970, '3.5 -2.7 -13.9 8.7', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873436196865, 1383813205268189186, '3\nProgramming in C\n21.5\nProgramming in VB\n18.5\nProgramming in Delphi\n25.0', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873469751298, 1383813205284966401, '3\nzhang 19850403 13912345678\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873494917122, 1383813205301743618, '3 4 5 6', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873532665858, 1383813205310132226, '10\n31001 annie 85\n31002 bonny 75\n31003 carol 70\n31004 dan 84\n31005 susan 90\n31006 paul 69\n31007 pam 60\n31008 apple 50\n31009 nancy 100\n31010 bob 78', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873557831682, 1383813205326909441, '10', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873608163329, 1383813205343686658, '500', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873633329154, 1383813205356269570, '10', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873658494978, 1383813205373046785, '2 3', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873692049410, 1383813205394018305, '0.5 12', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873713020929, 1383813205410795522, '2 3', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873750769665, 1383813205427572737, '6', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873784324097, 1383813205435961346, '10', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873813684225, 1383813205452738561, '12345', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873843044353, 1383813205469515777, '5', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873872404481, 1383813205486292994, 'Tuesday', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873905958914, 1383813205511458818, '4\nblue\nyellow\nred\ngreen', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873935319041, 1383813205528236033, 'abc\ndef', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873960484866, 1383813205545013250, 'program\nr g', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817873985650690, 1383813205561790466, 'The C Programming Language\nram', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383817874019205122, 1383813205578567682, '1 2 2 3 4 5 6 7 -1', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `input_example` VALUES (1383821508647923714, 1383821508631146498, '150', '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `input_example` VALUES (1383821508715032577, 1383821508698255362, '3 2', '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `input_example` VALUES (1383821508765364225, 1383821508748587010, '10', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821508811501570, 1383821508794724354, '10', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821508874416129, 1383821508857638914, '32 35', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821508916359170, 1383821508899581953, '6', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821508966690818, 1383821508949913601, '23', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509008633857, 1383821508991856642, '10', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509067354113, 1383821509042188289, '3', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509117685762, 1383821509100908545, '2 7', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509168017410, 1383821509151240193, '1 2 3 4', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509218349057, 1383821509201571841, '10', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509260292097, 1383821509251903489, '5 10', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509302235137, 1383821509285457922, '5', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509348372482, 1383821509331595266, '10', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509386121218, 1383821509373538305, '5', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509461618689, 1383821509444841474, '10', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509495173121, 1383821509486784513, '5\n77 54 92 73 60', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509541310465, 1383821509524533249, 'aZ &\n09 Az', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509574864897, 1383821509566476290, '90', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509616807938, 1383821509608419330, '3 -1 0 2', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509650362370, 1383821509641973761, '2048', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509683916801, 1383821509675528194, '4 2 8', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509713276929, 1383821509704888321, '65 60', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509751025666, 1383821509738442753, '2.6 2', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509780385794, 1383821509771997185, '7\n77 54 92 73 60 65 69', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509809745921, 1383821509801357313, '4 5 6 9 7 8', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509872660481, 1383821509860077570, '4E-2', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509906214913, 1383821509897826306, '58 4\n70\n50\n56\n58\n60\n-2', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509952352258, 1383821509935575042, '10', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821509985906689, 1383821509977518082, '4 -2 -123 100 0', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510027849730, 1383821510019461121, '10 31', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510065598465, 1383821510057209857, '8 7 4 3 70 5 6 101 -1', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510107541506, 1383821510099152898, '1.2', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510153678849, 1383821510132707330, '20', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510191427586, 1383821510178844674, '2 3', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510229176321, 1383821510220787714, '13', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510271119361, 1383821510254342146, '3', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510304673794, 1383821510292090881, '511 292', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510342422530, 1383821510329839618, '33 5', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510375976961, 1383821510363394050, '7', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510417920002, 1383821510401142786, '3', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383821510451474433, 1383821510438891522, '30', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `input_example` VALUES (1383825351435636738, 1383824455997886465, '5\n12 31 55 89 101\n31', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825351561465858, 1383824456366985218, '5\n35 12 8 7 3\n10', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825351603408897, 1383824456408928257, '5\n1 2 4 5 6\n3', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825351653740545, 1383824456434094081, '3\n1 3 5\n5\n2 4 6 8 10', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825351699877890, 1383824456459259906, '0.5 12', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825351766986754, 1383824456492814338, '1.0 0.4', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825351817318402, 1383824456517980162, '10\n4 -8 2 12 1 5 9 3 3 10\n0 4', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825351955730433, 1383824456543145986, '5\n1 2 4 5 6\n3', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825352022839297, 1383824456568311809, '4\nDel\nAdd 5\nAdd 4\nAdd 3\nDel\nDel\nAdd 2\nAdd 1\nAdd 0\nAdd 10\nEnd', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825352115113986, 1383824456585089026, '3\nPop\nInject 1\nPop\nEject\nPush 2\nPush 3\nEject\nInject 4\nInject 5\nInject 6\nPush 7\nPop\nEnd', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825352173834241, 1383824456610254849, '4\nPop\nPush 5\nPush 4\nPush 3\nPop\nPop\nPush 2\nPush 1\nPush 0\nPush 10\nEnd', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825352215777281, 1383824456627032066, '输入样例1：如下图\n\n![](~/98)\n\n### ', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825352266108930, 1383824456652197890, '11\n11 88 21 -1 -1 5 16 7 6 38 10\n38', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825352308051970, 1383824456677363714, 'able', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825352349995009, 1383824456702529537, '5', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383825352417103874, 1383824456727695362, '2', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169418362882, 1383829169074429953, '6\n-2 11 -4 13 -5 -2', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169468694530, 1383829169451917313, '1+2*10-10/2=', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169535803393, 1383829169510637569, '8 3\n1 2 3 4 5 6 7 8', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169581940737, 1383829169573552130, '1 3', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169628078082, 1383829169611300865, '3', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169690992642, 1383829169670021122, '15\n1 9 2 5 7 3 4 6 8 0 11 15 17 17 10', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169741324289, 1383829169724547073, '4 3 4 -5 2  6 1  -2 0\n3 5 20  -7 4  3 1', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169787461633, 1383829169770684417, 'void test()\n{\n    int i, A[10];\n    for (i=0; i<10; i++) /*/\n        A[i] = i;\n}\n.', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169854570498, 1383829169829404673, '4 10\nSSSXXSXXSX\nSSSXXSXXS\nSSSSSSSSSSXSSXXXXXXXXXXX\nSSSXXSXXX', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169909096450, 1383829169888124930, '3', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829169959428097, 1383829169942650881, '2+3*(7-4)+8/4', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170022342658, 1383829170005565441, '7\n2 3 1 5 7 6 4\n1 2 3 4 5 6 7', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170068480001, 1383829170060091393, '5\n88 70 61 96 120', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170127200257, 1383829170106228738, '5 3\n46 23 26 24 10\n5 4 3', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170198503425, 1383829170177531906, '15\n4 3 5 1 10 0 7 0 2 0 9 0 0 6 8\n11 4', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170257223681, 1383829170232057858, 'This is a test.\n\nThe word \"this\" is the word with the highest frequency.\n\nLonglonglonglongword should be cut off, so is considered as the same as longlonglonglonee.  But this_8 is different than this, and this, and this...#\nthis line should be ignored.', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170328526850, 1383829170311749634, '10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170374664193, 1383829170362081282, '11\n4 981 10 -17 0 -20 29 50 8 43 -5', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170424995842, 1383829170408218626, '9\n0 20\n1 15\n1 61\n2 10\n10 5\n10 3\n30 18\n31 25\n31 2\n3', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170475327490, 1383829170458550273, '10\n0 20 0\n0 20 0\n1 68 1\n1 12 1\n2 15 0\n2 10 0\n3 15 1\n10 12 1\n30 15 0\n62 5 1\n3 1', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170525659138, 1383829170508881921, '6 2\n3 ANN BOB JOE\n2 JIM ZOE\nJIM 0 20\nBOB 0 15\nANN 0 30\nAMY 0 2\nZOE 1 61\nJOE 3 10', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170567602177, 1383829170550824962, '6 15\n1 2 5\n1 3 3\n1 4 7\n1 5 4\n1 6 2\n2 3 4\n2 4 6\n2 5 2\n2 6 6\n3 4 6\n3 5 1\n3 6 1\n4 5 10\n4 6 8\n5 6 3', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829170609545217, 1383829170592768001, '4\n1 2 1 1\n1 3 4 0\n1 4 1 1\n2 3 3 0\n2 4 2 1\n3 4 5 0', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829923998846977, 1383829923692662786, '3', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924049178625, 1383829924032401409, '1234567890987654321123456789', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924107898882, 1383829924082733058, '8\nPAT\nPAAT\nAAPATAA\nAAPAATAAAA\nxPATx\nPT\nWhatever\nAPAAATAA', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924154036225, 1383829924137259009, '3\nJoe Math990112 89\nMike CS991301 100\nMary EE990830 95', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924195979266, 1383829924179202049, '6\n3 5 6 7 8 11', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924254699522, 1383829924229533698, '234', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924296642562, 1383829924288253954, '20', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924346974209, 1383829924321808385, '6 2\n1 2 3 4 5 6', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924401500162, 1383829924384722945, 'Hello World Here I Come', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924443443201, 1383829924426665985, '3 4 -5 2 6 1 -2 0', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924502163458, 1383829924481191937, '4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924556689409, 1383829924531523586, '13 1 2 3 4 5 6 7 8 9 10 20 16 18', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924607021058, 1383829924590243842, '5 27', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924653158401, 1383829924636381185, '3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924707684354, 1383829924690907138, '14 60 80\n10000001 64 90\n10000002 90 60\n10000011 85 80\n10000003 85 80\n10000004 80 85\n10000005 82 77\n10000006 83 76\n10000007 90 78\n10000008 75 79\n10000009 59 90\n10000010 88 45\n10000012 80 100\n10000013 90 99\n10000014 66 60', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924766404610, 1383829924732850177, '3862767 6 13530293 3', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924812541953, 1383829924795764737, '123456789050987654321 7', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924854484993, 1383829924846096385, '10\nC J\nJ B\nC B\nB B\nB C\nC C\nC B\nJ B\nB C\nJ J', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924904816641, 1383829924888039425, '6767', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924946759681, 1383829924929982465, '3 20\n18 15 10\n75 72 45', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829924984508418, 1383829924967731201, '100311', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925018062850, 1383829925009674242, '123 456 8', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925051617281, 1383829925043228674, '2 2 0 0 0 3 0 0 1 0', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925085171713, 1383829925068394498, '+1.23400E-03', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925114531841, 1383829925106143233, '00100 6 4\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925156474882, 1383829925139697665, '123 4577973', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925194223617, 1383829925177446401, '19 *', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925227778049, 1383829925219389441, '5\nJohn 2001/05/12\nTom 1814/09/06\nAnn 2121/01/30\nJames 1814/09/05\nSteve 1967/11/20', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925303275521, 1383829925252943874, '7_This_is_a_test\n_hs_s_a_es', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925336829954, 1383829925328441346, '10 8\n2 3 20 4 5 1 6 7 8 9', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925370384386, 1383829925361995777, '4\n320124198808240056\n12010X198901011234\n110108196711301866\n37070419881216001X', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925416521730, 1383829925399744513, '6\n3 65\n2 80\n1 100\n2 70\n3 40\n3 0', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925454270466, 1383829925441687554, '7+IE.\n7_This_is_a_test.', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925483630594, 1383829925475241986, '2/3 -4/2', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925517185026, 1383829925508796417, '10\n3 1 2 8 7 5 9 4 6 0\n1 2 3 7 8 5 9 4 6 0', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925559128065, 1383829925542350849, '10 a', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925596876801, 1383829925580099586, '10.16.27 14.1.28', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925634625538, 1383829925617848321, '10\n60 75 90 55 75 99 82 90 75 50\n3 75 90 88', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925672374273, 1383829925655597057, 'ppRYYGrrYBR2258\nYrR8RrY', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925705928706, 1383829925697540097, 'APPAPT', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925743677442, 1383829925726900225, '4\n3310120150912233 2 4\n3310120150912119 4 1\n3310120150912126 1 3\n3310120150912002 3 2\n2\n3 4', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925777231874, 1383829925768843266, 'This is a simple TEST.  There ARE numbers and other symbols 1&2&3...........', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925823369217, 1383829925806592002, 'redlesPayBestPATTopTeePHPereatitAPPT', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925856923650, 1383829925844340737, '4\n29\n5\nelo nov\ntam', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925894672386, 1383829925882089474, '5\n1 3 2 4 5', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925928226817, 1383829925915643906, '5\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925961781250, 1383829925949198338, '6\n3-10 99\n11-5 87\n102-1 0\n102-3 100\n11-9 89\n3-2 61', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829925991141377, 1383829925982752769, '1234567 368782971', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926024695809, 1383829926012112898, '4\n0.1 0.2 0.3 0.4', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926058250242, 1383829926041473025, '12\n37 76 20 98 76 42 53 95 60 81 58 93', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926087610370, 1383829926079221761, '2.3 3.5 5.2 0.4', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926121164801, 1383829926112776194, '[╮][╭][o][~\\][/~]  [<][>]\n [╯][╰][^][-][=][>][<][@][⊙]\n[Д][▽][_][ε][^]  ...\n4\n1 1 2 2 2\n6 8 1 5 5\n3 3 4 3 3\n2 10 3 9 3', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926163107841, 1383829926146330626, '5 0.5 10\n6 0.3 0.4 0.5 0.2 0.8 0.6\n10 0.0 0.1 0.2 0.3 0.0 0.8 0.6 0.7 0.0 0.5\n5 0.4 0.3 0.5 0.1 0.7\n11 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n11 2 2 2 1 1 0.1 1 0.1 0.1 0.1 0.1', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926196662273, 1383829926188273666, '7\n5 -3.2 aaa 9999 2.3.4 7.123 2.35', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926234411010, 1383829926226022402, '10 3\nTom 188\nMike 170\nEva 168\nTim 160\nJoe 190\nAnn 168\nBob 175\nNick 186\nAmy 160\nJohn 159', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926276354049, 1383829926259576834, '3 2 8 5', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926322491394, 1383829926305714178, 'PAT (Basic)', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926364434433, 1383829926347657217, '3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (2 b d) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (2 b c) (4 a b c d)', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926406377474, 1383829926389600258, '6\n1111\n6666\n8888\n1234\n5555\n0001\n6\n8888\n0001\n1111\n2222\n8888\n2222', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926444126210, 1383829926427348993, '10\n6 7 6 9 3 10 8 2 7 8', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926490263553, 1383829926473486337, '3 6\n2 1 3 3 4 5\n0 0 1 0 1 1\n0 1 1 0 0 1\n1 0 1 0 1 0\n1 1 0 0 1 1', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926536400897, 1383829926515429377, '7/18 13/20 12', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926574149633, 1383829926561566721, '5\n0 1\n2 0\n-1 0\n3 3\n0 -3', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926611898370, 1383829926599315457, '8\n123 899 51 998 27 33 36 12', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926653841409, 1383829926641258498, '3\n11111 22222\n33333 44444\n55555 66666\n7\n55555 44444 10000 88888 22222 11111 23333', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926695784450, 1383829926679007234, '3 5 100 150 0\n3 189 254 101 119\n150 233 151 99 100\n88 123 149 0 255', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926725144578, 1383829926716755970, 'Correct%pw 3\ncorrect%pw\nCorrect@PW\nwhatisthepassword!\nCorrect%pw\n#', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926767087618, 1383829926754504705, '8 6 200\n0 	 0 	  0 	   0	    0 	     0 	      0        0\n65280 	 65280    65280    16711479 65280    65280    65280    65280\n16711479 65280    65280    65280    16711680 65280    65280    65280\n65280 	 65280    65280    65280    65280    65280    165280   165280\n65280 	 65280 	  16777015 65280    65280    165280   65480    165280\n16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926796447745, 1383829926783864834, '9 3 2\nImgonnawin!\nPickMe\nPickMeMeMeee\nLookHere\nImgonnawin!\nTryAgainAgain\nTryAgainAgain\nImgonnawin!\nTryAgainAgain', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926830002178, 1383829926821613570, '8\n10 15 12 3 4 13 1 15', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926867750913, 1383829926855168002, '100 4\n8 0 100 2\n3 1 50 1\n5 1 200 6\n7 0 200 8', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926901305345, 1383829926892916737, '4 2\n2333 6666\nCYLL 3 1234 2345 3456\nU 4 9966 6666 8888 6666\nGG 2 2333 7777\nJJ 3 0012 6666 2333', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926943248386, 1383829926930665473, '3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (3 b d e) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (1 c) (4 a b c d)', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829926976802818, 1383829926960025601, '30527\n06203\n415', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927014551553, 1383829926997774337, '00100 9 10\n23333 10 27777\n00000 0 99999\n00100 18 12309\n68237 -6 23333\n33218 -4 00000\n48652 -2 -1\n99999 5 68237\n27777 11 48652\n12309 7 33218', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927048105986, 1383829927031328769, '8\nA-T B-F C-F D-F\nC-T B-F A-F D-F\nA-F D-F C-F B-T\nB-T A-F C-F D-F\nB-F D-T A-F C-F\nA-T C-F B-F D-F\nD-T B-F C-F A-F\nC-T A-F B-F D-F', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927081660418, 1383829927069077506, '6 50\n42 49 49 35 38 41\n36 51 50 28 -1 30\n40 36 41 33 47 49\n30 250 -25 27 45 31\n48 0 0 50 50 1234\n43 41 36 29 42 29', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927115214850, 1383829927106826242, 'C\nTTTTThhiiiis isssss a   tesssst CAaaa as', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927165546498, 1383829927152963585, '97152', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927211683842, 1383829927194906626, '6 6 7\n01234 880\na1903 199\nydjh2 200\nwehu8 300\ndx86w 220\nmissing 400\nydhfu77 99\nwehu8 55\nydjh2 98\ndx86w 88\na1903 86\n01234 39\nydhfu77 88\na1903 66\n01234 58\nwehu8 84\nydjh2 82\nmissing 99\ndx86w 81', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927249432578, 1383829927232655361, '5\n123s\nzheshi.wodepw\n1234.5678\nWanMei23333\npass*word.6', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927291375618, 1383829927282987010, '3\n0001 5 7\n1020 -1 3\n0233 0 -1', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927333318657, 1383829927316541442, '8\n3 5 8 6 2 1 4 7', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927379456002, 1383829927362678786, '1 8', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927429787650, 1383829927408816129, '10\nA57908 85 Au\nB57908 54 LanX\nA37487 60 au\nT28374 67 CMU\nT32486 24 hypu\nA66734 92 cmu\nB76378 71 AU\nA47780 45 lanx\nA72809 100 pku\nA03274 45 hypu', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927475924993, 1383829927459147778, '5 7', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927517868033, 1383829927505285121, '2017', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927551422466, 1383829927543033858, '48 3 7', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927589171201, 1383829927576588290, '5\n-2\n+3\n-4\n+5\n+4', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927622725633, 1383829927605948417, '6 3\n20001 20002\n20003 20004\n20005 20006\n20003 20001\n20005 20004\n20004 20006\n4 00001 20004 00002 20003\n5 98823 20002 20003 20006 10010\n3 12345 67890 23333', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927656280066, 1383829927639502849, '3\n92 5 233', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927689834497, 1383829927673057281, '5 3\n1001 992 0 233 6\n8 0 2018 0 2008\n36 18 0 1024 4', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927723388929, 1383829927706611713, 'This is a sample test\nto show you_How it works', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1383829927769526274, 1383829927752749057, '8 4\nB123180908127 99\nB102180908003 86\nA112180318002 98\nT107150310127 62\nA107180908108 100\nT123180908010 78\nB112160918035 88\nA107180908021 98\n1 A\n2 107\n3 180908\n2 999', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `input_example` VALUES (1391952028078469122, 1391952028053303297, '5 8', '2021-05-11 11:03:19', '2021-05-11 11:03:19', 1, NULL);

-- ----------------------------
-- Table structure for judge_result
-- ----------------------------
DROP TABLE IF EXISTS `judge_result`;
CREATE TABLE `judge_result`  (
  `judge_result_id` bigint(20) NOT NULL COMMENT '主键',
  `judge_task_id` bigint(20) NULL DEFAULT NULL COMMENT '判题任务id',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `status` int(8) NULL DEFAULT NULL COMMENT '执行状态',
  `time_used` int(8) NULL DEFAULT NULL COMMENT '消耗时间',
  `memory_used` int(8) NULL DEFAULT NULL COMMENT '消耗内存',
  `error_message` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '错误信息',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`judge_result_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of judge_result
-- ----------------------------
INSERT INTO `judge_result` VALUES (1393159791831945218, 1393159786471624706, 1392810435593379842, 1, 303, 0, '错误答案!', '2021-05-14 19:02:33', '2021-05-14 19:02:33', 0, NULL);
INSERT INTO `judge_result` VALUES (1393159837826682882, 1393159832764157953, 1392810435593379842, 1, 293, 0, '错误答案!', '2021-05-14 19:02:44', '2021-05-14 19:02:44', 0, NULL);
INSERT INTO `judge_result` VALUES (1393159922845224962, 1393159917753339905, 1392810435593379842, 0, 296, 0, '正确!', '2021-05-14 19:03:04', '2021-05-14 19:03:04', 0, NULL);
INSERT INTO `judge_result` VALUES (1393159984354693121, 1393159980651122689, 1392810435593379842, 6, NULL, NULL, '编译错误：\nE:\\final\\coding-online\\sourceFile\\1393159980651122689\\Main.java:6: 错误: 找不到符号\n       ints a = scan.nextInt();\n       ^\n  符号:   类 ints\n  位置: 类 Main\n1 个错误\n', '2021-05-14 19:03:19', '2021-05-14 19:03:19', 0, NULL);
INSERT INTO `judge_result` VALUES (1393160000737644545, 1393159997059239938, 1392810435593379842, 6, NULL, NULL, '编译错误：\nE:\\final\\coding-online\\sourceFile\\1393159997059239938\\Main.java:6: 错误: 找不到符号\n       ints a = scan.nextInt();\n       ^\n  符号:   类 ints\n  位置: 类 Main\n1 个错误\n', '2021-05-14 19:03:22', '2021-05-14 19:03:22', 0, NULL);
INSERT INTO `judge_result` VALUES (1393162379776323585, 1393162374571192321, 1392810435593379842, 3, 300, 0, '正确!', '2021-05-14 19:12:50', '2021-05-14 19:12:50', 0, NULL);
INSERT INTO `judge_result` VALUES (1393162416430346242, 1393162411241992193, 1392810435593379842, 5, 313, 0, '正确!', '2021-05-14 19:12:58', '2021-05-14 19:12:58', 0, NULL);
INSERT INTO `judge_result` VALUES (1393162448877481986, 1393162443722682370, 1392810435593379842, 5, 300, 0, '正确!', '2021-05-14 19:13:06', '2021-05-14 19:13:06', 0, NULL);
INSERT INTO `judge_result` VALUES (1393162619661152258, 1393162614447632386, 1392810435593379842, 4, 301, 0, '正确!', '2021-05-14 19:13:47', '2021-05-14 19:13:47', 0, NULL);
INSERT INTO `judge_result` VALUES (1393162650090827778, 1393162644696952833, 1392810435593379842, 4, 325, 0, '正确!', '2021-05-14 19:13:54', '2021-05-14 19:13:54', 0, NULL);
INSERT INTO `judge_result` VALUES (1393162686237339650, 1393162669141356546, 1392810435593379842, 4, 3191, 0, '正确!', '2021-05-14 19:14:03', '2021-05-14 19:14:03', 0, NULL);

-- ----------------------------
-- Table structure for judge_task
-- ----------------------------
DROP TABLE IF EXISTS `judge_task`;
CREATE TABLE `judge_task`  (
  `judge_task_id` bigint(20) NOT NULL COMMENT '主键',
  `question_id` bigint(20) NULL DEFAULT NULL COMMENT '问题id',
  `compiler_id` int(10) NULL DEFAULT NULL COMMENT '编译器类型：\'1\': \'gcc\',\'g++\', \'3\': \'java\', \'4\':\'python\'',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `source` varchar(5000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '源码',
  `time_limit` int(8) UNSIGNED NULL DEFAULT NULL COMMENT '时间限制',
  `memory_limit` int(8) NULL DEFAULT NULL COMMENT '内存限制',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`judge_task_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of judge_task
-- ----------------------------
INSERT INTO `judge_task` VALUES (1393159786471624706, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n public static void main(String[] args) {\n     Scanner scan = new Scanner(System.in);\n       int a = scan.nextInt();\n       int b = scan.nextInt();\n       int max = 0;\n       if(a > b) {\n         max = a;\n        } else\n           max = b;\n       System.out.println(\"max = \" + max);\n       scan.close();\n    }\n}', 400, 64000, '2021-05-14 19:02:31', '2021-05-14 19:02:31', 0, NULL);
INSERT INTO `judge_task` VALUES (1393159832764157953, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n public static void main(String[] args) {\n     Scanner scan = new Scanner(System.in);\n       int a = scan.nextInt();\n       int b = scan.nextInt();\n       int max = 0;\n       if(a > b) {\n         max = a;\n        } else\n           max = b;\n       System.out.println(max);\n       scan.close();\n    }\n}', 400, 64000, '2021-05-14 19:02:42', '2021-05-14 19:02:42', 0, NULL);
INSERT INTO `judge_task` VALUES (1393159917753339905, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n public static void main(String[] args) {\n     Scanner scan = new Scanner(System.in);\n       int a = scan.nextInt();\n       int b = scan.nextInt();\n       int max = 0;\n       if(a > b) {\n         max = a;\n        } else\n           max = b;\n       System.out.println(\"max=\" + max);\n       scan.close();\n    }\n}', 400, 64000, '2021-05-14 19:03:03', '2021-05-14 19:03:03', 0, NULL);
INSERT INTO `judge_task` VALUES (1393159980651122689, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n public static void main(String[] args) {\n     Scanner scan = new Scanner(System.in);\n       ints a = scan.nextInt();\n       int b = scan.nextInt();\n       int max = 0;\n       if(a > b) {\n         max = a;\n        } else\n           max = b;\n       System.out.println(\"max=\" + max);\n       scan.close();\n    }\n}', 400, 64000, '2021-05-14 19:03:18', '2021-05-14 19:03:18', 0, NULL);
INSERT INTO `judge_task` VALUES (1393159997059239938, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n public static void main(String[] args) {\n     Scanner scan = new Scanner(System.in);\n       ints a = scan.nextInt();\n       int b = scan.nextInt();\n       int max = 0;\n       if(a > b) {\n         max = a;\n        } else\n           max = b;\n       System.out.println(\"max=\" + max);\n       scan.close();\n    }\n}', 400, 64000, '2021-05-14 19:03:22', '2021-05-14 19:03:22', 0, NULL);
INSERT INTO `judge_task` VALUES (1393162374571192321, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n	public static void main(String[] args) {\n		Scanner scan = new Scanner(System.in);\n		int a = scan.nextInt();\n		int b = scan.nextInt();\n 		int max = 0;\n      	for(int i = 0; i < 1000; i++) {\n        	for(int j = 0; j < 1000; j++) {\n            	int m = i+j;\n            }\n        }\n		if(a > b) {\n			max = a;\n 		} else\n			max = b;\n		System.out.println(\"max=\" + max);\n		scan.close();\n	}\n}', 400, 64000, '2021-05-14 19:12:48', '2021-05-14 19:12:48', 0, NULL);
INSERT INTO `judge_task` VALUES (1393162411241992193, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n	public static void main(String[] args) {\n		Scanner scan = new Scanner(System.in);\n		int a = scan.nextInt();\n		int b = scan.nextInt();\n 		int max = 0;\n      	for(int i = 0; i < 10000; i++) {\n        	for(int j = 0; j < 10000; j++) {\n            	int m = i+j;\n            }\n        }\n		if(a > b) {\n			max = a;\n 		} else\n			max = b;\n		System.out.println(\"max=\" + max);\n		scan.close();\n	}\n}', 400, 64000, '2021-05-14 19:12:57', '2021-05-14 19:12:57', 0, NULL);
INSERT INTO `judge_task` VALUES (1393162443722682370, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n	public static void main(String[] args) {\n		Scanner scan = new Scanner(System.in);\n		int a = scan.nextInt();\n		int b = scan.nextInt();\n 		int max = 0;\n      	for(int i = 0; i < 100000; i++) {\n        	for(int j = 0; j < 100000; j++) {\n            	int m = i+j;\n            }\n        }\n		if(a > b) {\n			max = a;\n 		} else\n			max = b;\n		System.out.println(\"max=\" + max);\n		scan.close();\n	}\n}', 400, 64000, '2021-05-14 19:13:05', '2021-05-14 19:13:05', 0, NULL);
INSERT INTO `judge_task` VALUES (1393162614447632386, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n	public static void main(String[] args) {\n		Scanner scan = new Scanner(System.in);\n		int a = scan.nextInt();\n		int b = scan.nextInt();\n 		int max = 0;\n      	for(int i = 0; i < 1000; i++) {\n        	for(int j = 0; j < 1000; j++) {\n            	for(int k = 0; k < 1000; k++) {\n            		int m = i+j+k;\n            	}\n            }\n        }\n		if(a > b) {\n			max = a;\n 		} else\n			max = b;\n		System.out.println(\"max=\" + max);\n		scan.close();\n	}\n}', 400, 64000, '2021-05-14 19:13:46', '2021-05-14 19:13:46', 0, NULL);
INSERT INTO `judge_task` VALUES (1393162644696952833, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n	public static void main(String[] args) {\n		Scanner scan = new Scanner(System.in);\n		int a = scan.nextInt();\n		int b = scan.nextInt();\n 		int max = 0;\n      	for(int i = 0; i < 10000; i++) {\n        	for(int j = 0; j < 10000; j++) {\n            	for(int k = 0; k < 10000; k++) {\n            		int m = i+j+k;\n            	}\n            }\n        }\n		if(a > b) {\n			max = a;\n 		} else\n			max = b;\n		System.out.println(\"max=\" + max);\n		scan.close();\n	}\n}', 400, 64000, '2021-05-14 19:13:53', '2021-05-14 19:13:53', 0, NULL);
INSERT INTO `judge_task` VALUES (1393162669141356546, 1383271604087263234, 3, 1392810435593379842, 'import java.util.*;\n\npublic class Main {\n	public static void main(String[] args) {\n		Scanner scan = new Scanner(System.in);\n		int a = scan.nextInt();\n		int b = scan.nextInt();\n 		int max = 0;\n      	for(int i = 0; i < 100000; i++) {\n        	for(int j = 0; j < 100000; j++) {\n            	for(int k = 0; k < 100000; k++) {\n            		int m = i+j+k;\n            	}\n            }\n        }\n		if(a > b) {\n			max = a;\n 		} else\n			max = b;\n		System.out.println(\"max=\" + max);\n		scan.close();\n	}\n}', 400, 64000, '2021-05-14 19:13:59', '2021-05-14 19:13:59', 0, NULL);

-- ----------------------------
-- Table structure for output_example
-- ----------------------------
DROP TABLE IF EXISTS `output_example`;
CREATE TABLE `output_example`  (
  `output_example_id` bigint(20) NOT NULL COMMENT '主键',
  `question_id` bigint(20) NULL DEFAULT NULL COMMENT '问题id',
  `output_example` varchar(1280) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '输出示例',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`output_example_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of output_example
-- ----------------------------
INSERT INTO `output_example` VALUES (1383271604129206274, 1383271604087263234, 'max=8', '2021-04-17 12:10:25', '2021-04-17 12:10:25', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871389376513, 1383813203741462530, 'sum = 21', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871439708161, 1383813204123144194, 'max = 8', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871502622722, 1383813204148310018, '1 \n   2 2 \n  3 3 3 \n 4 4 4 4 \n5 5 5 5 5', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871557148673, 1383813204173475842, 'sign(10) = 1', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871607480322, 1383813204198641665, 'Sum of ( -3 7 15 ) = 19', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871662006273, 1383813204223807490, 'dist = 210.24', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871716532226, 1383813204257361921, 'Sum of ( 2 3 5 7 ) = 17', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871779446786, 1383813204282527745, 'Number of digit 2 in -21252: 3', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871838167041, 1383813204316082178, '153 is a narcissistic number\n370\n371', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817871896887298, 1383813204341248002, 'cos(-3.14) = -0.999899', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872018522113, 1383813204366413826, 'letter = 4, blank = 3, digit = 2, other = 1', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872085630977, 1383813204391579650, 'fn(2, 3) = 222\ns = 246', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872169517057, 1383813204429328385, 'No perfect number', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872215654402, 1383813204454494210, 'fib(8) = 21\nNo Fibonacci number', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872249208834, 1383813204479660034, '89 is a prime number\n90=7+83, 92=3+89, 94=5+89, 96=7+89, 98=19+79\n100=3+97,', '2021-04-19 00:21:05', '2021-04-19 00:21:05', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872328900610, 1383813204529991681, '-4321', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872370843649, 1383813204588711938, '10', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872408592385, 1383813204609683458, '5', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872450535426, 1383813204634849282, '10 2', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872484089858, 1383813204660015106, '2 1 8 10', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872534421506, 1383813204680986625, '3 5 -15 6 4 1', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872567975937, 1383813204706152450, '35', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872605724673, 1383813204722929666, '2 3 1 \n5 6 4 \n8 9 7', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872647667713, 1383813204756484098, '62', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872689610753, 1383813204773261314, 'Not Found', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872731553794, 1383813204798427138, '!dlroW olleH', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872765108225, 1383813204819398658, '7 6 5 1', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872798662658, 1383813204848758786, '3: 3 4', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872840605698, 1383813204865536002, 'YES\nNO', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872865771521, 1383813204899090434, '9\n-7\n15', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872899325954, 1383813204915867650, 'NONE', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872941268994, 1383813204932644865, '4', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872974823425, 1383813204957810689, 'Lnly the 11 XZKRtaO OeGtVIH are replaced.', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817872999989250, 1383813204974587906, '-3905', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873033543681, 1383813204999753730, 'The sum is 10.00\nThe diff is -2.00', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873067098114, 1383813205020725249, 'defabc', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873104846849, 1383813205037502466, 'The integer part is 2\nThe fractional part is 0.718', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873134206977, 1383813205062668290, 'Not found', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873159372802, 1383813205087834114, '5 6 1 2 3 4', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873180344321, 1383813205112999938, '4 10 1 7 5 2 11 9 3 6 8', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873205510146, 1383813205138165761, 'new year', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873239064577, 1383813205167525889, 'hppy new yer', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873268424706, 1383813205175914497, 'After sorted:\nblue\ngreen\nred\nwhite\nyellow', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873301979138, 1383813205192691713, 'average = 90.00\nmax = 95.00\nmin = 85.00', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873327144961, 1383813205209468929, 'No\nthisisnottrue', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873356505090, 1383813205226246146, '2 2 1 3 4', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873390059521, 1383813205243023361, '12:00:10', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 1, NULL);
INSERT INTO `output_example` VALUES (1383817873415225346, 1383813205251411970, '(-10.4, 6.0)', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873452974082, 1383813205268189186, '25.00, Programming in Delphi\n18.50, Programming in VB', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873478139906, 1383813205284966401, 'wang 19821020 +86-0571-88018448\nqian 19840619 13609876543\nzhang 19850403 13912345678', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873503305729, 1383813205301743618, '(3+4i) * (5+6i) = -9 + 38i', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873541054465, 1383813205310132226, 'The count for failed (<60): 1\nThe grades:\n31001 annie A\n31002 bonny B\n31003 carol B\n31004 dan B\n31005 susan A\n31006 paul C\n31007 pam C\n31008 apple D\n31009 nancy A\n31010 bob B', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873574608898, 1383813205326909441, '0', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873616551938, 1383813205343686658, 'count=6', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873641717761, 1383813205356269570, 'fact(0) = 1\nsum = 0', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873666883586, 1383813205373046785, '8', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873700438018, 1383813205394018305, '0.33', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873729798146, 1383813205410795522, '9', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873759158273, 1383813205427572737, '8', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873792712706, 1383813205435961346, '1010', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873822072834, 1383813205452738561, '1\n2\n3\n4\n5', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873855627266, 1383813205469515777, 'wrong input!', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873884987393, 1383813205486292994, 'wrong input!', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873918541825, 1383813205511458818, '6', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873943707649, 1383813205528236033, 'abcdef\nabcdef', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873968873474, 1383813205545013250, 'gram\ngram', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817873994039298, 1383813205561790466, '-1', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383817874027593729, 1383813205578567682, '1 3 5 7 \n2 2 4 6', '2021-04-19 00:21:06', '2021-04-19 00:21:06', 0, NULL);
INSERT INTO `output_example` VALUES (1383821508664700930, 1383821508631146498, 'Celsius = 65', '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `output_example` VALUES (1383821508731809794, 1383821508698255362, '3 + 2 = 5\n3 - 2 = 1\n3 * 2 = 6\n3 / 2 = 1', '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `output_example` VALUES (1383821508782141442, 1383821508748587010, 'f(0.0) = 0.0', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821508832473090, 1383821508794724354, 'f(-0.50) = -2.75', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821508882804738, 1383821508857638914, 'Invalid.', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821508933136386, 1383821508899581953, 'sum = 2.450000', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821508975079425, 1383821508949913601, 'sum = 2.549541', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509025411074, 1383821508991856642, 'sum = 0.819', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509075742722, 1383821509042188289, 'pow(3,0) = 1\npow(3,1) = 3\npow(3,2) = 9\npow(3,3) = 27', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509134462978, 1383821509100908545, 'result = 21', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509184794625, 1383821509151240193, 'Sum = 10; Average = 2.5', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509226737665, 1383821509201571841, 'cost = 55.50', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509268680706, 1383821509251903489, 'sum = 355.845635', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509314818049, 1383821509285457922, '0.917', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509356761089, 1383821509331595266, 'sum = 22.47', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509428064258, 1383821509373538305, '153', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509470007298, 1383821509444841474, 'sign(-98) = -1', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509511950337, 1383821509486784513, 'average = 71.2\ncount = 4', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509549699074, 1383821509524533249, 'letter = 4, blank = 3, digit = 2, other = 1', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509591642114, 1383821509566476290, 'A', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509625196545, 1383821509608419330, '[1] apple\n[2] pear\n[3] orange\n[4] grape\n[0] exit\nprice = 3.00\nprice = 2.50\nprice = 4.10\nprice = 4.10\nprice = 10.20', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509658750977, 1383821509641973761, 'Invalid year!', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509692305410, 1383821509675528194, '2->4->8', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509730054146, 1383821509704888321, 'Exceed 67%. License Revoked', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509759414274, 1383821509738442753, '34', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509792968706, 1383821509771997185, '1 0 2 3 1', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509826523138, 1383821509801357313, 'Impossible', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509881049090, 1383821509860077570, 'sum = 0.826310', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509922992129, 1383821509897826306, 'Too big\nToo small\nToo small\nGood Guess!', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821509960740865, 1383821509935575042, '2.71828180', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510002683905, 1383821509977518082, 'min = -123', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510044626946, 1383821510019461121, '7 143', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510082375681, 1383821510057209857, '116', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510124318721, 1383821510099152898, '3.3201', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510162067457, 1383821510132707330, '32.66', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510199816194, 1383821510178844674, 's = 246', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510237564930, 1383821510220787714, 'fen5:2, fen2:1, fen1:1, total:4\nfen5:1, fen2:3, fen1:2, total:6\nfen5:1, fen2:2, fen1:4, total:7\nfen5:1, fen2:1, fen1:6, total:8\ncount = 4', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510283702273, 1383821510254342146, '153\n370\n371\n407', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510321451010, 1383821510292090881, '73 2044', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510355005441, 1383821510329839618, '94.9 1.0', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510392754178, 1383821510363394050, '* \n    * * * \n  * * * * * \n* * * * * * * \n  * * * * * \n    * * * \n      *', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510430502914, 1383821510401142786, '10', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383821510459863042, 1383821510438891522, '9', '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `output_example` VALUES (1383825351511134210, 1383824455997886465, '0', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825351578243074, 1383824456366985218, 'Insertion failed.\n35 12 10 8 7 3\nLast = 5', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825351628574722, 1383824456408928257, '1 2 3 4 5 6', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825351670517762, 1383824456434094081, '1 2 3 4 5 6 8 10 \nNULL\nNULL', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825351708266497, 1383824456459259906, '0.33', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825351783763970, 1383824456492814338, '2.319680', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825351859261442, 1383824456517980162, '4 -8 12 5 9 10', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825351980896258, 1383824456543145986, '4\n1 2 4 5 6', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825352031227905, 1383824456568311809, 'Queue Empty\n5 is out\n4 is out\nQueue Full\n3 2 1 0', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825352131891201, 1383824456585089026, 'Deque is Empty!\n1 is out\nDeque is Empty!\n2 is out\nDeque is Full!\nDeque is Full!\n3 is out\nInside Deque: 4 5', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825352190611458, 1383824456610254849, 'Stack Empty\n3 is out\n4 is out\nStack Full\n0 1 2 5', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825352232554498, 1383824456627032066, 'No', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825352274497538, 1383824456652197890, 'ERROR: 41 is not found and the table is full.', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825352324829186, 1383824456677363714, 'ERROR: date is not found', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825352358383618, 1383824456702529537, 'DFS from 5: 5 1 3 0 2 4 6', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383825352425492482, 1383824456727695362, 'BFS from 2: 2 0 3 5 4 1 6', '2021-04-19 00:50:49', '2021-04-19 00:50:49', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169435140098, 1383829169074429953, '20', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169485471745, 1383829169451917313, '10', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169552580609, 1383829169510637569, '4 5 6 7 8 1 2 3', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169602912257, 1383829169573552130, '123', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169644855298, 1383829169611300865, '123\n132\n213\n231\n312\n321', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169707769857, 1383829169670021122, '3 4 6 8', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169758101505, 1383829169724547073, '15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1\n5 20 -4 4 -5 2 9 1 -2 0', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169812627457, 1383829169770684417, 'YES', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169862959106, 1383829169829404673, 'YES\nNO\nNO\nNO', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169925873666, 1383829169888124930, 'a -> c\na -> b\nc -> b\na -> c\nb -> a\nb -> c\na -> c', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829169976205314, 1383829169942650881, '2 3 7 4 - * + 8 4 / +', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170039119873, 1383829170005565441, 'Preorder: 4 1 3 2 6 5 7', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170085257218, 1383829170060091393, '88', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170143977474, 1383829170106228738, '24 23 10\n46 23 10\n26 10', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170215280641, 1383829170177531906, 'ERROR: T[12] is NULL', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170278195201, 1383829170232057858, '23\n5:this\n4:is', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170345304066, 1383829170311749634, '1: 70.00%\n2: 80.00%\n3: 90.00%\n4: 100.00%\n5: 100.00%\n6: 100.00%\n7: 100.00%\n8: 90.00%\n9: 80.00%\n10: 70.00%', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170387247105, 1383829170362081282, '-20 -17 -5 0 4 8 10 29 43 50 981', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170433384449, 1383829170408218626, '6.2 17 61\n5 3 1', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170492104706, 1383829170458550273, '15.1 35 67\n4 5 1', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170534047746, 1383829170508881921, 'JIM\nZOE\nBOB\nANN\nJOE\nAMY\n75.2', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170575990786, 1383829170550824962, 'Impossible', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829170617933826, 1383829170592768001, '3', '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924015624193, 1383829923692662786, '5', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924065955841, 1383829924032401409, 'yi san wu', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924124676097, 1383829924082733058, 'YES\nYES\nYES\nYES\nNO\nNO\nNO\nNO', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924162424833, 1383829924137259009, 'Mike CS991301\nJoe Math990112', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924212756482, 1383829924179202049, '7 6', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924271476737, 1383829924229533698, 'SS123', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924305031170, 1383829924288253954, '4', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924367945730, 1383829924321808385, '5 6 1 2 3 4', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924418277378, 1383829924384722945, 'Come I Here World Hello', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924464414722, 1383829924426665985, '12 3 -10 1 6 0', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924510552066, 1383829924481191937, 'Case #1: false\nCase #2: true\nCase #3: true\nCase #4: false', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924565078017, 1383829924531523586, 'N 11 2 N 9', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924619603969, 1383829924590243842, '11 13 17 19 23 29 31 37 41 43\n47 53 59 61 67 71 73 79 83 89\n97 101 103', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924669935618, 1383829924636381185, 'THU 14:04', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924716072962, 1383829924690907138, '12\n10000013 90 99\n10000012 80 100\n10000003 85 80\n10000011 85 80\n10000004 80 85\n10000007 90 78\n10000006 83 76\n10000005 82 77\n10000002 90 60\n10000014 66 60\n10000008 75 79\n10000001 64 90', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924783181826, 1383829924732850177, '0', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924829319170, 1383829924795764737, '17636684150141093474 3', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924871262210, 1383829924846096385, '5 3 2\n2 3 5\nB B', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924913205250, 1383829924888039425, '2222 - 2222 = 0000', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924955148289, 1383829924929982465, '94.50', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829924992897026, 1383829924967731201, '0:2\n1:3\n3:1', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925026451457, 1383829925009674242, '1103', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925060005890, 1383829925043228674, '10015558', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925093560322, 1383829925068394498, '-12000000000', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925131309058, 1383829925106143233, '00000 4 33218\n33218 3 12309\n12309 2 00100\n00100 1 99999\n99999 5 68237\n68237 6 -1', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925164863489, 1383829925139697665, '12:42:59', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925202612226, 1383829925177446401, '*****\n ***\n  *\n ***\n*****\n2', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925244555265, 1383829925219389441, '3 Tom John', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925311664129, 1383829925252943874, '7TI', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925345218561, 1383829925328441346, '8', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925391355906, 1383829925361995777, 'All passed', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925424910338, 1383829925399744513, '2 150', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925458464770, 1383829925441687554, '_hs_s_a_tst', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925500407810, 1383829925475241986, '1 2/3 + 0 = 1 2/3\n1 2/3 - 0 = 1 2/3\n1 2/3 * 0 = 0\n1 2/3 / 0 = Inf', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925533962242, 1383829925508796417, 'Merge Sort\n1 2 3 8 4 5 7 9 0 6', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925563322370, 1383829925542350849, 'aaaaaaaaaa\na        a\na        a\na        a\naaaaaaaaaa', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925609459714, 1383829925580099586, '-3.2.1', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925643014145, 1383829925617848321, '3 2 0', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925680762881, 1383829925655597057, 'No 2', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925714317313, 1383829925697540097, '2', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925760454658, 1383829925726900225, '3310120150912002 2\n3310120150912119 1', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925794009090, 1383829925768843266, 'e 7', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925831757826, 1383829925806592002, 'PATestPATestPTetPTePePee', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925869506562, 1383829925844340737, 'hel mar\nmay\n115\n13', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925903060994, 1383829925882089474, '3\n1 4 5', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925940809730, 1383829925915643906, '1 2', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829925970169858, 1383829925949198338, '11 176', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926003724290, 1383829925982752769, '3695Q8118', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926033084417, 1383829926012112898, '5.00', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926066638849, 1383829926041473025, '98 95 93\n42 37 81\n53 20 76\n58 60 76', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926100193281, 1383829926079221761, '-8.68-8.23i', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926129553410, 1383829926112776194, '╮(╯▽╰)╭\n<(@Д=)/~\no(^ε^)o\nAre you kidding me? @\\/@', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926171496450, 1383829926146330626, '40.0% 20.0%', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926213439490, 1383829926188273666, 'ERROR: aaa is not a legal number\nERROR: -9999 is not a legal number\nThe average of 0 numbers is Undefined', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926251188226, 1383829926226022402, 'Bob Tom Joe Nick\nAnn Mike Eva\nTim Amy John', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926297325569, 1383829926259576834, '330', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926335074306, 1383829926305714178, '3 4', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926381211650, 1383829926347657217, '3\n6\n5\n2 2 3 4', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926414766082, 1383829926389600258, '8888: Minion\n0001: Chocolate\n1111: Mystery Award\n2222: Are you kidding?\n8888: Checked\n2222: Are you kidding?', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926460903425, 1383829926427348993, '6', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926498652162, 1383829926473486337, '13\n11\n12', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926544789505, 1383829926515429377, '5/12 7/12', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926590926850, 1383829926561566721, '4.24', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926628675585, 1383829926599315457, '4\n3 6 9 26', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926666424321, 1383829926641258498, '5\n10000 23333 44444 55555 88888', '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926699978754, 1383829926679007234, '003 189 254 000 000\n000 233 151 099 000\n088 000 000 000 255', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926741921793, 1383829926716755970, 'Wrong password: coolman@gplt\nWrong password: coollady@gplt\nWelcome in', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926771281922, 1383829926754504705, 'Not Exist', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926804836354, 1383829926783864834, 'Keep going...', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926838390786, 1383829926821613570, '14', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926876139521, 1383829926855168002, 'Win 100!  Total = 200.\nLose 200.  Total = 0.\nGame Over.', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926918082562, 1383829926892916737, 'U: 6666 6666\nGG: 2333\nJJ: 6666 2333\n3 5', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926955831298, 1383829926930665473, '5.0\n5.0\nToo simple', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829926989385730, 1383829926960025601, '7201', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927022940162, 1383829926997774337, '33218 -4 68237\n68237 -6 48652\n48652 -2 12309\n12309 7 00000\n00000 0 99999\n99999 5 23333\n23333 10 00100\n00100 18 27777\n27777 11 -1', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927056494593, 1383829927031328769, '13224143', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927090049025, 1383829927069077506, '42\n33\n41\n31\n37\n39', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927131992066, 1383829927106826242, 'TTTTThhiiiis isssss a   tesssst CAaaa asZZZZZZZZZZ', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927173935106, 1383829927152963585, '196 + 691 = 887\n887 + 788 = 1675\n1675 + 5761 = 7436\n7436 + 6347 = 13783\n13783 + 38731 = 52514\n52514 + 41525 = 94039\n94039 + 93049 = 187088\n187088 + 880781 = 1067869\n1067869 + 9687601 = 10755470\n10755470 + 07455701 = 18211171\nNot found in 10 iterations.', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927220072449, 1383829927194906626, 'missing 400 -1 99 99\nydjh2 200 98 82 88\ndx86w 220 88 81 84\nwehu8 300 55 84 84', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927262015490, 1383829927232655361, 'Your password is tai duan le.\nYour password needs shu zi.\nYour password needs zi mu.\nYour password is wan mei.\nYour password is tai luan le.', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927308152834, 1383829927282987010, '0233 0001', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927350095873, 1383829927316541442, '5 2\n3 3\n2 2', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927392038913, 1383829927362678786, '1123123111', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927438176258, 1383829927408816129, '5\n1 cmu 192 2\n1 au 192 3\n3 pku 100 1\n4 hypu 81 2\n4 lanx 81 2', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927488507906, 1383829927459147778, '53', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927526256641, 1383829927505285121, '1480', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927559811073, 1383829927543033858, 'No Solution', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927597559809, 1383829927576588290, 'No Solution', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927631114241, 1383829927605948417, 'No\nYes\nYes', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927664668673, 1383829927639502849, '3 25392\n1 25\nNo', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927698223106, 1383829927673057281, '2018\n3 5', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927731777537, 1383829927706611713, 'This ampletowyu_Hrk', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1383829927777914882, 1383829927752749057, 'Case 1: 1 A\nA107180908108 100\nA107180908021 98\nA112180318002 98\nCase 2: 2 107\n3 260\nCase 3: 3 180908\n107 2\n123 2\n102 1\nCase 4: 2 999\nNA', '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `output_example` VALUES (1391952028086857729, 1391952028053303297, '-3', '2021-05-11 11:03:19', '2021-05-11 11:03:19', 1, NULL);

-- ----------------------------
-- Table structure for persistent_logins
-- ----------------------------
DROP TABLE IF EXISTS `persistent_logins`;
CREATE TABLE `persistent_logins`  (
  `username` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户名',
  `series` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '主键',
  `token` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'token',
  `last_used` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '上次使用时间',
  PRIMARY KEY (`series`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of persistent_logins
-- ----------------------------
INSERT INTO `persistent_logins` VALUES ('往后余生', 'aKVmzxTSU+/8znMH13KhJQ==', 'nmxKgQ0ZSORAyneF2EhBmQ==', '2021-05-14 19:09:26');
INSERT INTO `persistent_logins` VALUES ('admin', 'Ldbyx1E5nLnPYCcDcixefQ==', 'uS81i1VyBsV0PN7ArFgABQ==', '2021-05-15 11:11:03');

-- ----------------------------
-- Table structure for question
-- ----------------------------
DROP TABLE IF EXISTS `question`;
CREATE TABLE `question`  (
  `question_id` bigint(20) NOT NULL COMMENT '主键',
  `question_order` bigint(20) NULL DEFAULT NULL COMMENT '问题序号',
  `question_title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '问题名称',
  `question_description` varchar(9999) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '问题描述序号',
  `question_type_id` bigint(20) NULL DEFAULT NULL COMMENT '问题类型id',
  `question_difficulty` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '问题难度',
  `input_description` varchar(1280) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '输入参数描述',
  `output_description` varchar(1280) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '输出参数描述',
  `time_limit` int(8) UNSIGNED NULL DEFAULT NULL COMMENT '时间限制',
  `memory_limit` int(8) NULL DEFAULT NULL COMMENT '内存限制',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`question_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of question
-- ----------------------------
INSERT INTO `question` VALUES (1383271604087263234, 1, '找两个数中最大者', '<p><span style=\"color: rgb(64, 64, 64); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Lantinghei SC&quot;, &quot;Helvetica Neue&quot;, &quot;Microsoft Yahei&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Sans Serif&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;\">本题要求从接盘接收两个整数a和b，输出其中较大的数。</span><br></p>', 1, '简单', '两个整数，之间用空格隔开', '输出“max={较大的数}”', 400, 64000, '2021-04-17 12:10:25', '2021-04-17 12:10:25', 0, NULL);
INSERT INTO `question` VALUES (1383813203741462530, 2, '求m到n之和', '本题要求实现一个计算$$m$$~$$n$$（$$m<n$$）之间所有整数的和的简单函数。\n\n### 函数接口定义：\n```c++\nint sum( int m, int n );\n```\n\n其中`m`和`n`是用户传入的参数，保证有$$m<n$$。函数返回的是$$m$$~$$n$$之间所有整数的和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint sum(int m, int n);\n\nint main()\n{    \n    int m, n;\n\n    scanf(\"%d %d\", &m, &n);\n    printf(\"sum = %d\\n\", sum(m, n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-5 8\n```\n\n### 输出样例：\n```out\nsum = 21\n```', 1, '简单', '-5 8', 'sum = 21', 400, 65536, '2021-04-19 00:02:32', '2021-04-19 00:02:32', 0, NULL);
INSERT INTO `question` VALUES (1383813204123144194, 3, '找两个数中最大者', '本题要求对两个整数a和b，输出其中较大的数。\n\n### 函数接口定义：\n```c++\nint max( int a, int b );\n```\n\n其中`a`和`b`是用户传入的参数，函数返回的是两者中较大的数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint max( int a, int b );\n\nint main()\n{    \n    int a, b;\n\n    scanf(\"%d %d\", &a, &b);\n    printf(\"max = %d\\n\", max(a, b));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-5 8\n```\n\n### 输出样例：\n```out\nmax = 8\n```', 1, '简单', '-5 8', 'max = 8', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204148310018, 4, '数字金字塔', '本题要求实现函数输出n行数字金字塔。\n\n### 函数接口定义：\n```c++\nvoid pyramid( int n );\n```\n\n其中`n`是用户传入的参数，为[1, 9]的正整数。要求函数按照如样例所示的格式打印出`n`行数字金字塔。注\n\n意每个数字后面跟一个空格。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid pyramid( int n );\n\nint main()\n{    \n    int n;\n\n    scanf(\"%d\", &n);\n    pyramid(n);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n5\n```\n\n### 输出样例：\n```out\n    1 \n   2 2 \n  3 3 3 \n 4 4 4 4 \n5 5 5 5 5 \n```', 1, '中等', '5', '1 \n   2 2 \n  3 3 3 \n 4 4 4 4 \n5 5 5 5 5', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204173475842, 5, '符号函数', '本题要求实现符号函数sign(x)。\n\n### 函数接口定义：\n```c++\nint sign( int x );\n```\n其中`x`是用户传入的整型参数。符号函数的定义为：若`x`大于0，`sign(x)` = $$1$$；若`x`等于0，`sign(x)` = $$0$$；否则，`sign(x)` = $$-1$$。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint sign( int x );\n\nint main()\n{\n    int x;\n\n    scanf(\"%d\", &x);\n    printf(\"sign(%d) = %d\\n\", x, sign(x));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n```\n\n### 输出样例：\n```out\nsign(10) = 1\n```', 1, '简单', '10', 'sign(10) = 1', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204198641665, 6, '使用函数求奇数和', '本题要求实现一个函数，计算N个整数中所有奇数的和，同时实现一个判断奇偶性的函数。\n\n### 函数接口定义：\n```c++\nint even( int n );\nint OddSum( int List[], int N );\n```\n其中函数`even`将根据用户传入的参数`n`的奇偶性返回相应值：当`n`为偶数时返回1，否则返回0。函数`OddSum`负责计算并返回传入的`N`个整数`List[]`中所有奇数的和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n#define MAXN 10\n\nint even( int n );\nint OddSum( int List[], int N );\n\nint main()\n{    \n    int List[MAXN], N, i;\n\n    scanf(\"%d\", &N);\n    printf(\"Sum of ( \");\n    for ( i=0; i<N; i++ ) {\n        scanf(\"%d\", &List[i]);\n        if ( even(List[i])==0 )\n            printf(\"%d \", List[i]);\n    }\n    printf(\") = %d\\n\", OddSum(List, N));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n6\n2 -3 7 88 0 15\n```\n\n### 输出样例：\n```out\nSum of ( -3 7 15 ) = 19\n```', 1, '中等', '6\n2 -3 7 88 0 15', 'Sum of ( -3 7 15 ) = 19', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204223807490, 7, '使用函数计算两点间的距离', '本题要求实现一个函数，对给定平面任意两点坐标$$(x_1, y_1)$$和$$(x_2, y_2)$$，求这两点之间的距离。\n\n### 函数接口定义：\n```c++\ndouble dist( double x1, double y1, double x2, double y2 );\n```\n其中用户传入的参数为平面上两个点的坐标(`x1`, `y1`)和(`x2`, `y2`)，函数`dist`应返回两点间的距离。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\ndouble dist( double x1, double y1, double x2, double y2 );\n\nint main()\n{    \n    double x1, y1, x2, y2;\n\n    scanf(\"%lf %lf %lf %lf\", &x1, &y1, &x2, &y2);\n    printf(\"dist = %.2f\\n\", dist(x1, y1, x2, y2));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10 10 200 100\n```\n\n### 输出样例：\n```out\ndist = 210.24\n```', 1, '简单', '10 10 200 100', 'dist = 210.24', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204257361921, 8, '使用函数求素数和', '本题要求实现一个判断素数的简单函数、以及利用该函数计算给定区间内素数和的函数。\n\n素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。\n\n### 函数接口定义：\n```c++\nint prime( int p );\nint PrimeSum( int m, int n );\n```\n其中函数`prime`当用户传入参数`p`为素数时返回1，否则返回0；函数`PrimeSum`返回区间[`m`, `n`]内所有素数的和。题目保证用户传入的参数`m`$$\\le$$`n`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint prime( int p );\nint PrimeSum( int m, int n );\n    \nint main()\n{\n    int m, n, p;\n\n    scanf(\"%d %d\", &m, &n);\n    printf(\"Sum of ( \");\n    for( p=m; p<=n; p++ ) {\n        if( prime(p) != 0 )\n            printf(\"%d \", p);\n    }\n    printf(\") = %d\\n\", PrimeSum(m, n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-1 10\n```\n\n### 输出样例：\n```out\nSum of ( 2 3 5 7 ) = 17\n```', 1, '困难', '-1 10', 'Sum of ( 2 3 5 7 ) = 17', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204282527745, 9, '使用函数统计指定数字的个数', '本题要求实现一个统计整数中指定数字的个数的简单函数。\n\n### 函数接口定义：\n```c++\nint CountDigit( int number, int digit );\n```\n其中`number`是不超过长整型的整数，`digit`为[0, 9]区间内的整数。函数`CountDigit`应返回`number`中`digit`出现的次数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint CountDigit( int number, int digit );\n    \nint main()\n{\n    int number, digit;\n\n    scanf(\"%d %d\", &number, &digit);\n    printf(\"Number of digit %d in %d: %d\\n\", digit, number, CountDigit(number, digit));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-21252 2\n```\n\n### 输出样例：\n```out\nNumber of digit 2 in -21252: 3\n```', 1, '中等', '-21252 2', 'Number of digit 2 in -21252: 3', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204316082178, 10, '使用函数输出水仙花数', '水仙花数是指一个$$N$$位正整数（$$N\\ge 3$$），它的每个位上的数字的$$N$$次幂之和等于它本身。例如：$$153 = 1^3 + 5^3+ 3^3$$。 本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间$$(m,n)$$内所有的水仙花数。\n\n### 函数接口定义：\n```c++\nint narcissistic( int number );\nvoid PrintN( int m, int n );\n```\n函数`narcissistic`判断`number`是否为水仙花数，是则返回1，否则返回0。\n\n函数`PrintN`则打印开区间(`m`, `n`)内所有的水仙花数，每个数字占一行。题目保证100$$\\le$$`m`$$\\le$$`n`$$\\le$$10000。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint narcissistic( int number );\nvoid PrintN( int m, int n );\n    \nint main()\n{\n    int m, n;\n  \n    scanf(\"%d %d\", &m, &n);\n    if ( narcissistic(m) ) printf(\"%d is a narcissistic number\\n\", m);\n    PrintN(m, n);\n    if ( narcissistic(n) ) printf(\"%d is a narcissistic number\\n\", n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n153 400\n```\n\n### 输出样例：\n```out\n153 is a narcissistic number\n370\n371\n```', 1, '困难', '153 400', '153 is a narcissistic number\n370\n371', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204341248002, 11, '使用函数求余弦函数的近似值', '本题要求实现一个函数，用下列公式求$$\\cos (x)$$的近似值，精确到最后一项的绝对值小于$$e$$：\n\n$$\\cos (x) = x^0 / 0! - x^2 / 2! + x^4 / 4! - x^6 / 6! + \\cdots$$\n\n### 函数接口定义：\n```c++\ndouble funcos( double e, double x );\n```\n其中用户传入的参数为误差上限`e`和自变量`x`；函数`funcos`应返回用给定公式计算出来、并且满足误差要求的$$\\cos (x)$$的近似值。输入输出均在双精度范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\ndouble funcos( double e, double x );\n\nint main()\n{    \n    double e, x;\n\n    scanf(\"%lf %lf\", &e, &x);\n    printf(\"cos(%.2f) = %.6f\\n\", x, funcos(e, x));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n0.01 -3.14\n```\n\n### 输出样例：\n```out\ncos(-3.14) = -0.999899\n```', 1, '中等', '0.01 -3.14', 'cos(-3.14) = -0.999899', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204366413826, 12, '分类统计字符个数', '本题要求实现一个函数，统计给定字符串中英文字母、空格或回车、数字字符和其他字符的个数。\n\n### 函数接口定义：\n```c++\nvoid StringCount( char s[] );\n```\n其中 `char s[]` 是用户传入的字符串。函数`StringCount`须在一行内按照\n```\nletter = 英文字母个数, blank = 空格或回车个数, digit = 数字字符个数, other = 其他字符个数\n```\n的格式输出。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXS 15\n\nvoid StringCount( char s[] );\nvoid ReadString( char s[] ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char s[MAXS];\n\n    ReadString(s);\n    StringCount(s);\n\n    return 0;\n}\n\n/* Your function will be put here */\n```\n\n### 输入样例：\n```in\naZ &\n09 Az\n```\n\n### 输出样例：\n```out\nletter = 4, blank = 3, digit = 2, other = 1\n```', 1, '中等', 'aZ &\n09 Az', 'letter = 4, blank = 3, digit = 2, other = 1', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204391579650, 13, '使用函数求特殊a串数列和', '给定两个均不超过9的正整数$$a$$和$$n$$，要求编写函数求$$a+aa+aaa++\\cdots +aa\\cdots a$$（$$n$$个$$a$$）之和。\n\n### 函数接口定义：\n```c++\nint fn( int a, int n );\nint SumA( int a, int n );\n```\n其中函数`fn`须返回的是`n`个`a`组成的数字；`SumA`返回要求的和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint fn( int a, int n );\nint SumA( int a, int n );\n	\nint main()\n{\n    int a, n;\n\n    scanf(\"%d %d\", &a, &n);\n    printf(\"fn(%d, %d) = %d\\n\", a, n, fn(a,n));		\n    printf(\"s = %d\\n\", SumA(a,n));	\n	\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\nfn(2, 3) = 222\ns = 246\n```', 1, '困难', '2 3', 'fn(2, 3) = 222\ns = 246', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204429328385, 14, '使用函数输出指定范围内的完数', '本题要求实现一个计算整数因子和的简单函数，并利用其实现另一个函数，输出两正整数$$m$$和$$n$$（$$0<m\\le n\\le 10000$$）之间的所有完数。所谓完数就是该数恰好等于除自身外的因子之和。例如：6=1+2+3，其中1、2、3为6的因子。\n\n### 函数接口定义：\n```c++\nint factorsum( int number );\nvoid PrintPN( int m, int n );\n```\n其中函数`factorsum`须返回`int number`的因子和；函数`PrintPN`要逐行输出给定范围[`m`, `n`]内每个完数的因子累加形式的分解式，每个完数占一行，格式为“完数 = 因子1 + 因子2 + ... + 因子k”，其中完数和因子均按递增顺序给出。如果给定区间内没有完数，则输出一行“No perfect number”。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint factorsum( int number );\nvoid PrintPN( int m, int n );\n	\nint main()\n{\n    int m, n;\n\n    scanf(\"%d %d\", &m, &n);\n    if ( factorsum(m) == m ) printf(\"%d is a perfect number\\n\", m);\n    if ( factorsum(n) == n ) printf(\"%d is a perfect number\\n\", n);\n    PrintPN(m, n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n6 30\n```\n\n### 输出样例1：\n```out\n6 is a perfect number\n6 = 1 + 2 + 3\n28 = 1 + 2 + 4 + 7 + 14\n```\n\n### 输入样例2：\n```in\n7 25\n```\n\n### 输出样例2：\n```out\nNo perfect number\n```\n\n**鸣谢杭州电子科技大学网络空间安全学院李丰同学修正数据！**\n', 1, '困难', '6 30', 'No perfect number', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204454494210, 15, '使用函数输出指定范围内的Fibonacci数', '本题要求实现一个计算Fibonacci数的简单函数，并利用其实现另一个函数，输出两正整数$$m$$和$$n$$（$$0<m\\le n\\le 10000$$）之间的所有Fibonacci数。所谓Fibonacci数列就是满足任一项数字是前两项的和（最开始两项均定义为1）的数列。\n\n### 函数接口定义：\n```c++\nint fib( int n );\nvoid PrintFN( int m, int n );\n```\n其中函数`fib`须返回第`n`项Fibonacci数；函数`PrintFN`要在一行中输出给定范围[`m`, `n`]内的所有Fibonacci数，相邻数字间有一个空格，行末不得有多余空格。如果给定区间内没有Fibonacci数，则输出一行“No Fibonacci number”。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint fib( int n );\nvoid PrintFN( int m, int n );\n	\nint main()\n{\n    int m, n, t;\n\n    scanf(\"%d %d %d\", &m, &n, &t);\n    printf(\"fib(%d) = %d\\n\", t, fib(t));\n    PrintFN(m, n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n20 100 7\n```\n\n### 输出样例1：\n```out\nfib(7) = 13\n21 34 55 89\n```\n\n### 输入样例2：\n```\n2000 2500 8\n```\n\n### 输出样例2：\n```\nfib(8) = 21\nNo Fibonacci number\n```', 1, '困难', '20 100 7', 'fib(8) = 21\nNo Fibonacci number', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204479660034, 16, '使用函数验证哥德巴赫猜想', '本题要求实现一个判断素数的简单函数，并利用该函数验证哥德巴赫猜想：任何一个不小于6的偶数均可表示为两个奇素数之和。素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。\n\n### 函数接口定义：\n```c++\nint prime( int p );\nvoid Goldbach( int n );\n```\n其中函数`prime`当用户传入参数`p`为素数时返回1，否则返回0；函数`Goldbach`按照格式“`n`=$$p+q$$”输出`n`的素数分解，其中$$p\\le q$$均为素数。又因为这样的分解不唯一（例如24可以分解为5+19，还可以分解为7+17），要求必须输出所有解中$$p$$最小的解。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint prime( int p );\nvoid Goldbach( int n );\n    \nint main()\n{\n    int m, n, i, cnt;\n\n    scanf(\"%d %d\", &m, &n);\n    if ( prime(m) != 0 ) printf(\"%d is a prime number\\n\", m);\n    if ( m < 6 ) m = 6;\n    if ( m%2 ) m++;\n    cnt = 0;\n    for( i=m; i<=n; i+=2 ) {\n        Goldbach(i);\n        cnt++;\n        if ( cnt%5 ) printf(\", \");\n        else printf(\"\\n\");\n    }\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n89 100\n```\n\n### 输出样例：\n```out\n89 is a prime number\n90=7+83, 92=3+89, 94=5+89, 96=7+89, 98=19+79\n100=3+97, \n```', 1, '困难', '89 100', '89 is a prime number\n90=7+83, 92=3+89, 94=5+89, 96=7+89, 98=19+79\n100=3+97,', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204529991681, 17, '使用函数输出一个整数的逆序数', '本题要求实现一个求整数的逆序数的简单函数。\n\n### 函数接口定义：\n```c++\nint reverse( int number );\n```\n其中函数`reverse`须返回用户传入的整型`number`的逆序数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint reverse( int number );\n    \nint main()\n{\n    int n;\n\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", reverse(n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n-12340\n```\n\n### 输出样例：\n```out\n-4321\n```', 1, '困难', '-12340', '-4321', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204588711938, 18, '简单计算器', '模拟简单运算器的工作。假设计算器只能进行加减乘除运算，运算数和结果都是整数，四种运算符的优先级相同，按从左到右的顺序计算。\n\n### 输入格式:\n\n输入在一行中给出一个四则运算算式，没有空格，且至少有一个操作数。遇等号”=”说明输入结束。\n\n### 输出格式:\n\n在一行中输出算式的运算结果，或者如果除法分母为0或有非法运算符，则输出错误信息“ERROR”。\n\n### 输入样例:\n```in\n1+2*10-10/2=\n```\n\n### 输出样例:\n```out\n10\n```', 1, '困难', '1+2*10-10/2=', '10', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204609683458, 19, '统计一行文本的单词个数', '本题目要求编写程序统计一行字符中单词的个数。所谓“单词”是指连续不含空格的字符串，各单词之间用空格分隔，空格数可以是多个。\n\n### 输入格式:\n\n输入给出一行字符。 \n\n### 输出格式:\n\n在一行中输出单词个数。 \n\n### 输入样例:\n```in\nLet\'s go to room 209.\n```\n\n### 输出样例:\n```out\n5\n```', 1, '中等', 'Let\'s go to room 209.', '5', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204634849282, 20, '求最大值及其下标', '本题要求编写程序，找出给定的$$n$$个数中的最大值及其对应的最小下标（下标从0开始）。\n\n### 输入格式:\n\n输入在第一行中给出一个正整数$$n$$（$$1<n\\le 10$$）。第二行输入$$n$$个整数，用空格分开。\n\n### 输出格式:\n\n在一行中输出最大值及最大值的最小下标，中间用一个空格分开。\n\n### 输入样例:\n```in\n6\n2 8 10 1 9 10\n```\n\n### 输出样例:\n```out\n10 2\n```', 1, '困难', '6\n2 8 10 1 9 10', '10 2', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204660015106, 21, '将数组中的数逆序存放', '本题要求编写程序，将给定的$$n$$个整数存入数组中，将数组中的这$$n$$个数逆序存放，再按顺序输出数组中的元素。\n\n### 输入格式:\n\n输入在第一行中给出一个正整数$$n$$（$$1\\le n\\le 10$$）。第二行输入$$n$$个整数，用空格分开。\n\n### 输出格式:\n\n在一行中输出这$$n$$个整数的处理结果，相邻数字中间用一个空格分开，行末不得有多余空格。\n\n### 输入样例:\n```in\n4\n10 8 1 2\n```\n\n### 输出样例:\n```out\n2 1 8 10\n```', 1, '困难', '4\n10 8 1 2', '2 1 8 10', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204680986625, 22, '找出不是两个数组共有的元素', '给定两个整型数组，本题要求找出不是两者共有的元素。\n\n### 输入格式:\n\n输入分别在两行中给出两个整型数组，每行先给出正整数$$N$$（$$\\le 20$$），随后是$$N$$个整数，其间以空格分隔。 \n\n### 输出格式:\n\n在一行中按照数字给出的顺序输出不是两数组共有的元素，数字间以空格分隔，但行末不得有多余的空格。题目保证至少存在一个这样的数字。同一数字不重复输出。 \n\n### 输入样例:\n```in\n10 3 -5 2 8 0 3 5 -15 9 100\n11 6 4 8 2 6 -5 9 0 100 8 1\n```\n\n### 输出样例:\n```out\n3 5 -15 6 4 1\n```', 1, '困难', '10 3 -5 2 8 0 3 5 -15 9 100\n11 6 4 8 2 6 -5 9 0 100 8 1', '3 5 -15 6 4 1', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204706152450, 23, '矩阵运算', '给定一个$$n\\times n$$的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。\n### 输入格式:\n\n输入第一行给出正整数$$n$$（$$1<n\\le 10$$）；随后$$n$$行，每行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式:\n\n在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。 \n\n### 输入样例:\n```in\n4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1\n```\n\n### 输出样例:\n```out\n35\n```', 1, '困难', '4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1', '35', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204722929666, 24, '方阵循环右移', '本题要求编写程序，将给定$$n\\times n$$方阵中的每个元素循环向右移$$m$$个位置，即将第$$0$$、$$1$$、$$\\cdots$$、$$n-1$$列变换为第$$n-m$$、$$n-m+1$$、$$\\cdots$$、$$n-1$$、$$0$$、$$1$$、$$\\cdots$$、$$n-m-1$$列。\n\n### 输入格式：\n\n输入第一行给出两个正整数$$m$$和$$n$$（$$1\\le n\\le 6$$）。接下来一共$$n$$行，每行$$n$$个整数，表示一个$$n$$阶的方阵。\n\n### 输出格式：\n\n按照输入格式输出移动后的方阵：即输出$$n$$行，每行$$n$$个整数，每个整数后输出一个空格。\n\n### 输入样例：\n```in\n2 3\n1 2 3\n4 5 6\n7 8 9\n```\n\n### 输出样例：\n```out\n2 3 1 \n5 6 4 \n8 9 7 \n```', 1, '困难', '2 3\n1 2 3\n4 5 6\n7 8 9', '2 3 1 \n5 6 4 \n8 9 7', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204756484098, 25, '计算天数', '本题要求编写程序计算某年某月某日是该年中的第几天。\n\n### 输入格式:\n\n输入在一行中按照格式“yyyy/mm/dd”（即“年/月/日”）给出日期。注意：闰年的判别条件是该年年份能被4整除但不能被100整除、或者能被400整除。闰年的2月有29天。 \n\n### 输出格式:\n\n在一行输出日期是该年中的第几天。\n\n### 输入样例1:\n```in\n2009/03/02\n```\n\n### 输出样例1:\n```out\n61\n```\n\n### 输入样例2:\n```\n2000/03/02\n```\n\n### 输出样例2:\n```\n62\n```\n\n**鸣谢湖北汽车工业学院袁科老师补充数据**', 1, '中等', '2009/03/02', '62', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204773261314, 26, '查找指定字符', '本题要求编写程序，从给定字符串中查找某指定的字符。\n\n### 输入格式：\n\n输入的第一行是一个待查找的字符。第二行是一个以回车结束的非空字符串（不超过80个字符）。\n\n### 输出格式：\n\n如果找到，在一行内按照格式“index = 下标”输出该字符在字符串中所对应的最大下标（下标从0开始）；否则输出\"Not Found\"。\n\n### 输入样例1：\n```in\nm\nprogramming\n```\n\n### 输出样例1：\n```out\nindex = 7\n```\n\n### 输入样例2：\n```\na\n1234\n```\n\n### 输出样例2：\n```\nNot Found\n```', 1, '中等', 'm\nprogramming', 'Not Found', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204798427138, 27, '字符串逆序', '输入一个字符串，对该字符串进行逆序，输出逆序后的字符串。 \n\n### 输入格式：\n\n输入在一行中给出一个不超过80个字符长度的、以回车结束的非空字符串。 \n\n### 输出格式：\n\n在一行中输出逆序后的字符串。 \n\n### 输入样例：\n```in\nHello World!\n```\n\n### 输出样例：\n```out\n!dlroW olleH\n```', 1, '中等', 'Hello World!', '!dlroW olleH', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204819398658, 28, '选择法排序', '本题要求将给定的$$n$$个整数从大到小排序后输出。\n\n### 输入格式：\n\n输入第一行给出一个不超过10的正整数$$n$$。第二行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中输出从大到小有序的数列，相邻数字间有一个空格，行末不得有多余空格。\n\n### 输入样例：\n```in\n4\n5 1 7 6\n```\n\n### 输出样例：\n```out\n7 6 5 1\n```', 1, '困难', '4\n5 1 7 6', '7 6 5 1', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204848758786, 29, '求一批整数中出现最多的个位数字', '给定一批整数，分析每个整数的每一位数字，求出现次数最多的个位数字。例如给定3个整数1234、2345、3456，其中出现最多次数的数字是3和4，均出现了3次。\n\n### 输入格式：\n\n输入在第1行中给出正整数$$N$$（$$\\le 1000$$），在第二行中给出$$N$$个不超过整型范围的非负整数，数字间以空格分隔。 \n\n### 输出格式：\n\n在一行中按格式“M: n1 n2 ...”输出，其中M是最大次数，n1、n2、……为出现次数最多的个位数字，按从小到大的顺序排列。数字间以空格分隔，但末尾不得有多余空格。\n\n### 输入样例：\n```in\n3\n1234 2345 3456\n```\n\n### 输出样例：\n```out\n3: 3 4\n```', 1, '困难', '3\n1234 2345 3456', '3: 3 4', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204865536002, 30, '判断上三角矩阵', '上三角矩阵指主对角线以下的元素都为0的矩阵；主对角线为从矩阵的左上角至右下角的连线。\n\n本题要求编写程序，判断一个给定的方阵是否上三角矩阵。\n\n### 输入格式：\n\n输入第一行给出一个正整数$$T$$，为待测矩阵的个数。接下来给出$$T$$个矩阵的信息：每个矩阵信息的第一行给出一个不超过10的正整数$$n$$。随后$$n$$行，每行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n每个矩阵的判断结果占一行。如果输入的矩阵是上三角矩阵，输出“YES”，否则输出“NO”。\n\n### 输入样例：\n```in\n2\n3\n1 2 3\n0 4 5\n0 0 6\n2\n1 0\n-8 2\n```\n\n### 输出样例：\n```out\nYES\nNO\n```', 1, '中等', '2\n3\n1 2 3\n0 4 5\n0 0 6\n2\n1 0\n-8 2', 'YES\nNO', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204899090434, 31, '求矩阵各行元素之和', '本题要求编写程序，求一个给定的$$m\\times n$$矩阵各行元素之和。\n\n### 输入格式：\n\n输入第一行给出两个正整数$$m$$和$$n$$（$$1\\le m,n\\le 6$$）。随后$$m$$行，每行给出$$n$$个整数，其间\n\n以空格分隔。\n\n### 输出格式：\n\n每行输出对应矩阵行元素之和。\n\n### 输入样例：\n```in\n3 2\n6 3\n1 -8\n3 12\n```\n\n### 输出样例：\n```out\n9\n-7\n15\n```', 1, '中等', '3 2\n6 3\n1 -8\n3 12', '9\n-7\n15', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204915867650, 32, '找鞍点', '一个矩阵元素的“鞍点”是指该位置上的元素值在该行上最大、在该列上最小。\n\n本题要求编写程序，求一个给定的$$n$$阶方阵的鞍点。\n\n### 输入格式：\n\n输入第一行给出一个正整数$$n$$（$$1\\le n\\le 6$$）。随后$$n$$行，每行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n输出在一行中按照“行下标 列下标”（下标从0开始）的格式输出鞍点的位置。如果鞍点不存在，则输出“NONE”。题目保证给出的矩阵至多存在一个鞍点。\n\n### 输入样例1：\n```in\n4\n1 7 4 1\n4 8 3 6\n1 6 1 2\n0 7 8 9\n```\n\n### 输出样例1：\n```out\n2 1\n```\n\n### 输入样例2：\n```\n2\n1 7\n4 1\n```\n\n### 输出样例2：\n```\nNONE\n```', 1, '困难', '4\n1 7 4 1\n4 8 3 6\n1 6 1 2\n0 7 8 9', 'NONE', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204932644865, 33, '统计大写辅音字母', '英文辅音字母是除`A`、`E`、`I`、`O`、`U`以外的字母。本题要求编写程序，统计给定字符串中<b>大写</b>辅音字母的个数。\n\n### 输入格式：\n\n输入在一行中给出一个不超过80个字符、并以回车结束的字符串。\n\n### 输出格式：\n\n输出在一行中给出字符串中大写辅音字母的个数。\n\n### 输入样例：\n```in\nHELLO World!\n```\n\n### 输出样例：\n```out\n4\n```', 1, '中等', 'HELLO World!', '4', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204957810689, 34, '字符串替换', '本题要求编写程序，将给定字符串中的大写英文字母按以下对应规则替换：\n\n| 原字母 | 对应字母 | \n|:-----: |:--------:| \n| A | Z | \n| B | Y |\n| C | X |\n| D | W |\n|… |… |\n| X | C |\n| Y | B |\n| Z | A |\n\n### 输入格式：\n\n输入在一行中给出一个不超过80个字符、并以回车结束的字符串。\n\n### 输出格式：\n\n输出在一行中给出替换完成后的字符串。\n\n### 输入样例：\n```in\nOnly the 11 CAPItaL LeTtERS are replaced.\n```\n\n### 输出样例：\n```out\nLnly the 11 XZKRtaO OeGtVIH are replaced.\n```', 1, '中等', 'Only the 11 CAPItaL LeTtERS are replaced.', 'Lnly the 11 XZKRtaO OeGtVIH are replaced.', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204974587906, 35, '字符串转换成十进制整数', '输入一个以#结束的字符串，本题要求滤去所有的非十六进制字符（不分大小写），组成一个新的表示十六进制数字的字符串，然后将其转换为十进制数后输出。如果在第一个十六进制字符之前存在字符“-”，则代表该数是负数。\n\n### 输入格式：\n\n输入在一行中给出一个以#结束的非空字符串。\n\n### 输出格式：\n\n在一行中输出转换后的十进制数。题目保证输出在长整型范围内。\n\n### 输入样例：\n```in\n+-P-xf4+-1!#\n```\n\n### 输出样例：\n```out\n-3905\n```', 1, '中等', '+-P-xf4+-1!#', '-3905', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813204999753730, 36, '计算两数的和与差', '本题要求实现一个计算输入的两数的和与差的简单函数。\n\n### 函数接口定义：\n```c++\nvoid sum_diff( float op1, float op2, float *psum, float *pdiff );\n```\n其中`op1`和`op2`是输入的两个实数，`*psum`和`*pdiff`是计算得出的和与差。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid sum_diff( float op1, float op2, float *psum, float *pdiff );\n\nint main()\n{\n    float a, b, sum, diff;\n\n    scanf(\"%f %f\", &a, &b);\n    sum_diff(a, b, &sum, &diff);\n    printf(\"The sum is %.2f\\nThe diff is %.2f\\n\", sum, diff);\n	\n    return 0; \n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n4 6\n```\n\n### 输出样例：\n```out\nThe sum is 10.00\nThe diff is -2.00\n```', 1, '简单', '4 6', 'The sum is 10.00\nThe diff is -2.00', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205020725249, 37, '移动字母', '本题要求编写函数，将输入字符串的前3个字符移到最后。\n\n### 函数接口定义：\n```c++\nvoid Shift( char s[] );\n```\n其中`char s[]`是用户传入的字符串，题目保证其长度不小于3；函数`Shift`须将按照要求变换后的字符串仍然存在`s[]`里。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXS 10\n\nvoid Shift( char s[] );\n\nvoid GetString( char s[] ); /* 实现细节在此不表 */\n\nint main()\n{\n    char s[MAXS];\n\n    GetString(s);\n    Shift(s);\n    printf(\"%s\\n\", s);\n	\n    return 0; \n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\nabcdef\n```\n\n### 输出样例：\n```out\ndefabc\n```', 1, '简单', 'abcdef', 'defabc', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205037502466, 38, '拆分实数的整数与小数部分', '本题要求实现一个拆分实数的整数与小数部分的简单函数。\n\n### 函数接口定义：\n```c++\nvoid splitfloat( float x, int *intpart, float *fracpart );\n```\n其中`x`是被拆分的实数（0$$\\le$$`x`$$<$$10000），`*intpart`和`*fracpart`分别是将实数x拆分出来的整数部分与小数部分。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid splitfloat( float x, int *intpart, float *fracpart );\n\nint main()\n{\n    float x, fracpart;\n    int intpart;\n    \n    scanf(\"%f\", &x);\n    splitfloat(x, &intpart, &fracpart);\n    printf(\"The integer part is %d\\n\", intpart);\n    printf(\"The fractional part is %g\\n\", fracpart);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2.718\n```\n\n### 输出样例：\n```out\nThe integer part is 2\nThe fractional part is 0.718\n```', 1, '中等', '2.718', 'The integer part is 2\nThe fractional part is 0.718', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205062668290, 39, '在数组中查找指定元素', '本题要求实现一个在数组中查找指定元素的简单函数。\n\n### 函数接口定义：\n```c++\nint search( int list[], int n, int x );\n```\n其中`list[]`是用户传入的数组；`n`（$$\\ge 0$$）是`list[]`中元素的个数；`x`是待查找的元素。如果找到\n\n则函数`search`返回相应元素的最小下标（下标从0开始），否则返回$$-1$$。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 10\n\nint search( int list[], int n, int x );\n    \nint main()\n{\n    int i, index, n, x;\n    int a[MAXN];\n\n    scanf(\"%d\", &n);\n    for( i = 0; i < n; i++ )\n        scanf(\"%d\", &a[i]);\n    scanf(\"%d\", &x);\n    index = search( a, n, x );\n    if( index != -1 )\n        printf(\"index = %d\\n\", index);\n    else\n        printf(\"Not found\\n\");\n            \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n5\n1 2 2 5 4\n2\n```\n\n### 输出样例1：\n```out\nindex = 1\n```\n\n### 输入样例2：\n```\n5\n1 2 2 5 4\n0\n```\n\n### 输出样例2：\n```\nNot found\n```', 1, '中等', '5\n1 2 2 5 4\n2', 'Not found', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205087834114, 40, '数组循环右移', '本题要求实现一个对数组进行循环右移的简单函数：一个数组$$a$$中存有$$n$$（$$>0$$）个整数，将每个整数循环向右移$$m$$（$$\\ge 0$$）个位置，即将$$a$$中的数据由（$$a_0 a_1 \\cdots a_{n-1}$$）变换为（$$a_{n-m} \\cdots a_{n-1} a_0 a_1 \\cdots a_{n-m-1}$$）（最后$$m$$个数循环移至最前面的$$m$$个位置）。\n\n### 函数接口定义：\n```c++\nint ArrayShift( int a[], int n, int m );\n```\n其中`a[]`是用户传入的数组；`n`是数组的大小；`m`是右移的位数。函数`ArrayShift`须将循环右移后的数组仍然存在`a[]`中。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 10\n\nint ArrayShift( int a[], int n, int m );\n\nint main()\n{\n    int a[MAXN], n, m;\n    int i;\n    \n    scanf(\"%d %d\", &n, &m);\n    for ( i = 0; i < n; i++ ) scanf(\"%d\", &a[i]);\n    \n    ArrayShift(a, n, m);\n    \n    for ( i = 0; i < n; i++ ) {\n        if (i != 0) printf(\" \");\n        printf(\"%d\", a[i]);\n    }\n    printf(\"\\n\");\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n6 2\n1 2 3 4 5 6\n```\n\n### 输出样例：\n```out\n5 6 1 2 3 4\n```', 1, '困难', '6 2\n1 2 3 4 5 6', '5 6 1 2 3 4', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205112999938, 41, '报数', '报数游戏是这样的：有$$n$$个人围成一圈，按顺序从1到$$n$$编好号。从第一个人开始报数，报到$$m$$（$$<n$$）的人退出圈子；下一个人从1开始报数，报到$$m$$的人退出圈子。如此下去，直到留下最后一个人。\n\n本题要求编写函数，给出每个人的退出顺序编号。\n\n### 函数接口定义：\n```c++\nvoid CountOff( int n, int m, int out[] );\n```\n其中`n`是初始人数；`m`是游戏规定的退出位次（保证为小于$$n$$的正整数）。函数`CountOff`将每个人的退出顺序编号存在数组`out[]`中。因为C语言数组下标是从0开始的，所以第`i`个位置上的人是第`out[i-1]`个退出的。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 20\n\nvoid CountOff( int n, int m, int out[] );\n\nint main()\n{\n    int out[MAXN], n, m;\n    int i;\n    \n    scanf(\"%d %d\", &n, &m);\n    CountOff( n, m, out );   \n    for ( i = 0; i < n; i++ )\n        printf(\"%d \", out[i]);\n    printf(\"\\n\");\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n11 3\n```\n\n### 输出样例：\n```out\n4 10 1 7 5 2 11 9 3 6 8 \n```', 1, '困难', '11 3', '4 10 1 7 5 2 11 9 3 6 8', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205138165761, 42, '使用函数实现字符串部分复制', '本题要求编写函数，将输入字符串$$t$$中从第$$m$$个字符开始的全部字符复制到字符串$$s$$中。\n\n### 函数接口定义：\n```c++\nvoid strmcpy( char *t, int m, char *s );\n```\n函数`strmcpy`将输入字符串`char *t`中从第`m`个字符开始的全部字符复制到字符串`char *s`中。若`m`超过输入字符串的长度，则结果字符串应为空串。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 20\n\nvoid strmcpy( char *t, int m, char *s );\nvoid ReadString( char s[] ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char t[MAXN], s[MAXN];\n    int m;\n    \n    scanf(\"%d\\n\", &m);\n    ReadString(t);\n    strmcpy( t, m, s );\n    printf(\"%s\\n\", s);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n7\nhappy new year\n```\n\n### 输出样例：\n```out\nnew year\n```', 1, '困难', '7\nhappy new year', 'new year', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205167525889, 43, '删除字符', '本题要求实现一个删除字符串中的指定字符的简单函数。\n\n### 函数接口定义：\n```c++\nvoid delchar( char *str, char c );\n```\n其中`char *str`是传入的字符串，`c`是待删除的字符。函数`delchar`的功能是将字符串`str`中出现的所有`c`字符删除。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 20\n\nvoid delchar( char *str, char c );\nvoid ReadString( char s[] ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char str[MAXN], c;\n\n    scanf(\"%c\\n\", &c);\n    ReadString(str);\n    delchar(str, c);\n    printf(\"%s\\n\", str);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\na\nhappy new year\n```\n\n### 输出样例：\n```out\nhppy new yer\n```', 1, '困难', 'a\nhappy new year', 'hppy new yer', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205175914497, 44, '字符串排序', '本题要求编写程序，读入5个字符串，按由小到大的顺序输出。\n\n### 输入格式：\n\n输入为由空格分隔的5个非空字符串，每个字符串不包括空格、制表符、换行符等空白字符，长度小于80。\n\n### 输出格式：\n\n按照以下格式输出排序后的结果：\n```\nAfter sorted:\n每行一个字符串\n```\n\n### 输入样例：\n```in\nred yellow blue green white\n```\n\n### 输出样例：\n```out\nAfter sorted:\nblue\ngreen\nred\nwhite\nyellow\n```', 1, '困难', 'red yellow blue green white', 'After sorted:\nblue\ngreen\nred\nwhite\nyellow', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205192691713, 45, '输出学生成绩', '本题要求编写程序，根据输入学生的成绩，统计并输出学生的平均成绩、最高成绩和最低成绩。建议使用动态内存分配来实现。\n\n### 输入格式：\n\n输入第一行首先给出一个正整数N，表示学生的个数。接下来一行给出N个学生的成绩，数字间以空格分隔。\n\n### 输出格式：\n\n按照以下格式输出：\n```\naverage = 平均成绩\nmax = 最高成绩\nmin = 最低成绩\n```\n结果均保留两位小数。\n\n### 输入样例：\n```in\n3\n85 90 95\n```\n\n### 输出样例：\n```out\naverage = 90.00\nmax = 95.00\nmin = 85.00\n```', 1, '困难', '3\n85 90 95', 'average = 90.00\nmax = 95.00\nmin = 85.00', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205209468929, 46, '判断回文字符串', '本题要求编写函数，判断给定的一串字符是否为“回文”。所谓“回文”是指顺读和倒读都一样的字符串。如“XYZYX”和“xyzzyx”都是回文。\n\n### 函数接口定义：\n```c++\nbool palindrome( char *s );\n```\n函数`palindrome`判断输入字符串`char *s`是否为回文。若是则返回`true`，否则返回`false`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXN 20\ntypedef enum {false, true} bool;\n\nbool palindrome( char *s );\n\nint main()\n{\n    char s[MAXN];\n    \n    scanf(\"%s\", s);\n    if ( palindrome(s)==true )\n        printf(\"Yes\\n\");\n    else\n        printf(\"No\\n\");\n    printf(\"%s\\n\", s);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nthisistrueurtsisiht\n```\n\n### 输出样例1：\n```out\nYes\nthisistrueurtsisiht\n```\n\n### 输入样例2：\n```\nthisisnottrue\n```\n\n### 输出样例2：\n```\nNo\nthisisnottrue\n```', 1, '困难', 'thisistrueurtsisiht', 'No\nthisisnottrue', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205226246146, 47, '分类统计各类字符个数', '本题要求实现一个函数，统计给定字符串中的大写字母、小写字母、空格、数字以及其它字符各有多少。\n\n### 函数接口定义：\n```c++\nvoid StringCount( char *s );\n```\n其中 `char *s` 是用户传入的字符串。函数`StringCount`须在一行内按照\n```\n大写字母个数 小写字母个数 空格个数 数字个数 其它字符个数\n```\n的格式输出。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXS 15\n\nvoid StringCount( char *s );\nvoid ReadString( char *s ); /* 由裁判实现，略去不表 */\n\nint main()\n{\n    char s[MAXS];\n\n    ReadString(s);\n    StringCount(s);\n\n    return 0;\n}\n\n/* Your function will be put here */\n```\n\n### 输入样例：\n```in\naZ&*?\n093 Az\n```\n\n### 输出样例：\n```out\n2 2 1 3 4\n```', 1, '中等', 'aZ&*?\n093 Az', '2 2 1 3 4', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205243023361, 48, '时间换算', '本题要求编写程序，以`hh:mm:ss`的格式输出某给定时间再过`n`秒后的时间值（超过23:59:59就从0点开始计时）。\n\n### 输入格式：\n\n输入在第一行中以`hh:mm:ss`的格式给出起始时间，第二行给出整秒数`n`（$$<$$60）。\n\n### 输出格式：\n\n输出在一行中给出`hh:mm:ss`格式的结果时间。\n\n### 输入样例：\n```in\n11:59:40\n30\n```\n\n### 输出样例：\n```out\n12:00:10\n```', 1, '中等', '11:59:40\n30', '12:00:10', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 1, NULL);
INSERT INTO `question` VALUES (1383813205251411970, 49, '平面向量加法', '本题要求编写程序，计算两个二维平面向量的和向量。\n\n### 输入格式:\n\n输入在一行中按照“$$x_1$$ $$y_1$$ $$x_2$$ $$y_2$$”的格式给出两个二维平面向量$$v_1=(x_1, y_1)$$和$$v_2=(x_2, y_2)$$的分量。\n\n### 输出格式:\n\n在一行中按照`(x, y)`的格式输出和向量，坐标输出小数点后一位（注意不能输出$$-0.0$$）。\n\n### 输入样例:\n```in\n3.5 -2.7 -13.9 8.7\n```\n\n### 输出样例:\n```out\n(-10.4, 6.0)\n```', 1, '中等', '3.5 -2.7 -13.9 8.7', '(-10.4, 6.0)', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205268189186, 50, '查找书籍', '给定n本书的名称和定价，本题要求编写程序，查找并输出其中定价最高和最低的书的名称和定价。\n\n### 输入格式:\n\n输入第一行给出正整数n（$$<$$10），随后给出n本书的信息。每本书在一行中给出书名，即长度不超过30的字符串，随后一行中给出正实数价格。题目保证没有同样价格的书。\n\n### 输出格式:\n\n在一行中按照“价格, 书名”的格式先后输出价格最高和最低的书。价格保留2位小数。\n\n### 输入样例:\n```in\n3\nProgramming in C\n21.5\nProgramming in VB\n18.5\nProgramming in Delphi\n25.0\n```\n\n### 输出样例:\n```out\n25.00, Programming in Delphi\n18.50, Programming in VB\n```', 1, '困难', '3\nProgramming in C\n21.5\nProgramming in VB\n18.5\nProgramming in Delphi\n25.0', '25.00, Programming in Delphi\n18.50, Programming in VB', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205284966401, 51, '通讯录排序', '输入n个朋友的信息，包括姓名、生日、电话号码，本题要求编写程序，按照年龄从大到小的顺序依次输出通讯录。题目保证所有人的生日均不相同。\n\n### 输入格式:\n\n输入第一行给出正整数n（$$<$$10）。随后n行，每行按照“姓名 生日 电话号码”的格式给出一位朋友的信息，其中“姓名”是长度不超过10的英文字母组成的字符串，“生日”是`yyyymmdd`格式的日期，“电话号码”是不超过17位的数字及`+`、`-`组成的字符串。\n\n### 输出格式:\n\n按照年龄从大到小输出朋友的信息，格式同输出。\n\n### 输入样例:\n```in\n3\nzhang 19850403 13912345678\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543\n```\n\n### 输出样例:\n```out\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543\nzhang 19850403 13912345678\n```', 1, '困难', '3\nzhang 19850403 13912345678\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543', 'wang 19821020 +86-0571-88018448\nqian 19840619 13609876543\nzhang 19850403 13912345678', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205301743618, 52, '计算两个复数之积', '本题要求实现一个计算复数之积的简单函数。\n\n### 函数接口定义：\n```c++\nstruct complex multiply(struct complex x, struct complex y);\n```\n其中`struct complex`是复数结构体，其定义如下：\n```c++\nstruct complex{\n    int real;\n    int imag;\n};\n```\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nstruct complex{\n    int real;\n    int imag;\n};\n\nstruct complex multiply(struct complex x, struct complex y);\n\nint main()\n{\n    struct complex product, x, y;\n\n    scanf(\"%d%d%d%d\", &x.real, &x.imag, &y.real, &y.imag);\n    product = multiply(x, y);\n    printf(\"(%d+%di) * (%d+%di) = %d + %di\\n\", \n            x.real, x.imag, y.real, y.imag, product.real, product.imag);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n3 4 5 6\n```\n\n### 输出样例：\n```out\n(3+4i) * (5+6i) = -9 + 38i\n```', 1, '中等', '3 4 5 6', '(3+4i) * (5+6i) = -9 + 38i', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205310132226, 53, '按等级统计学生成绩', '本题要求实现一个根据学生成绩设置其等级，并统计不及格人数的简单函数。\n\n### 函数接口定义：\n```c++\nint set_grade( struct student *p, int n );\n```\n其中`p`是指向学生信息的结构体数组的指针，该结构体的定义为：\n```\nstruct student{\n    int num;\n    char name[20];\n    int score;\n    char grade;\n};\n```\n\n`n`是数组元素个数。学号`num`、姓名`name`和成绩`score`均是已经存储好的。`set_grade`函数需要根据学生的成绩`score`设置其等级`grade`。等级设置：85－100为A，70－84为B，60－69为C，0－59为D。同时，`set_grade`还需要返回不及格的人数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXN 10\n\nstruct student{\n    int num;\n    char name[20];\n    int score;\n    char grade;\n};\n\nint set_grade( struct student *p, int n );\n\nint main()\n{   struct student stu[MAXN], *ptr;\n    int n, i, count;\n    \n    ptr = stu;\n    scanf(\"%d\\n\", &n);\n    for(i = 0; i < n; i++){\n       scanf(\"%d%s%d\", &stu[i].num, stu[i].name, &stu[i].score);\n    } \n   count = set_grade(ptr, n);\n   printf(\"The count for failed (<60): %d\\n\", count);\n   printf(\"The grades:\\n\"); \n   for(i = 0; i < n; i++)\n       printf(\"%d %s %c\\n\", stu[i].num, stu[i].name, stu[i].grade);\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n31001 annie 85\n31002 bonny 75\n31003 carol 70\n31004 dan 84\n31005 susan 90\n31006 paul 69\n31007 pam 60\n31008 apple 50\n31009 nancy 100\n31010 bob 78\n```\n\n### 输出样例：\n```out\nThe count for failed (<60): 1\nThe grades:\n31001 annie A\n31002 bonny B\n31003 carol B\n31004 dan B\n31005 susan A\n31006 paul C\n31007 pam C\n31008 apple D\n31009 nancy A\n31010 bob B\n```', 1, '困难', '10\n31001 annie 85\n31002 bonny 75\n31003 carol 70\n31004 dan 84\n31005 susan 90\n31006 paul 69\n31007 pam 60\n31008 apple 50\n31009 nancy 100\n31010 bob 78', 'The count for failed (<60): 1\nThe grades:\n31001 annie A\n31002 bonny B\n31003 carol B\n31004 dan B\n31005 susan A\n31006 paul C\n31007 pam C\n31008 apple D\n31009 nancy A\n31010 bob B', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205326909441, 54, '使用递归函数计算1到n之和', '本题要求实现一个用递归计算1+2+3+…+n的和的简单函数。\n\n### 函数接口定义：\n```c++\nint sum( int n );\n```\n该函数对于传入的正整数`n`返回`1+2+3+…+n`的和；若`n`不是正整数则返回0。题目保证输入输出在长整型范围内。建议尝试写成递归函数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint sum( int n );\n\nint main()\n{\n    int n;\n\n    scanf(\"%d\", &n);\n    printf (\"%d\\n\", sum(n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n10\n```\n\n### 输出样例1：\n```out\n55\n```\n\n### 输入样例2：\n```\n0\n```\n\n### 输出样例2：\n```\n0\n```', 1, '简单', '10', '0', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205343686658, 55, '判断满足条件的三位数', '本题要求实现一个函数，统计给定区间内的三位数中有两位数字相同的完全平方数（如144、676）的个数。\n\n### 函数接口定义：\n```c++\nint search( int n );\n```\n\n其中传入的参数`int n`是一个三位数的正整数（最高位数字非0）。函数`search`返回[101, `n`]区间内所有满足条件的数的个数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint search( int n );\n\nint main()\n{\n    int number;\n\n    scanf(\"%d\",&number);\n    printf(\"count=%d\\n\",search(number));\n		\n    return 0;\n}\n\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n500\n```\n\n### 输出样例：\n```out\ncount=6\n```', 1, '中等', '500', 'count=6', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205356269570, 56, '递归求阶乘和', '本题要求实现一个计算非负整数阶乘的简单函数，并利用该函数求 1!+2!+3!+...+n! 的值。\n\n### 函数接口定义：\n```c++\ndouble fact( int n );\ndouble factsum( int n );\n```\n函数`fact`应返回`n`的阶乘，建议用递归实现。函数`factsum`应返回 1!+2!+...+`n`! 的值。题目保证输入输出在双精度范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble fact( int n );\ndouble factsum( int n );\n\nint main()\n{\n    int n;\n\n    scanf(\"%d\",&n);\n    printf(\"fact(%d) = %.0f\\n\", n, fact(n));\n    printf(\"sum = %.0f\\n\", factsum(n));\n		\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n10\n```\n\n### 输出样例1：\n```out\nfact(10) = 3628800\nsum = 4037913\n```\n\n### 输入样例2：\n```\n0\n```\n\n### 输出样例2：\n```\nfact(0) = 1\nsum = 0\n```', 1, '中等', '10', 'fact(0) = 1\nsum = 0', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205373046785, 57, '递归实现指数函数', '本题要求实现一个计算$$x^n$$（$$n\\ge 1$$）的函数。\n\n### 函数接口定义：\n```c++\ndouble calc_pow( double x, int n );\n```\n函数`calc_pow`应返回`x`的`n`次幂的值。建议用递归实现。题目保证结果在双精度范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble calc_pow( double x, int n );\n\nint main()\n{\n    double x;\n    int n;\n\n    scanf(\"%lf %d\", &x, &n);\n    printf(\"%.0f\\n\", calc_pow(x, n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\n8\n```', 1, '中等', '2 3', '8', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205394018305, 58, '递归求简单交错幂级数的部分和', '本题要求实现一个函数，计算下列简单交错幂级数的部分和：\n\n$$ f(x, n) = x - x^2 + x^3 - x^4 + \\cdots + (-1)^{n-1}x^n $$\n\n\n### 函数接口定义：\n```c++\ndouble fn( double x, int n );\n```\n其中题目保证传入的`n`是正整数，并且输入输出都在双精度范围内。函数`fn`应返回上述级数的部分和。建议尝试用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble fn( double x, int n );\n\nint main()\n{\n    double x;\n    int n;\n    \n    scanf(\"%lf %d\", &x, &n);\n    printf(\"%.2f\\n\", fn(x,n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n0.5 12\n```\n\n### 输出样例：\n```out\n0.33\n```', 1, '中等', '0.5 12', '0.33', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205410795522, 59, '递归计算Ackermenn函数', '本题要求实现Ackermenn函数的计算，其函数定义如下：\n\n\n![](~/48)\n\n### 函数接口定义：\n```c++\nint Ack( int m, int n );\n```\n其中`m`和`n`是用户传入的非负整数。函数`Ack`返回Ackermenn函数的相应值。题目保证输入输出都在长整型\n\n范围内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint Ack( int m, int n );\n\nint main()\n{\n    int m, n;\n    \n    scanf(\"%d %d\", &m, &n);\n    printf(\"%d\\n\", Ack(m, n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\n9\n```', 1, '中等', '2 3', '9', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205427572737, 60, '递归求Fabonacci数列', '本题要求实现求Fabonacci数列项的函数。Fabonacci数列的定义如下：\n\n$$f(n)=f(n-2)+f(n-1)$$ ($$n\\ge 2$$)，其中$$f(0)=0$$，$$f(1)=1$$。\n\n### 函数接口定义：\n```c++\nint f( int n );\n```\n函数`f`应返回第`n`个Fabonacci数。题目保证输入输出在长整型范围内。建议用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint f( int n );\n\nint main()\n{\n    int n;\n    \n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", f(n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n6\n```\n\n### 输出样例：\n```out\n8\n```', 1, '简单', '6', '8', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205435961346, 61, '十进制转换二进制', '本题要求实现一个函数，将正整数n转换为二进制后输出。\n\n### 函数接口定义：\n```c++\nvoid dectobin( int n );\n```\n函数`dectobin`应在一行中打印出二进制的`n`。建议用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid dectobin( int n );\n\nint main()\n{\n    int n;\n    \n    scanf(\"%d\", &n);\n    dectobin(n);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n```\n\n### 输出样例：\n```out\n1010\n```', 1, '中等', '10', '1010', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205452738561, 62, '递归实现顺序输出整数', '本题要求实现一个函数，对一个整数进行按位顺序输出。\n\n### 函数接口定义：\n```c++\nvoid printdigits( int n );\n```\n函数`printdigits`应将`n`的每一位数字从高位到低位顺序打印出来，每位数字占一行。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nvoid printdigits( int n );\n\nint main()\n{\n    int n;\n	\n    scanf(\"%d\", &n);\n    printdigits(n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n12345\n```\n\n### 输出样例：\n```out\n1\n2\n3\n4\n5\n```', 1, '中等', '12345', '1\n2\n3\n4\n5', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205469515777, 63, '输出月份英文名', '本题要求实现函数，可以返回一个给定月份的英文名称。\n\n### 函数接口定义：\n```c++\nchar *getmonth( int n );\n```\n函数`getmonth`应返回存储了`n`对应的月份英文名称的字符串头指针。如果传入的参数`n`不是一个代表月份的数字，则返回空指针NULL。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nchar *getmonth( int n );\n\nint main()\n{\n    int n;\n    char *s;\n    \n    scanf(\"%d\", &n);\n    s = getmonth(n);\n    if ( s==NULL ) printf(\"wrong input!\\n\");\n    else printf(\"%s\\n\", s);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n5\n```\n\n### 输出样例1：\n```out\nMay\n```\n### 输入样例2：\n```\n15\n```\n\n### 输出样例2：\n```\nwrong input!\n```', 1, '中等', '5', 'wrong input!', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205486292994, 64, '查找星期', '本题要求实现函数，可以根据下表查找到星期，返回对应的序号。\n\n| 序号 | 星期 | \n|:-----: |:--------:| \n| 0 | Sunday    |\n| 1 | Monday    |\n| 2 | Tuesday   |\n| 3 | Wednesday |\n| 4 | Thursday  |\n| 5 | Friday    |\n| 6 | Saturday  |\n\n### 函数接口定义：\n```c++\nint getindex( char *s );\n```\n函数`getindex`应返回字符串`s`序号。如果传入的参数`s`不是一个代表星期的字符串，则返回-1。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXS 80\n\nint getindex( char *s );\n\nint main()\n{\n    int n;\n    char s[MAXS];\n    \n    scanf(\"%s\", s);\n    n = getindex(s);\n    if ( n==-1 ) printf(\"wrong input!\\n\");\n    else printf(\"%d\\n\", n);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nTuesday\n```\n\n### 输出样例1：\n```out\n2\n```\n### 输入样例2：\n```\ntoday\n```\n\n### 输出样例2：\n```\nwrong input!\n```', 1, '中等', 'Tuesday', 'wrong input!', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205511458818, 65, '计算最长的字符串长度', '本题要求实现一个函数，用于计算有n个元素的指针数组s中最长的字符串的长度。\n\n### 函数接口定义：\n```c++\nint max_len( char *s[], int n );\n```\n其中`n`个字符串存储在`s[]`中，函数`max_len`应返回其中最长字符串的长度。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAXN 10\n#define MAXS 20\n\nint max_len( char *s[], int n );\n\nint main()\n{\n    int i, n;\n    char *string[MAXN] = {NULL};\n    \n    scanf(\"%d\", &n);\n    for(i = 0; i < n; i++) {\n        string[i] = (char *)malloc(sizeof(char)*MAXS);\n        scanf(\"%s\", string[i]);\n    }\n    printf(\"%d\\n\", max_len(string, n));\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n4\nblue\nyellow\nred\ngreen\n```\n\n### 输出样例：\n```out\n6\n```', 1, '中等', '4\nblue\nyellow\nred\ngreen', '6', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205528236033, 66, '字符串的连接', '本题要求实现一个函数，将两个字符串连接起来。\n\n### 函数接口定义：\n```c++\nchar *str_cat( char *s, char *t );\n```\n函数`str_cat`应将字符串`t`复制到字符串`s`的末端，并且返回字符串`s`的首地址。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define MAXS 10\n\nchar *str_cat( char *s, char *t );\n\nint main()\n{\n    char *p;\n    char str1[MAXS+MAXS] = {\'\\0\'}, str2[MAXS] = {\'\\0\'};\n    \n    scanf(\"%s%s\", str1, str2);\n    p = str_cat(str1, str2);\n    printf(\"%s\\n%s\\n\", p, str1);\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\nabc\ndef\n```\n\n### 输出样例：\n```out\nabcdef\nabcdef\n```', 1, '中等', 'abc\ndef', 'abcdef\nabcdef', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205545013250, 67, '指定位置输出字符串', '本题要求实现一个函数，对给定的一个字符串和两个字符，打印出给定字符串中从与第一个字符匹配的位置开始到与第二个字符匹配的位置之间的所有字符。\n\n### 函数接口定义：\n```c++\nchar *match( char *s, char ch1, char ch2 );\n```\n函数`match`应打印`s`中从`ch1`到`ch2`之间的所有字符，并且返回`ch1`的地址。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n#define MAXS 10\n\nchar *match( char *s, char ch1, char ch2 );\n\nint main()\n{\n    char str[MAXS], ch_start, ch_end, *p;\n    \n    scanf(\"%s\\n\", str);\n    scanf(\"%c %c\", &ch_start, &ch_end);\n    p = match(str, ch_start, ch_end);\n    printf(\"%s\\n\", p);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nprogram\nr g\n```\n\n### 输出样例1：\n```out\nrog\nrogram\n```\n\n### 输入样例2：\n```\nprogram\nz o\n```\n\n### 输出样例2：\n```\n(空行)\n(空行)\n```\n\n### 输入样例3：\n```\nprogram\ng z\n```\n\n### 输出样例3：\n```\ngram\ngram\n```', 1, '困难', 'program\nr g', 'gram\ngram', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205561790466, 68, '查找子串', '本题要求实现一个字符串查找的简单函数。\n\n### 函数接口定义：\n```c++\nchar *search( char *s, char *t );\n```\n函数`search`在字符串`s`中查找子串`t`，返回子串t在`s`中的首地址。若未找到，则返回NULL。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define MAXS 30\n\nchar *search(char *s, char *t);\nvoid ReadString( char s[] ); /* 裁判提供，细节不表 */\n\nint main()\n{\n    char s[MAXS], t[MAXS], *pos;\n    \n    ReadString(s);\n    ReadString(t);\n    pos = search(s, t);\n    if ( pos != NULL )\n        printf(\"%d\\n\", pos - s);\n    else\n        printf(\"-1\\n\");\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\nThe C Programming Language\nram\n```\n\n### 输出样例1：\n```out\n10\n```\n\n### 输入样例2：\n```\nThe C Programming Language\nbored\n```\n\n### 输出样例2：\n```\n-1\n```', 1, '困难', 'The C Programming Language\nram', '-1', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383813205578567682, 69, '奇数值结点链表', '本题要求实现两个函数，分别将读入的数据存储为单链表、将链表中奇数值的结点重新组成一个新的链表。链表结点定义如下：\n\n```\nstruct ListNode {\n    int data;\n    ListNode *next;\n};\n```\n\n### 函数接口定义：\n```c++\nstruct ListNode *readlist();\nstruct ListNode *getodd( struct ListNode **L );\n```\n函数`readlist`从标准输入读入一系列正整数，按照读入顺序建立单链表。当读到$$-1$$时表示输入结束，函数应返回指向单链表头结点的指针。\n\n函数`getodd`将单链表`L`中奇数值的结点分离出来，重新组成一个新的链表。返回指向新链表头结点的指针，同时将`L`中存储的地址改为删除了奇数值结点后的链表的头结点地址（所以要传入`L`的指针）。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct ListNode {\n    int data;\n    struct ListNode *next;\n};\n\nstruct ListNode *readlist();\nstruct ListNode *getodd( struct ListNode **L );\nvoid printlist( struct ListNode *L )\n{\n     struct ListNode *p = L;\n     while (p) {\n           printf(\"%d \", p->data);\n           p = p->next;\n     }\n     printf(\"\\n\");\n}\n\nint main()\n{\n    struct ListNode *L, *Odd;\n    L = readlist();\n    Odd = getodd(&L);\n    printlist(Odd);\n    printlist(L);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n1 2 2 3 4 5 6 7 -1\n```\n\n### 输出样例：\n```out\n1 3 5 7 \n2 2 4 6 \n```', 1, '困难', '1 2 2 3 4 5 6 7 -1', '1 3 5 7 \n2 2 4 6', 400, 65536, '2021-04-19 00:02:33', '2021-04-19 00:02:33', 0, NULL);
INSERT INTO `question` VALUES (1383821508266242050, 70, 'Programming in C is fun!', '本题要求编写程序，输出一个短句“Programming in C is fun!”。\n\n### 输入格式:\n\n本题目没有输入。\n\n### 输出格式:\n\n在一行中输出短句“Programming in C is fun!”。', 1, '简单', '本题目没有输入。', '在一行中输出短句“Programming in C is fun!”。', 400, 65536, '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `question` VALUES (1383821508564037634, 71, '输出倒三角图案', '本题要求编写程序，输出指定的由“*”组成的倒三角图案。\n\n### 输入格式:\n\n本题目没有输入。\n\n### 输出格式:\n\n按照下列格式输出由“*”组成的倒三角图案。\n\n```\n* * * *\n * * *\n  * *\n   *\n```', 1, '简单', '本题目没有输入。', '按照下列格式输出由“*”组成的倒三角图案。\n\n```\n* * * *\n * * *\n  * *\n   *\n```', 400, 65536, '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `question` VALUES (1383821508589203457, 72, '温度转换', '本题要求编写程序，计算华氏温度150°F对应的摄氏温度。计算公式：$$C = 5\\times (F-32)/9$$，式中：$$C$$表示摄氏温度，$$F$$表示华氏温度，输出数据要求为整型。\n\n### 输入格式:\n\n本题目没有输入。\n\n### 输出格式:\n\n按照下列格式输出\n\n```\nfahr = 150, celsius = 计算所得摄氏温度的整数值\n```', 1, '简单', '本题目没有输入。', '按照下列格式输出\n\n```\nfahr = 150, celsius = 计算所得摄氏温度的整数值\n```', 400, 65536, '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `question` VALUES (1383821508605980674, 73, '计算物体自由下落的距离', '一个物体从100米的高空自由落下。编写程序，求它在前3秒内下落的垂直距离。设重力加速度为10米/秒$$^2$$。\n\n### 输入格式:\n\n本题目没有输入。\n\n### 输出格式:\n\n按照下列格式输出\n\n```\nheight = 垂直距离值\n```\n结果保留2位小数。', 1, '简单', '本题目没有输入。', '按照下列格式输出\n\n```\nheight = 垂直距离值\n```\n结果保留2位小数。', 400, 65536, '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `question` VALUES (1383821508631146498, 74, '计算摄氏温度', '给定一个华氏温度$$F$$，本题要求编写程序，计算对应的摄氏温度$$C$$。计算公式：$$C = 5\\times (F-32)/9$$。题目保证输入与输出均在整型范围内。\n\n### 输入格式:\n\n输入在一行中给出一个华氏温度。\n\n### 输出格式:\n\n在一行中按照格式“Celsius = C”输出对应的摄氏温度C的整数值。 \n\n### 输入样例:\n```in\n150\n```\n\n### 输出样例:\n```out\nCelsius = 65\n```', 1, '简单', '输入在一行中给出一个华氏温度。', '在一行中按照格式“Celsius = C”输出对应的摄氏温度C的整数值。', 400, 65536, '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `question` VALUES (1383821508698255362, 75, '整数四则运算', '本题要求编写程序，计算2个正整数的和、差、积、商并输出。题目保证输入和输出全部在整型范围内。\n\n### 输入格式:\n\n输入在一行中给出2个正整数A和B。 \n\n### 输出格式:\n\n在4行中按照格式“A 运算符 B = 结果”顺序输出和、差、积、商。 \n\n### 输入样例:\n```in\n3 2\n```\n\n### 输出样例:\n```out\n3 + 2 = 5\n3 - 2 = 1\n3 * 2 = 6\n3 / 2 = 1\n```', 1, '简单', '输入在一行中给出2个正整数A和B。', '在4行中按照格式“A 运算符 B = 结果”顺序输出和、差、积、商。', 400, 65536, '2021-04-19 00:35:32', '2021-04-19 00:35:32', 0, NULL);
INSERT INTO `question` VALUES (1383821508748587010, 76, '计算分段函数[1]', '本题目要求计算下列分段函数$$f(x)$$的值：\n\n![公式](~/1)\n\n### 输入格式:\n\n输入在一行中给出实数x。\n\n### 输出格式:\n\n在一行中按“f(x) = result”的格式输出，其中x与result都保留一位小数。\n\n### 输入样例1:\n```in\n10\n```\n\n### 输出样例1:\n```out\nf(10.0) = 0.1\n```\n\n### 输入样例2:\n```\n0\n```\n\n### 输出样例2:\n```\nf(0.0) = 0.0\n```', 1, '简单', '输入在一行中给出实数x。', '在一行中按“f(x) = result”的格式输出，其中x与result都保留一位小数。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821508794724354, 77, '计算分段函数[2]', '本题目要求计算下列分段函数$$f(x)$$的值：\n\n![f2-11](~/2)\n\n注：可在头文件中包含`math.h`，并调用`sqrt`函数求平方根，调用`pow`函数求幂。 \n\n### 输入格式:\n\n输入在一行中给出实数x。\n\n### 输出格式:\n\n在一行中按“f(x) = result”的格式输出，其中x与result都保留两位小数。\n\n### 输入样例1:\n```in\n10\n```\n\n### 输出样例1:\n```out\nf(10.00) = 3.16\n```\n\n### 输入样例2:\n```\n-0.5\n```\n\n### 输出样例2:\n```\nf(-0.50) = -2.75\n```', 1, '简单', '输入在一行中给出实数x。', '在一行中按“f(x) = result”的格式输出，其中x与result都保留两位小数。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821508857638914, 78, '输出华氏-摄氏温度转换表', '输入2个正整数`lower`和`upper`（`lower`$$\\le$$`upper`$$\\le$$100），请输出一张取值范围为[`lower`，`upper`]、且每次增加2华氏度的华氏-摄氏温度转换表。\n\n温度转换的计算公式：$$C = 5 \\times (F - 32) / 9$$，其中：$$C$$表示摄氏温度，$$F$$表示华氏温度。\n\n### 输入格式:\n\n在一行中输入2个整数，分别表示`lower`和`upper`的值，中间用空格分开。\n\n### 输出格式:\n\n第一行输出：\"fahr celsius\"\n\n接着每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（占据6个字符宽度，靠右对齐，保留1位小数）。\n\n若输入的范围不合法，则输出\"Invalid.\"。 \n\n### 输入样例1:\n```in\n32 35\n```\n\n### 输出样例1:\n```out\nfahr celsius\n32   0.0\n34   1.1\n```\n\n### 输入样例2:\n```\n40 30\n```\n\n### 输出样例2:\n```\nInvalid.\n```', 1, '中等', '在一行中输入2个整数，分别表示`lower`和`upper`的值，中间用空格分开。', '第一行输出：\"fahr celsius\"\n\n接着每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（占据6个字符宽度，靠右对齐，保留1位小数）。\n\n若输入的范围不合法，则输出\"Invalid.\"。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821508899581953, 79, '求N分之一序列前N项和', '本题要求编写程序，计算序列 1 + 1/2 + 1/3 + ... 的前N项之和。\n\n### 输入格式:\n\n输入在一行中给出一个正整数N。\n\n### 输出格式:\n\n在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后6位。题目保证计算结果不超过双精度范围。\n\n### 输入样例:\n```in\n6\n```\n\n### 输出样例:\n```out\nsum = 2.450000\n```', 1, '中等', '输入在一行中给出一个正整数N。', '在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后6位。题目保证计算结果不超过双精度范围。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821508949913601, 80, '求奇数分之一序列前N项和', '本题要求编写程序，计算序列 1 + 1/3 + 1/5 + ... 的前N项之和。\n\n### 输入格式:\n\n输入在一行中给出一个正整数N。\n\n### 输出格式:\n\n 在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后6位。题目保证计算结果不超过双精度范围。\n\n### 输入样例:\n```in\n23\n```\n\n### 输出样例:\n```out\nsum = 2.549541\n```', 1, '中等', '输入在一行中给出一个正整数N。', '在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后6位。题目保证计算结果不超过双精度范围。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821508991856642, 81, '求简单交错序列前N项和', '本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + ... 的前N项之和。\n\n### 输入格式:\n\n输入在一行中给出一个正整数N。\n\n### 输出格式:\n\n在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后三位。题目保证计算结果不超过双精度范围。\n\n### 输入样例:\n```in\n10\n```\n\n### 输出样例:\n```out\nsum = 0.819\n```', 1, '中等', '输入在一行中给出一个正整数N。', '在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后三位。题目保证计算结果不超过双精度范围。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509042188289, 82, '生成3的乘方表', '输入一个非负整数$$n$$，生成一张3的乘方表，输出$$3^0$$~$$3^n$$的值。可调用幂函数计算3的乘方。\n\n### 输入格式:\n\n输入在一行中给出一个非负整数$$n$$。\n\n### 输出格式:\n\n按照幂的递增顺序输出$$n+1$$行，每行格式为“pow(3,i) = 3的i次幂的值”。题目保证输出数据不超过长整型整数的范围。\n\n### 输入样例:\n```in\n3\n```\n\n### 输出样例:\n```out\npow(3,0) = 1\npow(3,1) = 3\npow(3,2) = 9\npow(3,3) = 27\n```', 1, '中等', '输入在一行中给出一个非负整数$$n$$。', '按照幂的递增顺序输出$$n+1$$行，每行格式为“pow(3,i) = 3的i次幂的值”。题目保证输出数据不超过长整型整数的范围。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509100908545, 83, '求组合数', '本题要求编写程序，根据公式$$C^{m}_{n} = \\frac{n!}{m!(n-m)!}$$算出从$$n$$个不同元素中取出$$m$$个元素（$$m\\le n$$）的组合数。\n\n建议定义和调用函数`fact(n)`计算`n!`，其中`n`的类型是`int`，函数类型是`double`。\n\n### 输入格式:\n\n输入在一行中给出两个正整数$$m$$和$$n$$（$$m\\le n$$），以空格分隔。\n\n### 输出格式:\n\n按照格式“result = 组合数计算结果”输出。题目保证结果在`double`类型范围内。\n\n### 输入样例:\n```in\n2 7\n```\n\n### 输出样例:\n```out\nresult = 21\n```', 1, '中等', '输入在一行中给出两个正整数$$m$$和$$n$$（$$m\\le n$$），以空格分隔。', '按照格式“result = 组合数计算结果”输出。题目保证结果在`double`类型范围内。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509151240193, 84, '求整数均值', '本题要求编写程序，计算4个整数的和与平均值。题目保证输入与输出均在整型范围内。\n\n### 输入格式:\n\n输入在一行中给出4个整数，其间以空格分隔。 \n\n### 输出格式:\n\n在一行中按照格式“Sum = 和; Average = 平均值”顺序输出和与平均值，其中平均值精确到小数点后一位。 \n\n### 输入样例:\n```in\n1 2 3 4\n```\n\n### 输出样例:\n```out\nSum = 10; Average = 2.5\n```', 1, '简单', '输入在一行中给出4个整数，其间以空格分隔。', '在一行中按照格式“Sum = 和; Average = 平均值”顺序输出和与平均值，其中平均值精确到小数点后一位。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509201571841, 85, '阶梯电价', '为了提倡居民节约用电，某省电力公司执行“阶梯电价”，安装一户一表的居民用户电价分为两个“阶梯”：月用电量50千瓦时（含50千瓦时）以内的，电价为0.53元/千瓦时；超过50千瓦时的，超出部分的用电量，电价上调0.05元/千瓦时。请编写程序计算电费。\n\n### 输入格式:\n\n输入在一行中给出某用户的月用电量（单位：千瓦时）。\n\n### 输出格式:\n\n在一行中输出该用户应支付的电费（元），结果保留两位小数，格式如：“cost = 应付电费值”；若用电量小于0，则输出\"Invalid Value!\"。\n\n### 输入样例1:\n```in\n10\n```\n\n### 输出样例1:\n```out\ncost = 5.30\n```\n\n### 输入样例2:\n```\n100\n```\n\n### 输出样例2:\n```\ncost = 55.50\n```', 1, '中等', '输入在一行中给出某用户的月用电量（单位：千瓦时）。', '在一行中输出该用户应支付的电费（元），结果保留两位小数，格式如：“cost = 应付电费值”；若用电量小于0，则输出\"Invalid Value!\"。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509251903489, 86, '求平方与倒数序列的部分和', '本题要求对两个正整数$$m$$和$$n$$（$$m \\le n$$）编写程序，计算序列和$$m^2 + 1/m + (m+1)^2 + 1/(m+1) + \\cdots + n^2 + 1/n$$。\n\n### 输入格式:\n\n输入在一行中给出两个正整数$$m$$和$$n$$（$$m \\le n$$），其间以空格分开。\n\n### 输出格式:\n\n在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后六位。题目保证计算结果不超过双精度范围。\n\n### 输入样例:\n```in\n5 10\n```\n\n### 输出样例:\n```out\nsum = 355.845635\n```', 1, '中等', '输入在一行中给出两个正整数$$m$$和$$n$$（$$m \\le n$$），其间以空格分开。', '在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后六位。题目保证计算结果不超过双精度范围。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509285457922, 87, '求交错序列前N项和', '本题要求编写程序，计算交错序列 1-2/3+3/5-4/7+5/9-6/11+... 的前N项之和。\n\n### 输入格式:\n\n输入在一行中给出一个正整数N。\n\n### 输出格式:\n\n在一行中输出部分和的值，结果保留三位小数。\n\n### 输入样例:\n```in\n5\n```\n\n### 输出样例:\n```out\n0.917\n```', 1, '中等', '输入在一行中给出一个正整数N。', '在一行中输出部分和的值，结果保留三位小数。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509331595266, 88, '求平方根序列前N项和', '本题要求编写程序，计算平方根序列$$\\sqrt{1} + \\sqrt{2} + \\sqrt{3} + \\cdots$$的前N项之和。可包含头文件`math.h`，并调用`sqrt`函数求平方根。\n\n### 输入格式:\n\n输入在一行中给出一个正整数N。\n\n### 输出格式:\n\n在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后两位。题目保证计算结果不超过双精度范围。\n\n### 输入样例:\n```in\n10\n```\n\n### 输出样例:\n```out\nsum = 22.47\n```', 1, '中等', '输入在一行中给出一个正整数N。', '在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后两位。题目保证计算结果不超过双精度范围。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509373538305, 89, '求阶乘序列前N项和', '本题要求编写程序，计算序列 $$1! + 2! + 3! + \\cdots$$ 的前N项之和。\n\n### 输入格式:\n\n输入在一行中给出一个不超过12的正整数N。\n\n### 输出格式:\n\n在一行中输出整数结果。\n\n### 输入样例:\n```in\n5\n```\n\n### 输出样例:\n```out\n153\n```', 1, '中等', '输入在一行中给出一个不超过12的正整数N。', '在一行中输出整数结果。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509444841474, 90, '计算符号函数的值', '对于任一整数$$n$$，符号函数$$sign(n)$$的定义如下：\n\n![](~/3)\n\n请编写程序计算该函数对任一输入整数的值。\n\n### 输入格式:\n\n输入在一行中给出整数n。\n\n### 输出格式:\n\n在一行中按照格式“sign(n) = 函数值”输出该整数n对应的函数值。\n\n### 输入样例1:\n```in\n10\n```\n\n### 输出样例1:\n```out\nsign(10) = 1\n```\n\n### 输入样例2:\n```\n0\n```\n\n### 输出样例2:\n```\nsign(0) = 0\n```\n\n### 输入样例3:\n```\n-98\n```\n\n### 输出样例3:\n```\nsign(-98) = -1\n```', 1, '简单', '输入在一行中给出整数n。', '在一行中按照格式“sign(n) = 函数值”输出该整数n对应的函数值。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509486784513, 91, '统计学生平均成绩与及格人数', '本题要求编写程序，计算学生们的平均成绩，并统计及格（成绩不低于60分）的人数。题目保证输入与输出均在整型范围内。\n\n### 输入格式:\n\n输入在第一行中给出非负整数N，即学生人数。第二行给出N个非负整数，即这N位学生的成绩，其间以空格分隔。 \n\n### 输出格式:\n\n按照以下格式输出：\n```\naverage = 成绩均值\ncount = 及格人数\n```\n其中平均值精确到小数点后一位。 \n\n### 输入样例:\n```in\n5\n77 54 92 73 60\n```\n\n### 输出样例:\n```out\naverage = 71.2\ncount = 4\n```', 1, '中等', '输入在第一行中给出非负整数N，即学生人数。第二行给出N个非负整数，即这N位学生的成绩，其间以空格分隔。', '按照以下格式输出：\n```\naverage = 成绩均值\ncount = 及格人数\n```\n其中平均值精确到小数点后一位。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509524533249, 92, '统计字符', '本题要求编写程序，输入10个字符，统计其中英文字母、空格或回车、数字字符和其他字符的个数。\n\n### 输入格式:\n\n输入为10个字符。最后一个回车表示输入结束，不算在内。\n\n### 输出格式:\n\n在一行内按照\n```\nletter = 英文字母个数, blank = 空格或回车个数, digit = 数字字符个数, other = 其他字符个数\n```\n的格式输出。\n\n### 输入样例:\n```in\naZ &\n09 Az\n```\n\n### 输出样例:\n```out\nletter = 4, blank = 3, digit = 2, other = 1\n```', 1, '中等', '输入为10个字符。最后一个回车表示输入结束，不算在内。', '在一行内按照\n```\nletter = 英文字母个数, blank = 空格或回车个数, digit = 数字字符个数, other = 其他字符个数\n```\n的格式输出。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509566476290, 93, '成绩转换', '本题要求编写程序将一个百分制成绩转换为五分制成绩。转换规则：\n\n- 大于等于90分为A；\n- 小于90且大于等于80为B；\n- 小于80且大于等于70为C；\n- 小于70且大于等于60为D；\n- 小于60为E。\n\n\n### 输入格式:\n\n输入在一行中给出一个整数的百分制成绩。 \n\n### 输出格式:\n\n在一行中输出对应的五分制成绩。\n\n### 输入样例:\n```in\n90\n```\n\n### 输出样例:\n```out\nA\n```', 1, '中等', '输入在一行中给出一个整数的百分制成绩。', '在一行中输出对应的五分制成绩。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509608419330, 94, '查询水果价格', '给定四种水果，分别是苹果（apple）、梨（pear）、桔子（orange）、葡萄（grape），单价分别对应为3.00元/公斤、2.50元/公斤、4.10元/公斤、10.20元/公斤。\n\n首先在屏幕上显示以下菜单：\n```\n[1] apple\n[2] pear\n[3] orange\n[4] grape\n[0] exit\n```\n用户可以输入编号1~4查询对应水果的单价。当连续查询次数超过5次时，程序应自动退出查询；不到5次而用户输入0即退出；输入其他编号，显示价格为0。\n\n### 输入格式:\n\n输入在一行中给出用户连续输入的若干个编号。\n\n### 输出格式:\n\n首先在屏幕上显示菜单。然后对应用户的每个输入，在一行中按格式“price = 价格”输出查询结果，其中价格保留两位小数。当用户连续查询次数超过5次、或主动输入0时，程序结束。\n\n### 输入样例1:\n```in\n3 -1 0 2\n```\n\n### 输出样例1:\n```out\n[1] apple\n[2] pear\n[3] orange\n[4] grape\n[0] exit\nprice = 4.10\nprice = 0.00\n```\n\n### 输入样例2:\n```\n1 2 3 3 4 4 5 6 7 8\n```\n\n### 输出样例2:\n```\n[1] apple\n[2] pear\n[3] orange\n[4] grape\n[0] exit\nprice = 3.00\nprice = 2.50\nprice = 4.10\nprice = 4.10\nprice = 10.20\n```', 1, '中等', '输入在一行中给出用户连续输入的若干个编号。', '首先在屏幕上显示菜单。然后对应用户的每个输入，在一行中按格式“price = 价格”输出查询结果，其中价格保留两位小数。当用户连续查询次数超过5次、或主动输入0时，程序结束。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509641973761, 95, '输出闰年', '输出21世纪中截止某个年份以来的所有闰年年份。注意：闰年的判别条件是该年年份能被4整除但不能被100整除、或者能被400整除。\n\n### 输入格式:\n\n输入在一行中给出21世纪的某个截止年份。\n\n### 输出格式:\n\n逐行输出满足条件的所有闰年年份，即每个年份占一行。输入若非21世纪的年份则输出\"Invalid year!\"。若不存在任何闰年，则输出“None”。\n\n### 输入样例1:\n```in\n2048\n```\n\n### 输出样例1:\n```out\n2004\n2008\n2012\n2016\n2020\n2024\n2028\n2032\n2036\n2040\n2044\n2048\n```\n\n### 输入样例2:\n```\n2000\n```\n\n### 输出样例2:\n```\nInvalid year!\n```', 1, '中等', '输入在一行中给出21世纪的某个截止年份。', '逐行输出满足条件的所有闰年年份，即每个年份占一行。输入若非21世纪的年份则输出\"Invalid year!\"。若不存在任何闰年，则输出“None”。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509675528194, 96, '比较大小', '本题要求将输入的任意3个整数从小到大输出。\n\n### 输入格式:\n\n输入在一行中给出3个整数，其间以空格分隔。\n\n### 输出格式:\n\n在一行中将3个整数从小到大输出，其间以“->”相连。 \n\n### 输入样例:\n```in\n4 2 8\n```\n\n### 输出样例:\n```out\n2->4->8\n```', 1, '简单', '输入在一行中给出3个整数，其间以空格分隔。', '在一行中将3个整数从小到大输出，其间以“->”相连。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509704888321, 97, '高速公路超速处罚', '按照规定，在高速公路上行使的机动车，达到或超出本车道限速的10%则处200元罚款；若达到或超出50%，就要吊销驾驶证。请编写程序根据车速和限速自动判别对该机动车的处理。\n\n### 输入格式:\n\n输入在一行中给出2个正整数，分别对应车速和限速，其间以空格分隔。\n\n### 输出格式:\n\n在一行中输出处理意见：若属于正常行驶，则输出“OK”；若应处罚款，则输出“Exceed x%. Ticket 200”；若应吊销驾驶证，则输出“Exceed x%. License Revoked”。其中x是超速的百分比，精确到整数。 \n\n### 输入样例1:\n```in\n65 60\n```\n\n### 输出样例1:\n```out\nOK\n```\n\n### 输入样例2:\n```in\n110 100\n```\n\n### 输出样例2:\n```out\nExceed 10%. Ticket 200\n```\n\n### 输入样例3:\n```in\n200 120\n```\n\n### 输出样例3:\n```out\nExceed 67%. License Revoked\n```', 1, '中等', '输入在一行中给出2个正整数，分别对应车速和限速，其间以空格分隔。', '在一行中输出处理意见：若属于正常行驶，则输出“OK”；若应处罚款，则输出“Exceed x%. Ticket 200”；若应吊销驾驶证，则输出“Exceed x%. License Revoked”。其中x是超速的百分比，精确到整数。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509738442753, 98, '出租车计价', '本题要求根据某城市普通出租车收费标准编写程序进行车费计算。具体标准如下：\n\n- 起步里程为3公里，起步费10元；\n- 超起步里程后10公里内，每公里2元；\n- 超过10公里以上的部分加收50%的回空补贴费，即每公里3元；\n- 营运过程中，因路阻及乘客要求临时停车的，按每5分钟2元计收（不足5分钟则不收费）。 \n\n### 输入格式:\n\n输入在一行中给出输入行驶里程（单位为公里，精确到小数点后1位）与等待时间（整数，单位为分钟），其间以空格分隔。\n\n### 输出格式:\n\n在一行中输出乘客应支付的车费（单位为元），结果四舍五入，保留到元。\n\n### 输入样例1:\n```in\n2.6 2\n```\n\n### 输出样例1:\n```out\n10\n```\n\n### 输入样例2:\n```\n5.1 4\n```\n\n### 输出样例2:\n```\n14\n```\n\n### 输入样例3:\n```\n12.5 9\n```\n\n### 输出样例3:\n```\n34\n```', 1, '中等', '输入在一行中给出输入行驶里程（单位为公里，精确到小数点后1位）与等待时间（整数，单位为分钟），其间以空格分隔。', '在一行中输出乘客应支付的车费（单位为元），结果四舍五入，保留到元。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509771997185, 99, '统计学生成绩', '本题要求编写程序读入N个学生的百分制成绩，统计五分制成绩的分布。百分制成绩到五分制成绩的转换规则：\n\n- 大于等于90分为A；\n- 小于90且大于等于80为B；\n- 小于80且大于等于70为C；\n- 小于70且大于等于60为D；\n- 小于60为E。\n\n### 输入格式:\n\n输入在第一行中给出一个正整数N（$$\\le$$1000），即学生人数；第二行中给出N个学生的百分制成绩，其间以空格分隔。 \n\n### 输出格式:\n\n在一行中输出A、B、C、D、E对应的五分制成绩的人数分布，数字间以空格分隔，行末不得有多余空格。\n\n### 输入样例:\n```in\n7\n77 54 92 73 60 65 69\n```\n\n### 输出样例:\n```out\n1 0 2 3 1\n```', 1, '中等', '输入在第一行中给出一个正整数N（$$\\le$$1000），即学生人数；第二行中给出N个学生的百分制成绩，其间以空格分隔。', '在一行中输出A、B、C、D、E对应的五分制成绩的人数分布，数字间以空格分隔，行末不得有多余空格。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509801357313, 100, '三角形判断', '给定平面上任意三个点的坐标$$(x_1, y_1)$$、$$(x_2, y_2)$$、$$(x_3, y_3)$$，检验它们能否构成三角形。\n\n### 输入格式:\n\n输入在一行中顺序给出六个$$[-100, 100]$$范围内的数字，即三个点的坐标$$x_1$$、$$y_1$$、$$x_2$$、$$y_2$$、$$x_3$$、$$y_3$$。 \n\n### 输出格式:\n\n若这3个点不能构成三角形，则在一行中输出“Impossible”；若可以，则在一行中输出该三角形的周长和面积，格式为“L = 周长, A = 面积”，输出到小数点后2位。\n\n### 输入样例1:\n```in\n4 5 6 9 7 8\n```\n\n### 输出样例1:\n```out\nL = 10.13, A = 3.00\n```\n\n### 输入样例2:\n```\n4 6 8 12 12 18\n```\n\n### 输出样例2:\n```\nImpossible\n```', 1, '中等', '输入在一行中顺序给出六个$$[-100, 100]$$范围内的数字，即三个点的坐标$$x_1$$、$$y_1$$、$$x_2$$、$$y_2$$、$$x_3$$、$$y_3$$。', '若这3个点不能构成三角形，则在一行中输出“Impossible”；若可以，则在一行中输出该三角形的周长和面积，格式为“L = 周长, A = 面积”，输出到小数点后2位。', 200, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509860077570, 101, '求给定精度的简单交错序列部分和', '本题要求编写程序，计算序列部分和 1 - 1/4 + 1/7 - 1/10 + ... 直到最后一项的绝对值不大于给定精度eps。\n\n### 输入格式:\n\n输入在一行中给出一个正实数eps。\n\n### 输出格式:\n\n在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后六位。题目保证计算结果不超过双精度范围。\n\n### 输入样例1:\n```in\n4E-2\n```\n\n### 输出样例1:\n```out\nsum = 0.854457\n```\n\n### 输入样例2:\n```\n0.02\n```\n\n### 输出样例2:\n```\nsum = 0.826310\n```', 1, '中等', '输入在一行中给出一个正实数eps。', '在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后六位。题目保证计算结果不超过双精度范围。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509897826306, 102, '猜数字游戏', '猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（$$>$$3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。\n\n### 输入格式:\n\n输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。\n\n### 输出格式:\n\n在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。\n\n### 输入样例:\n```in\n58 4\n70\n50\n56\n58\n60\n-2\n```\n\n### 输出样例:\n```out\nToo big\nToo small\nToo small\nGood Guess!\n```', 1, '中等', '输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。', '在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509935575042, 103, '求e的近似值', '自然常数 $$e$$ 可以用级数 $$1+1/1!+1/2!+\\cdots +1/n! +\\cdots$$ 来近似计算。本题要求对给定的非负整数 $$n$$，求该级数的前 $$n+1$$ 项和。\n\n### 输入格式:\n\n输入第一行中给出非负整数 $$n$$（$$\\le 1000$$）。\n\n### 输出格式:\n\n在一行中输出部分和的值，保留小数点后八位。\n\n### 输入样例:\n```in\n10\n```\n\n### 输出样例:\n```out\n2.71828180\n```', 1, '中等', '输入第一行中给出非负整数 $$n$$（$$\\le 1000$$）。', '在一行中输出部分和的值，保留小数点后八位。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821509977518082, 104, '找出最小值', '本题要求编写程序，找出给定一系列整数中的最小值。\n\n### 输入格式：\n\n输入在一行中首先给出一个正整数$$n$$，之后是$$n$$个整数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中按照“min = 最小值”的格式输出$$n$$个整数中的最小值。\n\n### 输入样例：\n```in\n4 -2 -123 100 0\n```\n\n### 输出样例：\n```out\nmin = -123\n```', 1, '困难', '输入在一行中首先给出一个正整数$$n$$，之后是$$n$$个整数，其间以空格分隔。', '在一行中按照“min = 最小值”的格式输出$$n$$个整数中的最小值。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510019461121, 105, '统计素数并求和', '本题要求统计给定整数$$M$$和$$N$$区间内素数的个数并对它们求和。\n\n### 输入格式:\n\n输入在一行中给出两个正整数$$M$$和$$N$$（$$1\\le M\\le N\\le 500$$）。\n\n\n### 输出格式:\n\n在一行中顺序输出$$M$$和$$N$$区间内素数的个数以及它们的和，数字间以空格分隔。\n\n### 输入样例:\n```in\n10 31\n```\n\n### 输出样例:\n```out\n7 143\n```', 1, '困难', '输入在一行中给出两个正整数$$M$$和$$N$$（$$1\\le M\\le N\\le 500$$）。', '在一行中顺序输出$$M$$和$$N$$区间内素数的个数以及它们的和，数字间以空格分隔。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510057209857, 106, '求奇数和', '本题要求计算给定的一系列正整数中奇数的和。\n\n### 输入格式:\n\n输入在一行中给出一系列正整数，其间以空格分隔。当读到零或负整数时，表示输入结束，该数字不要处理。\n\n### 输出格式:\n\n在一行中输出正整数序列中奇数的和。\n\n### 输入样例:\n```in\n8 7 4 3 70 5 6 101 -1\n```\n\n### 输出样例:\n```out\n116\n```', 1, '中等', '输入在一行中给出一系列正整数，其间以空格分隔。当读到零或负整数时，表示输入结束，该数字不要处理。', '在一行中输出正整数序列中奇数的和。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510099152898, 107, '求幂级数展开的部分和', '已知函数$$e^x$$可以展开为幂级数$$1+x+x^2 /2! + x^3 /3! + \\cdots + x^k /k! + \\cdots$$。现给定一个实数$$x$$，要求利用此幂级数部分和求$$e^x$$的近似值，求和一直继续到最后一项的绝对值小于0.00001。\n\n### 输入格式:\n\n输入在一行中给出一个实数$$x\\in [0, 5]$$。\n\n### 输出格式:\n\n在一行中输出满足条件的幂级数部分和，保留小数点后四位。\n\n### 输入样例:\n```in\n1.2\n```\n\n### 输出样例:\n```out\n3.3201\n```', 1, '困难', '输入在一行中给出一个实数$$x\\in [0, 5]$$。', '在一行中输出满足条件的幂级数部分和，保留小数点后四位。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510132707330, 108, '求分数序列前N项和', '本题要求编写程序，计算序列 2/1+3/2+5/3+8/5+... 的前N项之和。注意该序列从第2项起，每一项的分子是前一项分子与分母的和，分母是前一项的分子。\n\n### 输入格式:\n\n输入在一行中给出一个正整数N。\n\n### 输出格式:\n\n在一行中输出部分和的值，精确到小数点后两位。题目保证计算结果不超过双精度范围。\n\n### 输入样例:\n```in\n20\n```\n\n### 输出样例:\n```out\n32.66\n```', 1, '中等', '输入在一行中给出一个正整数N。', '在一行中输出部分和的值，精确到小数点后两位。题目保证计算结果不超过双精度范围。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510178844674, 109, '特殊a串数列求和', '给定两个均不超过9的正整数$$a$$和$$n$$，要求编写程序求$$a+aa+aaa++\\cdots +aa\\cdots a$$（$$n$$个$$a$$）之和。\n\n### 输入格式：\n\n输入在一行中给出不超过9的正整数$$a$$和$$n$$。\n\n### 输出格式：\n\n在一行中按照“s = 对应的和”的格式输出。\n\n### 输入样例：\n```in\n2 3\n```\n\n### 输出样例：\n```out\ns = 246\n```', 1, '困难', '输入在一行中给出不超过9的正整数$$a$$和$$n$$。', '在一行中按照“s = 对应的和”的格式输出。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510220787714, 110, '换硬币', '将一笔零钱换成5分、2分和1分的硬币，要求每种硬币至少有一枚，有几种不同的换法？\n\n### 输入格式:\n\n输入在一行中给出待换的零钱数额$$x\\in (8, 100)$$。\n\n### 输出格式:\n\n要求按5分、2分和1分硬币的数量依次从大到小的顺序，输出各种换法。每行输出一种换法，格式为：“fen5:5分硬币数量, fen2:2分硬币数量, fen1:1分硬币数量, total:硬币总数量”。最后一行输出“count = 换法个数”。\n\n### 输入样例:\n```in\n13\n```\n\n### 输出样例:\n```out\nfen5:2, fen2:1, fen1:1, total:4\nfen5:1, fen2:3, fen1:2, total:6\nfen5:1, fen2:2, fen1:4, total:7\nfen5:1, fen2:1, fen1:6, total:8\ncount = 4\n```', 1, '困难', '输入在一行中给出待换的零钱数额$$x\\in (8, 100)$$。', '要求按5分、2分和1分硬币的数量依次从大到小的顺序，输出各种换法。每行输出一种换法，格式为：“fen5:5分硬币数量, fen2:2分硬币数量, fen1:1分硬币数量, total:硬币总数量”。最后一行输出“count = 换法个数”。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510254342146, 111, '水仙花数', '水仙花数是指一个$$N$$位正整数（$$N\\ge 3$$），它的每个位上的数字的$$N$$次幂之和等于它本身。例如：$$153 = 1^3 + 5^3+ 3^3$$。 本题要求编写程序,计算所有$$N$$位水仙花数。\n\n### 输入格式:\n\n输入在一行中给出一个正整数$$N$$（$$3\\le N\\le 7$$）。 \n\n### 输出格式:\n\n按递增顺序输出所有$$N$$位水仙花数，每个数字占一行。\n\n### 输入样例:\n```in\n3\n```\n\n### 输出样例:\n```out\n153\n370\n371\n407\n```', 1, '困难', '输入在一行中给出一个正整数$$N$$（$$3\\le N\\le 7$$）。', '按递增顺序输出所有$$N$$位水仙花数，每个数字占一行。', 2500, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510292090881, 112, '最大公约数和最小公倍数', '本题要求两个给定正整数的最大公约数和最小公倍数。\n\n### 输入格式:\n\n输入在一行中给出两个正整数M和N（$$\\le 1000$$）。\n\n### 输出格式:\n\n在一行中顺序输出M和N的最大公约数和最小公倍数，两数字间以1空格分隔。\n\n### 输入样例:\n```in\n511 292\n```\n\n### 输出样例:\n```out\n73 2044\n```\n\n**鸣谢安阳师范学院段晓云老师和软件工程五班李富龙同学补充测试数据！**', 1, '中等', '输入在一行中给出两个正整数M和N（$$\\le 1000$$）。', '在一行中顺序输出M和N的最大公约数和最小公倍数，两数字间以1空格分隔。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510329839618, 113, '高空坠球', '皮球从某给定高度自由落下，触地后反弹到原高度的一半，再落下，再反弹，……，如此反复。问皮球在第$$n$$次落地时，在空中一共经过多少距离？第$$n$$次反弹的高度是多少？\n\n### 输入格式:\n\n输入在一行中给出两个非负整数，分别是皮球的初始高度和$$n$$，均在长整型范围内。 \n\n### 输出格式:\n\n在一行中顺序输出皮球第$$n$$次落地时在空中经过的距离、以及第$$n$$次反弹的高度，其间以一个空格分隔，保留一位小数。题目保证计算结果不超过双精度范围。\n\n### 输入样例:\n```in\n33 5\n```\n\n### 输出样例:\n```out\n94.9 1.0\n```', 1, '困难', '输入在一行中给出两个非负整数，分别是皮球的初始高度和$$n$$，均在长整型范围内。', '在一行中顺序输出皮球第$$n$$次落地时在空中经过的距离、以及第$$n$$次反弹的高度，其间以一个空格分隔，保留一位小数。题目保证计算结果不超过双精度范围。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510363394050, 114, '打印菱形图案', '本题要求编写程序，打印一个高度为$$n$$的、由“*”组成的正菱形图案。\n\n### 输入格式:\n\n输入在一行中给出一个正的奇数$$n$$。 \n\n### 输出格式:\n\n输出由$$n$$行星号“*”组成的菱形，如样例所示。每个星号后跟一个空格。\n\n### 输入样例:\n```in\n7\n```\n\n### 输出样例:\n```out\n      * \n    * * * \n  * * * * * \n* * * * * * * \n  * * * * * \n    * * * \n      * \n```', 1, '中等', '输入在一行中给出一个正的奇数$$n$$。', '输出由$$n$$行星号“*”组成的菱形，如样例所示。每个星号后跟一个空格。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510401142786, 115, '猴子吃桃问题', '一只猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个；第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半加一个。到第$$N$$天早上想再吃时，见只剩下一个桃子了。问：第一天共摘了多少个桃子？\n\n### 输入格式:\n\n输入在一行中给出正整数$$N$$（$$1<N\\le 10$$）。\n\n### 输出格式:\n\n在一行中输出第一天共摘了多少个桃子。\n\n### 输入样例:\n```in\n3\n```\n\n### 输出样例:\n```out\n10\n```', 1, '中等', '输入在一行中给出正整数$$N$$（$$1<N\\le 10$$）。', '在一行中输出第一天共摘了多少个桃子。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383821510438891522, 116, '兔子繁衍问题', '一对兔子，从出生后第3个月起每个月都生一对兔子。小兔子长到第3个月后每个月又生一对兔子。假如兔子都不死，请问第1个月出生的一对兔子，至少需要繁衍到第几个月时兔子总数才可以达到$$N$$对？\n\n### 输入格式:\n\n输入在一行中给出一个不超过10000的正整数$$N$$。\n\n### 输出格式:\n\n在一行中输出兔子总数达到$$N$$最少需要的月数。\n\n### 输入样例:\n```in\n30\n```\n\n### 输出样例:\n```out\n9\n```', 1, '中等', '输入在一行中给出一个不超过10000的正整数$$N$$。', '在一行中输出兔子总数达到$$N$$最少需要的月数。', 400, 65536, '2021-04-19 00:35:33', '2021-04-19 00:35:33', 0, NULL);
INSERT INTO `question` VALUES (1383824455997886465, 117, '二分查找', '本题要求实现二分查找算法。\n\n### 函数接口定义：\n```c++\nPosition BinarySearch( List L, ElementType X );\n```\n\n其中`List`结构定义如下：\n```c++\ntypedef int Position;\ntypedef struct LNode *List;\nstruct LNode {\n    ElementType Data[MAXSIZE];\n    Position Last; /* 保存线性表中最后一个元素的位置 */\n};\n```\n`L`是用户传入的一个线性表，其中`ElementType`元素可以通过$$>$$、$$==$$、$$<$$进行比较，并且题目保证传入的数据是递增有序的。函数`BinarySearch`要查找`X`在`Data`中的位置，即数组下标（注意：元素从下标1开始存储）。找到则返回下标，否则返回一个特殊的失败标记`NotFound`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXSIZE 10\n#define NotFound 0\ntypedef int ElementType;\n\ntypedef int Position;\ntypedef struct LNode *List;\nstruct LNode {\n    ElementType Data[MAXSIZE];\n    Position Last; /* 保存线性表中最后一个元素的位置 */\n};\n\nList ReadInput(); /* 裁判实现，细节不表。元素从下标1开始存储 */\nPosition BinarySearch( List L, ElementType X );\n\nint main()\n{\n    List L;\n    ElementType X;\n    Position P;\n\n    L = ReadInput();\n    scanf(\"%d\", &X);\n    P = BinarySearch( L, X );\n    printf(\"%d\\n\", P);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n5\n12 31 55 89 101\n31\n```\n\n### 输出样例1：\n```out\n2\n```\n\n### 输入样例2：\n```\n3\n26 78 233\n31\n```\n\n### 输出样例2：\n```\n0\n```\n\n**鸣谢宁波大学 Eyre-lemon-郎俊杰 同学修正原题！**', 2, '困难', '5\n12 31 55 89 101\n31', '0', 100, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456366985218, 118, '有序数组的插入', '本题要求将任一给定元素插入从大到小排好序的数组中合适的位置，以保持结果依然有序。\n\n### 函数接口定义：\n```c++\nbool Insert( List L, ElementType X );\n```\n\n其中`List`结构定义如下：\n```c++\ntypedef int Position;\ntypedef struct LNode *List;\nstruct LNode {\n    ElementType Data[MAXSIZE];\n    Position Last; /* 保存线性表中最后一个元素的位置 */\n};\n```\n\n`L`是用户传入的一个线性表，其中`ElementType`元素可以通过$$>$$、$$==$$、$$<$$进行比较，并且题目保证传入的数据是递减有序的。函数`Insert`要将`X`插入`Data[]`中合适的位置，以保持结果依然有序（注意：元素从下标0开始存储）。但如果`X`已经在`Data[]`中了，就不要插入，返回失败的标记`false`；如果插入成功，则返回`true`。另外，因为`Data[]`中最多只能存`MAXSIZE`个元素，所以如果插入新元素之前已经满了，也不要插入，而是返回失败的标记`false`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXSIZE 10\ntypedef enum {false, true} bool;\ntypedef int ElementType;\n\ntypedef int Position;\ntypedef struct LNode *List;\nstruct LNode {\n    ElementType Data[MAXSIZE];\n    Position Last; /* 保存线性表中最后一个元素的位置 */\n};\n\nList ReadInput(); /* 裁判实现，细节不表。元素从下标0开始存储 */\nvoid PrintList( List L ); /* 裁判实现，细节不表 */\nbool Insert( List L, ElementType X );\n\nint main()\n{\n    List L;\n    ElementType X;\n\n    L = ReadInput();\n    scanf(\"%d\", &X);\n    if ( Insert( L, X ) == false )\n        printf(\"Insertion failed.\\n\");\n    PrintList( L );\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：\n```in\n5\n35 12 8 7 3\n10\n```\n\n### 输出样例1：\n```out\n35 12 10 8 7 3\nLast = 5\n```\n\n### 输入样例2：\n```in\n6\n35 12 10 8 7 3\n8\n```\n\n### 输出样例2：\n```out\nInsertion failed.\n35 12 10 8 7 3\nLast = 5\n```\n', 2, '困难', '5\n35 12 8 7 3\n10', 'Insertion failed.\n35 12 10 8 7 3\nLast = 5', 1000, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456408928257, 119, '递增的整数序列链表的插入', '本题要求实现一个函数，在递增的整数序列链表（带头结点）中插入一个新整数，并保持该序列的有序性。\n\n### 函数接口定义：\n```c++\nList Insert( List L, ElementType X );\n```\n\n其中`List`结构定义如下：\n```c++\ntypedef struct Node *PtrToNode;\nstruct Node {\n    ElementType Data; /* 存储结点数据 */\n    PtrToNode   Next; /* 指向下一个结点的指针 */\n};\ntypedef PtrToNode List; /* 定义单链表类型 */\n```\n`L`是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数`Insert`要将`X`插入`L`，并保持该序列的有序性，返回插入后的链表头指针。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElementType;\ntypedef struct Node *PtrToNode;\nstruct Node {\n    ElementType Data;\n    PtrToNode   Next;\n};\ntypedef PtrToNode List;\n\nList Read(); /* 细节在此不表 */\nvoid Print( List L ); /* 细节在此不表 */\n\nList Insert( List L, ElementType X );\n\nint main()\n{\n    List L;\n    ElementType X;\n    L = Read();\n    scanf(\"%d\", &X);\n    L = Insert(L, X);\n    Print(L);\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n5\n1 2 4 5 6\n3\n```\n\n### 输出样例：\n```out\n1 2 3 4 5 6 \n```', 2, '中等', '5\n1 2 4 5 6\n3', '1 2 3 4 5 6', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456434094081, 120, '两个有序链表序列的合并', '本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。\n\n### 函数接口定义：\n```c++\nList Merge( List L1, List L2 );\n```\n\n其中`List`结构定义如下：\n```c++\ntypedef struct Node *PtrToNode;\nstruct Node {\n    ElementType Data; /* 存储结点数据 */\n    PtrToNode   Next; /* 指向下一个结点的指针 */\n};\ntypedef PtrToNode List; /* 定义单链表类型 */\n```\n`L1`和`L2`是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数`Merge`要将`L1`和`L2`合并为一个非递减的整数序列。应直接使用原序列中的结点，返回归并后的带头结点的链表头指针。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElementType;\ntypedef struct Node *PtrToNode;\nstruct Node {\n    ElementType Data;\n    PtrToNode   Next;\n};\ntypedef PtrToNode List;\n\nList Read(); /* 细节在此不表 */\nvoid Print( List L ); /* 细节在此不表；空链表将输出NULL */\n\nList Merge( List L1, List L2 );\n\nint main()\n{\n    List L1, L2, L;\n    L1 = Read();\n    L2 = Read();\n    L = Merge(L1, L2);\n    Print(L);\n    Print(L1);\n    Print(L2);\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n3\n1 3 5\n5\n2 4 6 8 10\n```\n\n### 输出样例：\n```out\n1 2 3 4 5 6 8 10 \nNULL\nNULL\n```', 2, '中等', '3\n1 3 5\n5\n2 4 6 8 10', '1 2 3 4 5 6 8 10 \nNULL\nNULL', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456459259906, 121, '递归求简单交错幂级数的部分和', '本题要求实现一个函数，计算下列简单交错幂级数的部分和：\n\n$$ f(x, n) = x - x^2 + x^3 - x^4 + \\cdots + (-1)^{n-1}x^n $$\n\n\n### 函数接口定义：\n```c++\ndouble fn( double x, int n );\n```\n其中题目保证传入的`n`是正整数，并且输入输出都在双精度范围内。函数`fn`应返回上述级数的部分和。建议尝试用递归实现。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ndouble fn( double x, int n );\n\nint main()\n{\n    double x;\n    int n;\n    \n    scanf(\"%lf %d\", &x, &n);\n    printf(\"%.2f\\n\", fn(x,n));\n    \n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n0.5 12\n```\n\n### 输出样例：\n```out\n0.33\n```', 2, '中等', '0.5 12', '0.33', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456492814338, 122, '弹球距离', '设有一个球从高度为$$h$$米的地方落下，碰到地面后又弹到高度为原来$$p$$倍的位置，然后又落下，再弹起，再落下…。请编写函数求初始高度为$$h$$的球下落后到基本停下来（高度小于给定阈值TOL）时在空中所经过的路程总和。\n\n### 函数接口定义：\n```c++\ndouble dist( double h, double p );\n```\n\n其中`h`是球的初始高度，`p`是球弹起高度与弹起前落下高度的比值；函数`dist`要返回球下落后到基本停下来时在空中所经过的路程总和。注意：当弹起的高度小于裁判程序定义的常数`TOL`时，弹起的距离不计算在内。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define TOL 1E-2\n\ndouble dist( double h, double p );\n\nint main()\n{\n    double h, p, d;\n    scanf(\"%lf %lf\", &h, &p);\n    d = dist(h, p);\n    printf(\"%.6f\\n\", d);\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n1.0 0.4\n```\n\n### 输出样例：\n```out\n2.319680\n```', 2, '中等', '1.0 0.4', '2.319680', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456517980162, 123, '线性表元素的区间删除', '给定一个顺序存储的线性表，请设计一个函数删除所有值大于min而且小于max的元素。删除后表中剩余元素保持顺序存储，并且相对位置不能改变。\n\n### 函数接口定义：\n```c++\nList Delete( List L, ElementType minD, ElementType maxD );\n```\n\n其中`List`结构定义如下：\n```c++\ntypedef int Position;\ntypedef struct LNode *List;\nstruct LNode {\n    ElementType Data[MAXSIZE];\n    Position Last; /* 保存线性表中最后一个元素的位置 */\n};\n```\n\n`L`是用户传入的一个线性表，其中`ElementType`元素可以通过$$>$$、$$==$$、$$<$$进行比较；`minD`和`maxD`分别为待删除元素的值域的下、上界。函数`Delete`应将`Data[]`中所有值大于`minD`而且小于`maxD`的元素删除，同时保证表中剩余元素保持顺序存储，并且相对位置不变，最后返回删除后的表。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n#define MAXSIZE 20\ntypedef int ElementType;\n\ntypedef int Position;\ntypedef struct LNode *List;\nstruct LNode {\n    ElementType Data[MAXSIZE];\n    Position Last; /* 保存线性表中最后一个元素的位置 */\n};\n\nList ReadInput(); /* 裁判实现，细节不表。元素从下标0开始存储 */\nvoid PrintList( List L ); /* 裁判实现，细节不表 */\nList Delete( List L, ElementType minD, ElementType maxD );\n\nint main()\n{\n    List L;\n    ElementType minD, maxD;\n    int i;\n\n    L = ReadInput();\n    scanf(\"%d %d\", &minD, &maxD);\n    L = Delete( L, minD, maxD );\n    PrintList( L );\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n10\n4 -8 2 12 1 5 9 3 3 10\n0 4\n```\n\n### 输出样例：\n```out\n4 -8 12 5 9 10 \n```\n\n', 2, '困难', '10\n4 -8 2 12 1 5 9 3 3 10\n0 4', '4 -8 12 5 9 10', 200, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456543145986, 124, '求链表的倒数第m个元素', '请设计时间和空间上都尽可能高效的算法，在不改变链表的前提下，求链式存储的线性表的倒数第m（$$>0$$）个元素。\n\n### 函数接口定义：\n```c++\nElementType Find( List L, int m );\n```\n\n其中`List`结构定义如下：\n```c++\ntypedef struct Node *PtrToNode;\nstruct Node {\n    ElementType Data; /* 存储结点数据 */\n    PtrToNode   Next; /* 指向下一个结点的指针 */\n};\ntypedef PtrToNode List; /* 定义单链表类型 */\n```\n`L`是给定的带头结点的单链表；函数`Find`要将`L`的倒数第`m`个元素返回，并不改变原链表。如果这样的元素不存在，则返回一个错误标志`ERROR`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n#define ERROR -1\n\ntypedef int ElementType;\ntypedef struct Node *PtrToNode;\nstruct Node {\n    ElementType Data;\n    PtrToNode   Next;\n};\ntypedef PtrToNode List;\n\nList Read(); /* 细节在此不表 */\nvoid Print( List L ); /* 细节在此不表 */\n\nElementType Find( List L, int m );\n\nint main()\n{\n    List L;\n    int m;\n    L = Read();\n    scanf(\"%d\", &m);\n    printf(\"%d\\n\", Find(L,m));\n    Print(L);\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n5\n1 2 4 5 6\n3\n```\n\n### 输出样例：\n```out\n4\n1 2 4 5 6 \n```', 2, '困难', '5\n1 2 4 5 6\n3', '4\n1 2 4 5 6', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456568311809, 125, '另类循环队列', '如果用一个循环数组表示队列，并且只设队列头指针Front，不设尾指针Rear，而是另设Count记录队列中元素个数。请编写算法实现队列的入队和出队操作。\n\n### 函数接口定义：\n```c++\nbool AddQ( Queue Q, ElementType X );\nElementType DeleteQ( Queue Q );\n```\n\n其中`Queue`结构定义如下：\n\n```c++\ntypedef int Position;\ntypedef struct QNode *PtrToQNode;\nstruct QNode {\n    ElementType *Data;  /* 存储元素的数组   */\n    Position Front;     /* 队列的头指针     */\n    int Count;          /* 队列中元素个数   */\n    int MaxSize;        /* 队列最大容量     */\n};\ntypedef PtrToQNode Queue; \n```\n注意：如果队列已满，`AddQ`函数必须输出“Queue Full”并且返回false；如果队列是空的，则`DeleteQ`函数必须输出“Queue Empty”，并且返回ERROR。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n#define ERROR -1\ntypedef int ElementType;\ntypedef enum { addq, delq, end } Operation;\ntypedef enum { false, true } bool;\ntypedef int Position;\ntypedef struct QNode *PtrToQNode;\nstruct QNode {\n    ElementType *Data;  /* 存储元素的数组   */\n    Position Front;     /* 队列的头、尾指针 */\n    int Count;          /* 队列中元素个数   */\n    int MaxSize;        /* 队列最大容量     */\n};\ntypedef PtrToQNode Queue; \n\nQueue CreateQueue( int MaxSize )\n{\n    Queue Q = (Queue)malloc(sizeof(struct QNode));\n    Q->Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));\n    Q->Front = 0;\n    Q->Count = 0;\n    Q->MaxSize = MaxSize;\n    return Q;\n}\n\nbool AddQ( Queue Q, ElementType X );\nElementType DeleteQ( Queue Q );\n\nOperation GetOp();  /* 裁判实现，细节不表 */\n\nint main()\n{\n    ElementType X;\n    Queue Q;\n    int N, done = 0;\n\n    scanf(\"%d\", &N);\n    Q = CreateQueue(N);\n    while ( !done ) {\n        switch( GetOp() ) {\n        case addq: \n            scanf(\"%d\", &X);\n            AddQ(Q, X);\n            break;\n        case delq:\n            X = DeleteQ(Q);\n            if ( X!=ERROR ) printf(\"%d is out\\n\", X);\n            break;\n        case end:\n            while (Q->Count) printf(\"%d \", DeleteQ(Q));\n            done = 1;\n            break;\n        }\n    }\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n4\nDel\nAdd 5\nAdd 4\nAdd 3\nDel\nDel\nAdd 2\nAdd 1\nAdd 0\nAdd 10\nEnd\n```\n\n### 输出样例：\n```out\nQueue Empty\n5 is out\n4 is out\nQueue Full\n3 2 1 0 \n```', 2, '困难', '4\nDel\nAdd 5\nAdd 4\nAdd 3\nDel\nDel\nAdd 2\nAdd 1\nAdd 0\nAdd 10\nEnd', 'Queue Empty\n5 is out\n4 is out\nQueue Full\n3 2 1 0', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456585089026, 126, '双端队列', '双端队列（deque，即double-ended queue的缩写）是一种具有队列和栈性质的数据结构，即可以（也只能）在线性表的两端进行插入和删除。若以顺序存储方式实现双端队列，请编写例程实现下列操作：\n\n- `Push(X,D)`：将元素`X`插入到双端队列`D`的头；\n- `Pop(D)`：删除双端队列`D`的头元素，并返回；\n- `Inject(X,D)`：将元素`X`插入到双端队列`D`的尾部；\n- `Eject(D)`：删除双端队列`D`的尾部元素，并返回。\n\n### 函数接口定义：\n```c++\nbool Push( ElementType X, Deque D );\nElementType Pop( Deque D );\nbool Inject( ElementType X, Deque D );\nElementType Eject( Deque D );\n```\n\n其中`Deque`结构定义如下：\n\n```c++\ntypedef int Position;\ntypedef struct QNode *PtrToQNode;\nstruct QNode {\n    ElementType *Data;      /* 存储元素的数组   */\n    Position Front, Rear;   /* 队列的头、尾指针 */\n    int MaxSize;            /* 队列最大容量     */\n};\ntypedef PtrToQNode Deque; \n```\n注意：`Push`和`Inject`应该在正常执行完操作后返回true，或者在出现非正常情况时返回false。当`Front`和`Rear`相等时队列为空，`Pop`和`Eject`必须返回由裁判程序定义的`ERROR`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n#define ERROR -1\ntypedef int ElementType;\ntypedef enum { push, pop, inject, eject, end } Operation;\ntypedef enum { false, true } bool;\ntypedef int Position;\ntypedef struct QNode *PtrToQNode;\nstruct QNode {\n    ElementType *Data;      /* 存储元素的数组   */\n    Position Front, Rear;   /* 队列的头、尾指针 */\n    int MaxSize;            /* 队列最大容量     */\n};\ntypedef PtrToQNode Deque; \n\nDeque CreateDeque( int MaxSize )\n{   /* 注意：为区分空队列和满队列，需要多开辟一个空间 */\n    Deque D = (Deque)malloc(sizeof(struct QNode));\n    MaxSize++;\n    D->Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));\n    D->Front = D->Rear = 0;\n    D->MaxSize = MaxSize;\n    return D;\n}\n\nbool Push( ElementType X, Deque D );\nElementType Pop( Deque D );\nbool Inject( ElementType X, Deque D );\nElementType Eject( Deque D );\n\nOperation GetOp();          /* 裁判实现，细节不表 */\nvoid PrintDeque( Deque D ); /* 裁判实现，细节不表 */\n\nint main()\n{\n    ElementType X;\n    Deque D;\n    int N, done = 0;\n\n    scanf(\"%d\", &N);\n    D = CreateDeque(N);\n    while (!done) {\n        switch(GetOp()) {\n        case push: \n            scanf(\"%d\", &X);\n            if (!Push(X, D)) printf(\"Deque is Full!\\n\");\n            break;\n        case pop:\n            X = Pop(D);\n            if ( X==ERROR ) printf(\"Deque is Empty!\\n\");\n            else printf(\"%d is out\\n\", X);\n            break;\n        case inject: \n            scanf(\"%d\", &X);\n            if (!Inject(X, D)) printf(\"Deque is Full!\\n\");\n            break;\n        case eject:\n            X = Eject(D);\n            if ( X==ERROR ) printf(\"Deque is Empty!\\n\");\n            else printf(\"%d is out\\n\", X);\n            break;\n        case end:\n            PrintDeque(D);\n            done = 1;\n            break;\n        }\n    }\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n3\nPop\nInject 1\nPop\nEject\nPush 2\nPush 3\nEject\nInject 4\nInject 5\nInject 6\nPush 7\nPop\nEnd\n```\n\n### 输出样例：\n```out\nDeque is Empty!\n1 is out\nDeque is Empty!\n2 is out\nDeque is Full!\nDeque is Full!\n3 is out\nInside Deque: 4 5\n```', 2, '困难', '3\nPop\nInject 1\nPop\nEject\nPush 2\nPush 3\nEject\nInject 4\nInject 5\nInject 6\nPush 7\nPop\nEnd', 'Deque is Empty!\n1 is out\nDeque is Empty!\n2 is out\nDeque is Full!\nDeque is Full!\n3 is out\nInside Deque: 4 5', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456610254849, 127, '另类堆栈', '在栈的顺序存储实现中，另有一种方法是将Top定义为栈顶的上一个位置。请编写程序实现这种定义下堆栈的入栈、出栈操作。如何判断堆栈为空或者满？\n\n### 函数接口定义：\n```c++\nbool Push( Stack S, ElementType X );\nElementType Pop( Stack S );\n```\n\n其中`Stack`结构定义如下：\n\n```c++\ntypedef int Position;\ntypedef struct SNode *PtrToSNode;\nstruct SNode {\n    ElementType *Data;  /* 存储元素的数组 */\n    Position Top;       /* 栈顶指针       */\n    int MaxSize;        /* 堆栈最大容量   */\n};\ntypedef PtrToSNode Stack;\n```\n注意：如果堆栈已满，`Push`函数必须输出“Stack Full”并且返回false；如果队列是空的，则`Pop`函数必须输出“Stack Empty”，并且返回ERROR。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n#define ERROR -1\ntypedef int ElementType;\ntypedef enum { push, pop, end } Operation;\ntypedef enum { false, true } bool;\ntypedef int Position;\ntypedef struct SNode *PtrToSNode;\nstruct SNode {\n    ElementType *Data;  /* 存储元素的数组 */\n    Position Top;       /* 栈顶指针       */\n    int MaxSize;        /* 堆栈最大容量   */\n};\ntypedef PtrToSNode Stack;\n\nStack CreateStack( int MaxSize )\n{\n    Stack S = (Stack)malloc(sizeof(struct SNode));\n    S->Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));\n    S->Top = 0;\n    S->MaxSize = MaxSize;\n    return S;\n}\n\nbool Push( Stack S, ElementType X );\nElementType Pop( Stack S );\n\nOperation GetOp();          /* 裁判实现，细节不表 */\nvoid PrintStack( Stack S ); /* 裁判实现，细节不表 */\n\nint main()\n{\n    ElementType X;\n    Stack S;\n    int N, done = 0;\n\n    scanf(\"%d\", &N);\n    S = CreateStack(N);\n    while ( !done ) {\n        switch( GetOp() ) {\n        case push: \n            scanf(\"%d\", &X);\n            Push(S, X);\n            break;\n        case pop:\n            X = Pop(S);\n            if ( X!=ERROR ) printf(\"%d is out\\n\", X);\n            break;\n        case end:\n            PrintStack(S);\n            done = 1;\n            break;\n        }\n    }\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：\n```in\n4\nPop\nPush 5\nPush 4\nPush 3\nPop\nPop\nPush 2\nPush 1\nPush 0\nPush 10\nEnd\n```\n\n### 输出样例：\n```out\nStack Empty\n3 is out\n4 is out\nStack Full\n0 1 2 5 \n```', 2, '中等', '4\nPop\nPush 5\nPush 4\nPush 3\nPop\nPop\nPush 2\nPush 1\nPush 0\nPush 10\nEnd', 'Stack Empty\n3 is out\n4 is out\nStack Full\n0 1 2 5', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456627032066, 128, '是否二叉搜索树', '本题要求实现函数，判断给定二叉树是否二叉搜索树。\n\n### 函数接口定义：\n```c++\nbool IsBST ( BinTree T );\n```\n\n其中`BinTree`结构定义如下：\n```c++\ntypedef struct TNode *Position;\ntypedef Position BinTree;\nstruct TNode{\n    ElementType Data;\n    BinTree Left;\n    BinTree Right;\n};\n```\n函数`IsBST`须判断给定的`T`是否二叉搜索树，即满足如下定义的二叉树：\n\n定义：一个二叉搜索树是一棵二叉树，它可以为空。如果不为空，它将满足以下性质：\n\n- 非空左子树的所有键值小于其根结点的键值。\n- 非空右子树的所有键值大于其根结点的键值。\n- 左、右子树都是二叉搜索树。\n\n如果`T`是二叉搜索树，则函数返回true，否则返回false。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef enum { false, true } bool;\ntypedef int ElementType;\ntypedef struct TNode *Position;\ntypedef Position BinTree;\nstruct TNode{\n    ElementType Data;\n    BinTree Left;\n    BinTree Right;\n};\n\nBinTree BuildTree(); /* 由裁判实现，细节不表 */\nbool IsBST ( BinTree T );\n\nint main()\n{\n    BinTree T;\n\n    T = BuildTree();\n    if ( IsBST(T) ) printf(\"Yes\\n\");\n    else printf(\"No\\n\");\n\n    return 0;\n}\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：如下图\n\n![](~/98)\n\n### 输出样例1：\n```out\nYes\n```\n\n### 输入样例2：如下图\n\n![](~/99)\n\n### 输出样例2：\n```\nNo\n```', 2, '困难', '输入样例1：如下图\n\n![](~/98)\n\n### ', 'No', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456652197890, 129, '线性探测法的查找函数', '试实现线性探测法的查找函数。\n\n### 函数接口定义：\n```c++\nPosition Find( HashTable H, ElementType Key );\n```\n\n其中`HashTable`是开放地址散列表，定义如下：\n\n```\n#define MAXTABLESIZE 100000  /* 允许开辟的最大散列表长度 */\ntypedef int ElementType;     /* 关键词类型用整型 */\ntypedef int Index;           /* 散列地址类型 */\ntypedef Index Position;      /* 数据所在位置与散列地址是同一类型 */\n/* 散列单元状态类型，分别对应：有合法元素、空单元、有已删除元素 */\ntypedef enum { Legitimate, Empty, Deleted } EntryType;\n\ntypedef struct HashEntry Cell; /* 散列表单元类型 */\nstruct HashEntry{\n    ElementType Data; /* 存放元素 */\n    EntryType Info;   /* 单元状态 */\n};\n\ntypedef struct TblNode *HashTable; /* 散列表类型 */\nstruct TblNode {   /* 散列表结点定义 */\n    int TableSize; /* 表的最大长度 */\n    Cell *Cells;   /* 存放散列单元数据的数组 */\n};\n```\n函数`Find`应根据裁判定义的散列函数`Hash( Key, H->TableSize )`从散列表`H`中查到`Key`的位置并返回。如果`Key`不存在，则返回线性探测法找到的第一个空单元的位置；若没有空单元，则返回`ERROR`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n#define MAXTABLESIZE 100000  /* 允许开辟的最大散列表长度 */\ntypedef int ElementType;     /* 关键词类型用整型 */\ntypedef int Index;           /* 散列地址类型 */\ntypedef Index Position;      /* 数据所在位置与散列地址是同一类型 */\n/* 散列单元状态类型，分别对应：有合法元素、空单元、有已删除元素 */\ntypedef enum { Legitimate, Empty, Deleted } EntryType;\n\ntypedef struct HashEntry Cell; /* 散列表单元类型 */\nstruct HashEntry{\n    ElementType Data; /* 存放元素 */\n    EntryType Info;   /* 单元状态 */\n};\n\ntypedef struct TblNode *HashTable; /* 散列表类型 */\nstruct TblNode {   /* 散列表结点定义 */\n    int TableSize; /* 表的最大长度 */\n    Cell *Cells;   /* 存放散列单元数据的数组 */\n};\n\nHashTable BuildTable(); /* 裁判实现，细节不表 */\nPosition Hash( ElementType Key, int TableSize )\n{\n    return (Key % TableSize);\n}\n\n#define ERROR -1\nPosition Find( HashTable H, ElementType Key );\n\nint main()\n{\n    HashTable H;\n    ElementType Key;\n    Position P;\n\n    H = BuildTable(); \n    scanf(\"%d\", &Key);\n    P = Find(H, Key);\n    if (P==ERROR)\n        printf(\"ERROR: %d is not found and the table is full.\\n\", Key);\n    else if (H->Cells[P].Info == Legitimate)\n        printf(\"%d is at position %d.\\n\", Key, P);\n    else\n        printf(\"%d is not found.  Position %d is returned.\\n\", Key, P);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：（注：-1表示该位置为空。下同。）\n```in\n11\n11 88 21 -1 -1 5 16 7 6 38 10\n38\n```\n\n### 输出样例1：\n```out\n38 is at position 9.\n```\n\n### 输入样例2：\n```\n11\n11 88 21 -1 -1 5 16 7 6 38 10\n41\n```\n\n### 输出样例2：\n```\n41 is not found.  Position 3 is returned.\n```\n\n### 输入样例3：\n```\n11\n11 88 21 3 14 5 16 7 6 38 10\n41\n```\n\n### 输出样例3：\n```\nERROR: 41 is not found and the table is full.\n```', 2, '困难', '11\n11 88 21 -1 -1 5 16 7 6 38 10\n38', 'ERROR: 41 is not found and the table is full.', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456677363714, 130, '分离链接法的删除操作函数', '试实现分离链接法的删除操作函数。\n\n### 函数接口定义：\n```c++\nbool Delete( HashTable H, ElementType Key );\n```\n\n其中`HashTable`是分离链接散列表，定义如下：\n\n```\ntypedef struct LNode *PtrToLNode;\nstruct LNode {\n    ElementType Data;\n    PtrToLNode Next;\n};\ntypedef PtrToLNode Position;\ntypedef PtrToLNode List;\n\ntypedef struct TblNode *HashTable; /* 散列表类型 */\nstruct TblNode {   /* 散列表结点定义 */\n    int TableSize; /* 表的最大长度 */\n    List Heads;    /* 指向链表头结点的数组 */\n};\n```\n函数`Delete`应根据裁判定义的散列函数`Hash( Key, H->TableSize )`从散列表`H`中查到`Key`的位置并删除之，然后输出一行文字：`Key is deleted from list Heads[i]`，其中`Key`是传入的被删除的关键词，`i`是`Key`所在的链表的编号；最后返回true。如果`Key`不存在，则返回false。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\n\n#define KEYLENGTH 15                   /* 关键词字符串的最大长度 */\ntypedef char ElementType[KEYLENGTH+1]; /* 关键词类型用字符串 */\ntypedef int Index;                     /* 散列地址类型 */\ntypedef enum {false, true} bool;\n\ntypedef struct LNode *PtrToLNode;\nstruct LNode {\n    ElementType Data;\n    PtrToLNode Next;\n};\ntypedef PtrToLNode Position;\ntypedef PtrToLNode List;\n\ntypedef struct TblNode *HashTable; /* 散列表类型 */\nstruct TblNode {   /* 散列表结点定义 */\n    int TableSize; /* 表的最大长度 */\n    List Heads;    /* 指向链表头结点的数组 */\n};\n\nIndex Hash( ElementType Key, int TableSize )\n{\n    return (Key[0]-\'a\')%TableSize;\n}\n\nHashTable BuildTable(); /* 裁判实现，细节不表 */\nbool Delete( HashTable H, ElementType Key );\n\nint main()\n{\n    HashTable H;\n    ElementType Key;\n\n    H = BuildTable(); \n    scanf(\"%s\", Key);\n    if (Delete(H, Key) == false)\n        printf(\"ERROR: %s is not found\\n\", Key);\n    if (Delete(H, Key) == true)\n        printf(\"Are you kidding me?\\n\");\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例1：散列表如下图\n\n![](~/100)\n```\nable\n```\n\n### 输出样例1：\n```out\nable is deleted from list Heads[0]\n```\n\n### 输入样例2：散列表如样例1图\n```in\ndate\n```\n\n### 输出样例2：\n```\nERROR: date is not found\n```', 2, '困难', 'able', 'ERROR: date is not found', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456702529537, 131, '邻接矩阵存储图的深度优先遍历', '试实现邻接矩阵存储图的深度优先遍历。\n\n### 函数接口定义：\n```c++\nvoid DFS( MGraph Graph, Vertex V, void (*Visit)(Vertex) );\n```\n\n其中`MGraph`是邻接矩阵存储的图，定义如下：\n\n```\ntypedef struct GNode *PtrToGNode;\nstruct GNode{\n    int Nv;  /* 顶点数 */\n    int Ne;  /* 边数   */\n    WeightType G[MaxVertexNum][MaxVertexNum]; /* 邻接矩阵 */\n};\ntypedef PtrToGNode MGraph; /* 以邻接矩阵存储的图类型 */\n```\n函数`DFS`应从第`V`个顶点出发递归地深度优先遍历图`Graph`，遍历时用裁判定义的函数`Visit`访问每个顶点。当访问邻接点时，要求按序号递增的顺序。题目保证`V`是图中的合法顶点。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ntypedef enum {false, true} bool;\n#define MaxVertexNum 10  /* 最大顶点数设为10 */\n#define INFINITY 65535   /* ∞设为双字节无符号整数的最大值65535*/\ntypedef int Vertex;      /* 用顶点下标表示顶点,为整型 */\ntypedef int WeightType;  /* 边的权值设为整型 */\n\ntypedef struct GNode *PtrToGNode;\nstruct GNode{\n    int Nv;  /* 顶点数 */\n    int Ne;  /* 边数   */\n    WeightType G[MaxVertexNum][MaxVertexNum]; /* 邻接矩阵 */\n};\ntypedef PtrToGNode MGraph; /* 以邻接矩阵存储的图类型 */\nbool Visited[MaxVertexNum]; /* 顶点的访问标记 */\n\nMGraph CreateGraph(); /* 创建图并且将Visited初始化为false；裁判实现，细节不表 */\n\nvoid Visit( Vertex V )\n{\n    printf(\" %d\", V);\n}\n\nvoid DFS( MGraph Graph, Vertex V, void (*Visit)(Vertex) );\n\n\nint main()\n{\n    MGraph G;\n    Vertex V;\n\n    G = CreateGraph();\n    scanf(\"%d\", &V);\n    printf(\"DFS from %d:\", V);\n    DFS(G, V, Visit);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：给定图如下\n\n![](~/101)\n```\n5\n```\n\n### 输出样例：\n```out\nDFS from 5: 5 1 3 0 2 4 6\n```', 2, '困难', '5', 'DFS from 5: 5 1 3 0 2 4 6', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383824456727695362, 132, '邻接表存储图的广度优先遍历', '试实现邻接表存储图的广度优先遍历。\n\n### 函数接口定义：\n```c++\nvoid BFS ( LGraph Graph, Vertex S, void (*Visit)(Vertex) );\n```\n\n其中`LGraph`是邻接表存储的图，定义如下：\n\n```\n/* 邻接点的定义 */\ntypedef struct AdjVNode *PtrToAdjVNode; \nstruct AdjVNode{\n    Vertex AdjV;        /* 邻接点下标 */\n    PtrToAdjVNode Next; /* 指向下一个邻接点的指针 */\n};\n\n/* 顶点表头结点的定义 */\ntypedef struct Vnode{\n    PtrToAdjVNode FirstEdge; /* 边表头指针 */\n} AdjList[MaxVertexNum];     /* AdjList是邻接表类型 */\n\n/* 图结点的定义 */\ntypedef struct GNode *PtrToGNode;\nstruct GNode{  \n    int Nv;     /* 顶点数 */\n    int Ne;     /* 边数   */\n    AdjList G;  /* 邻接表 */\n};\ntypedef PtrToGNode LGraph; /* 以邻接表方式存储的图类型 */\n```\n函数`BFS`应从第`S`个顶点出发对邻接表存储的图`Graph`进行广度优先搜索，遍历时用裁判定义的函数`Visit`访问每个顶点。当访问邻接点时，要求按邻接表顺序访问。题目保证`S`是图中的合法顶点。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\ntypedef enum {false, true} bool;\n#define MaxVertexNum 10   /* 最大顶点数设为10 */\ntypedef int Vertex;       /* 用顶点下标表示顶点,为整型 */\n\n/* 邻接点的定义 */\ntypedef struct AdjVNode *PtrToAdjVNode; \nstruct AdjVNode{\n    Vertex AdjV;        /* 邻接点下标 */\n    PtrToAdjVNode Next; /* 指向下一个邻接点的指针 */\n};\n\n/* 顶点表头结点的定义 */\ntypedef struct Vnode{\n    PtrToAdjVNode FirstEdge; /* 边表头指针 */\n} AdjList[MaxVertexNum];     /* AdjList是邻接表类型 */\n\n/* 图结点的定义 */\ntypedef struct GNode *PtrToGNode;\nstruct GNode{  \n    int Nv;     /* 顶点数 */\n    int Ne;     /* 边数   */\n    AdjList G;  /* 邻接表 */\n};\ntypedef PtrToGNode LGraph; /* 以邻接表方式存储的图类型 */\n\nbool Visited[MaxVertexNum]; /* 顶点的访问标记 */\n\nLGraph CreateGraph(); /* 创建图并且将Visited初始化为false；裁判实现，细节不表 */\n\nvoid Visit( Vertex V )\n{\n    printf(\" %d\", V);\n}\n\nvoid BFS ( LGraph Graph, Vertex S, void (*Visit)(Vertex) );\n\nint main()\n{\n    LGraph G;\n    Vertex S;\n\n    G = CreateGraph();\n    scanf(\"%d\", &S);\n    printf(\"BFS from %d:\", S);\n    BFS(G, S, Visit);\n\n    return 0;\n}\n\n/* 你的代码将被嵌在这里 */\n```\n\n### 输入样例：给定图如下\n\n![](~/102)\n```\n2\n```\n\n### 输出样例：\n```out\nBFS from 2: 2 0 3 5 4 1 6\n```', 2, '困难', '2', 'BFS from 2: 2 0 3 5 4 1 6', 400, 65536, '2021-04-19 00:47:15', '2021-04-19 00:47:15', 0, NULL);
INSERT INTO `question` VALUES (1383829169074429953, 133, '最大子列和问题', '给定$$K$$个整数组成的序列{ $$N_1$$, $$N_2$$, ..., $$N_K$$ }，“连续子列”被定义为{ $$N_i$$, $$N_{i+1}$$, ..., $$N_j$$ }，其中 $$1 \\le i \\le j \\le K$$。“最大子列和”则被定义为所有连续子列元素的和中最大者。例如给定序列{ -2, 11, -4, 13, -5, -2 }，其连续子列{ 11, -4, 13 }有最大的和20。现要求你编写程序，计算给定整数序列的最大子列和。 \n\n本题旨在测试各种不同的算法在各种数据情况下的表现。各组测试数据特点如下：\n\n- 数据1：与样例等价，测试基本正确性；\n- 数据2：10<sup>2</sup>个随机整数；\n- 数据3：10<sup>3</sup>个随机整数；\n- 数据4：10<sup>4</sup>个随机整数；\n- 数据5：10<sup>5</sup>个随机整数；\n\n### 输入格式:\n\n输入第1行给出正整数$$K$$ ($$\\le 100000$$)；第2行给出$$K$$个整数，其间以空格分隔。 \n\n### 输出格式:\n\n在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。 \n\n### 输入样例:\n```in\n6\n-2 11 -4 13 -5 -2\n```\n\n### 输出样例:\n```out\n20\n```', 2, '困难', '输入第1行给出正整数$$K$$ ($$\\le 100000$$)；第2行给出$$K$$个整数，其间以空格分隔。', '在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。', 50000, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169451917313, 134, '简单计算器', '模拟简单运算器的工作。假设计算器只能进行加减乘除运算，运算数和结果都是整数，四种运算符的优先级相同，按从左到右的顺序计算。\n\n### 输入格式:\n\n输入在一行中给出一个四则运算算式，没有空格，且至少有一个操作数。遇等号”=”说明输入结束。\n\n### 输出格式:\n\n在一行中输出算式的运算结果，或者如果除法分母为0或有非法运算符，则输出错误信息“ERROR”。\n\n### 输入样例:\n```in\n1+2*10-10/2=\n```\n\n### 输出样例:\n```out\n10\n```', 2, '困难', '输入在一行中给出一个四则运算算式，没有空格，且至少有一个操作数。遇等号”=”说明输入结束。', '在一行中输出算式的运算结果，或者如果除法分母为0或有非法运算符，则输出错误信息“ERROR”。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169510637569, 135, '数组循环左移', '本题要求实现一个对数组进行循环左移的简单函数：一个数组$$a$$中存有$$n$$（$$>0$$）个整数，在不允许使用另外数组的前提下，将每个整数循环向左移$$m$$（$$\\ge 0$$）个位置，即将$$a$$中的数据由（$$a_0 a_1 \\cdots a_{n-1}$$）变换为（$$a_{m} \\cdots a_{n-1} a_0 a_1 \\cdots a_{m-1}$$）（最前面的$$m$$个数循环移至最后面的$$m$$个位置）。如果还需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n### 输入格式:\n\n输入第1行给出正整数$$n$$（$$\\le 100$$）和整数$$m$$（$$\\ge 0$$）；第2行给出$$n$$个整数，其间以空格分隔。 \n\n### 输出格式:\n\n在一行中输出循环左移$$m$$位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n### 输入样例：\n```in\n8 3\n1 2 3 4 5 6 7 8\n```\n\n### 输出样例：\n```out\n4 5 6 7 8 1 2 3\n```', 2, '困难', '输入第1行给出正整数$$n$$（$$\\le 100$$）和整数$$m$$（$$\\ge 0$$）；第2行给出$$n$$个整数，其间以空格分隔。', '在一行中输出循环左移$$m$$位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169573552130, 136, '数列求和-加强版', '给定某数字$$A$$（$$1\\le A\\le 9$$）以及非负整数$$N$$（$$0\\le N\\le 100000$$），求数列之和$$S = A + AA + AAA + \\cdots + AA\\cdots A$$（$$N$$个$$A$$）。例如$$A=1$$, $$N=3$$时，$$S = 1 + 11 + 111 = 123$$。\n\n### 输入格式：\n\n输入数字$$A$$与非负整数$$N$$。\n\n### 输出格式：\n\n输出其$$N$$项数列之和$$S$$的值。\n\n### 输入样例：\n```in\n1 3\n```\n\n### 输出样例：\n```out\n123\n```', 2, '困难', '输入数字$$A$$与非负整数$$N$$。', '输出其$$N$$项数列之和$$S$$的值。', 200, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169611300865, 137, '输出全排列', '请编写程序输出前$$n$$个正整数的全排列（$$n<10$$），并通过9个测试用例（即$$n$$从1到9）观察$$n$$逐步增大时程序的运行时间。\n\n### 输入格式:\n\n输入给出正整数$$n$$（$$<10$$）。 \n\n### 输出格式:\n\n输出1到$$n$$的全排列。每种排列占一行，数字间无空格。排列的输出顺序为字典序，即序列$${ a_1, a_2, \\cdots, a_n }$$排在序列$${ b_1, b_2, \\cdots, b_n }$$之前，如果存在$$k$$使得$$a_1=b_1, \\cdots, a_k=b_k$$ 并且 $$a_{k+1}<b_{k+1}$$。\n\n### 输入样例：\n```in\n3\n```\n\n### 输出样例：\n```out\n123\n132\n213\n231\n312\n321\n```', 2, '困难', '输入给出正整数$$n$$（$$<10$$）。', '输出1到$$n$$的全排列。每种排列占一行，数字间无空格。排列的输出顺序为字典序，即序列$${ a_1, a_2, \\cdots, a_n }$$排在序列$${ b_1, b_2, \\cdots, b_n }$$之前，如果存在$$k$$使得$$a_1=b_1, \\cdots, a_k=b_k$$ 并且 $$a_{k+1}<b_{k+1}$$。', 3500, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169670021122, 138, '最长连续递增子序列', '给定一个顺序存储的线性表，请设计一个算法查找该线性表中最长的连续递增子序列。例如，(1,9,2,5,7,3,4,6,8,0)中最长的递增子序列为(3,4,6,8)。\n\n### 输入格式:\n\n输入第1行给出正整数$$n$$（$$\\le 10^5$$）；第2行给出$$n$$个整数，其间以空格分隔。 \n\n### 输出格式:\n\n在一行中输出第一次出现的最长连续递增子序列，数字之间用空格分隔，序列结尾不能有多余空格。\n\n### 输入样例：\n```in\n15\n1 9 2 5 7 3 4 6 8 0 11 15 17 17 10\n```\n\n### 输出样例：\n```out\n3 4 6 8\n```', 2, '困难', '输入第1行给出正整数$$n$$（$$\\le 10^5$$）；第2行给出$$n$$个整数，其间以空格分隔。', '在一行中输出第一次出现的最长连续递增子序列，数字之间用空格分隔，序列结尾不能有多余空格。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169724547073, 139, '一元多项式的乘法与加法运算', '设计函数分别求两个一元多项式的乘积与和。\n\n### 输入格式:\n\n输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。\n\n### 输出格式:\n\n输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出`0 0`。\n\n### 输入样例:\n```in\n4 3 4 -5 2  6 1  -2 0\n3 5 20  -7 4  3 1\n```\n\n### 输出样例:\n```out\n15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1\n5 20 -4 4 -5 2 9 1 -2 0\n```', 2, '困难', '输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。', '输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出`0 0`。', 200, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169770684417, 140, '符号配对', '请编写程序检查C语言源程序中下列符号是否配对：`/*`与`*/`、`(`与`)`、`[`与`]`、`{`与`}`。\n\n### 输入格式:\n\n输入为一个C语言源程序。当读到某一行中只有一个句点`.`和一个回车的时候，标志着输入结束。程序中需要检查配对的符号不超过100个。\n\n### 输出格式:\n\n首先，如果所有符号配对正确，则在第一行中输出`YES`，否则输出`NO`。然后在第二行中指出第一个不配对的符号：如果缺少左符号，则输出`?-右符号`；如果缺少右符号，则输出`左符号-?`。\n\n### 输入样例1：\n```in\nvoid test()\n{\n    int i, A[10];\n    for (i=0; i<10; i++) /*/\n        A[i] = i;\n}\n.\n\n```\n\n### 输出样例1：\n```out\nNO\n/*-?\n```\n\n### 输入样例2：\n```\nvoid test()\n{\n    int i, A[10];\n    for (i=0; i<10; i++) /**/\n        A[i] = i;\n}]\n.\n\n```\n\n### 输出样例2：\n```\nNO\n?-]\n```\n\n### 输入样例3：\n```\nvoid test()\n{\n    int i\n    double A[10];\n    for (i=0; i<10; i++) /**/\n        A[i] = 0.1*i;\n}\n.\n\n```\n\n### 输出样例3：\n```\nYES\n```', 2, '困难', '输入为一个C语言源程序。当读到某一行中只有一个句点`.`和一个回车的时候，标志着输入结束。程序中需要检查配对的符号不超过100个。', '首先，如果所有符号配对正确，则在第一行中输出`YES`，否则输出`NO`。然后在第二行中指出第一个不配对的符号：如果缺少左符号，则输出`?-右符号`；如果缺少右符号，则输出`左符号-?`。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169829404673, 141, '堆栈操作合法性', '假设以`S`和`X`分别表示入栈和出栈操作。如果根据一个仅由`S`和`X`构成的序列，对一个空堆栈进行操作，相应操作均可行（如没有出现删除时栈空）且最后状态也是栈空，则称该序列是合法的堆栈操作序列。请编写程序，输入`S`和`X`序列，判断该序列是否合法。\n\n### 输入格式:\n\n输入第一行给出两个正整数N和M，其中N是待测序列的个数，M（$$\\le 50$$）是堆栈的最大容量。随后N行，每行中给出一个仅由`S`和`X`构成的序列。序列保证不为空，且长度不超过100。\n\n### 输出格式:\n\n对每个序列，在一行中输出`YES`如果该序列是合法的堆栈操作序列，或`NO`如果不是。\n\n### 输入样例：\n```in\n4 10\nSSSXXSXXSX\nSSSXXSXXS\nSSSSSSSSSSXSSXXXXXXXXXXX\nSSSXXSXXX\n```\n\n### 输出样例：\n```out\nYES\nNO\nNO\nNO\n```', 2, '困难', '输入第一行给出两个正整数N和M，其中N是待测序列的个数，M（$$\\le 50$$）是堆栈的最大容量。随后N行，每行中给出一个仅由`S`和`X`构成的序列。序列保证不为空，且长度不超过100。', '对每个序列，在一行中输出`YES`如果该序列是合法的堆栈操作序列，或`NO`如果不是。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169888124930, 142, '汉诺塔的非递归实现', '借助堆栈以非递归（循环）方式求解汉诺塔的问题（n, a, b, c），即将N个盘子从起始柱（标记为“a”）通过借助柱（标记为“b”）移动到目标柱（标记为“c”），并保证每个移动符合汉诺塔问题的要求。\n\n### 输入格式:\n\n输入为一个正整数N，即起始柱上的盘数。\n\n### 输出格式:\n\n每个操作（移动）占一行，按`柱1 -> 柱2`的格式输出。\n\n### 输入样例:\n```in\n3\n```\n\n### 输出样例:\n```out\na -> c\na -> b\nc -> b\na -> c\nb -> a\nb -> c\na -> c\n```', 2, '困难', '输入为一个正整数N，即起始柱上的盘数。', '每个操作（移动）占一行，按`柱1 -> 柱2`的格式输出。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829169942650881, 143, '表达式转换', '算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。日常使用的算术表达式是采用中缀表示法，即二元运算符位于两个运算数中间。请设计程序将中缀表达式转换为后缀表达式。\n\n### 输入格式:\n\n输入在一行中给出不含空格的中缀表达式，可包含`+`、`-`、`*`、`\\`以及左右括号`()`，表达式不超过20个字符。\n\n### 输出格式:\n\n在一行中输出转换后的后缀表达式，要求不同对象（运算数、运算符号）之间以空格分隔，但结尾不得有多余空格。\n\n### 输入样例:\n```in\n2+3*(7-4)+8/4\n```\n\n### 输出样例:\n```out\n2 3 7 4 - * + 8 4 / +\n```', 2, '困难', '输入在一行中给出不含空格的中缀表达式，可包含`+`、`-`、`*`、`\\`以及左右括号`()`，表达式不超过20个字符。', '在一行中输出转换后的后缀表达式，要求不同对象（运算数、运算符号）之间以空格分隔，但结尾不得有多余空格。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170005565441, 144, '根据后序和中序遍历输出先序遍历', '本题要求根据给定的一棵二叉树的后序遍历和中序遍历结果，输出该树的先序遍历结果。\n\n### 输入格式:\n\n第一行给出正整数$$N$$($$\\le 30$$)，是树中结点的个数。随后两行，每行给出$$N$$个整数，分别对应后序遍历和中序遍历结果，数字间以空格分隔。题目保证输入正确对应一棵二叉树。\n\n### 输出格式:\n\n在一行中输出`Preorder: `以及该树的先序遍历结果。数字间有1个空格，行末不得有多余空格。\n\n### 输入样例:\n```in\n7\n2 3 1 5 7 6 4\n1 2 3 4 5 6 7\n```\n\n### 输出样例:\n```out\nPreorder: 4 1 3 2 6 5 7\n```', 2, '困难', '第一行给出正整数$$N$$($$\\le 30$$)，是树中结点的个数。随后两行，每行给出$$N$$个整数，分别对应后序遍历和中序遍历结果，数字间以空格分隔。题目保证输入正确对应一棵二叉树。', '在一行中输出`Preorder: `以及该树的先序遍历结果。数字间有1个空格，行末不得有多余空格。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170060091393, 145, '平衡二叉树的根', '将给定的一系列数字插入初始为空的AVL树，请你输出最后生成的AVL树的根结点的值。\n\n### 输入格式:\n\n输入的第一行给出一个正整数$$N$$（$$\\le 20$$），随后一行给出$$N$$个不同的整数，其间以空格分隔。\n\n### 输出格式:\n\n在一行中输出顺序插入上述整数到一棵初始为空的AVL树后，该树的根结点的值。\n\n### 输入样例1:\n```in\n5\n88 70 61 96 120\n```\n\n### 输出样例1:\n```out\n70\n```\n\n### 输入样例2:\n```\n7\n88 70 61 96 120 90 65\n```\n\n### 输出样例2:\n```\n88\n```', 2, '困难', '输入的第一行给出一个正整数$$N$$（$$\\le 20$$），随后一行给出$$N$$个不同的整数，其间以空格分隔。', '在一行中输出顺序插入上述整数到一棵初始为空的AVL树后，该树的根结点的值。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170106228738, 146, '堆中的路径', '将一系列给定数字插入一个初始为空的小顶堆`H[]`。随后对任意给定的下标`i`，打印从`H[i]`到根结点的路径。\n\n### 输入格式:\n\n每组测试第1行包含2个正整数$$N$$和$$M$$($$\\le 1000$$)，分别是插入元素的个数、以及需要打印的路径条数。下一行给出区间[-10000, 10000]内的$$N$$个要被插入一个初始为空的小顶堆的整数。最后一行给出$$M$$个下标。\n\n### 输出格式:\n\n对输入中给出的每个下标`i`，在一行中输出从`H[i]`到根结点的路径上的数据。数字间以1个空格分隔，行末不得有多余空格。\n\n### 输入样例:\n```in\n5 3\n46 23 26 24 10\n5 4 3\n```\n\n### 输出样例:\n```out\n24 23 10\n46 23 10\n26 10\n```', 2, '困难', '每组测试第1行包含2个正整数$$N$$和$$M$$($$\\le 1000$$)，分别是插入元素的个数、以及需要打印的路径条数。下一行给出区间[-10000, 10000]内的$$N$$个要被插入一个初始为空的小顶堆的整数。最后一行给出$$M$$个下标。', '对输入中给出的每个下标`i`，在一行中输出从`H[i]`到根结点的路径上的数据。数字间以1个空格分隔，行末不得有多余空格。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170177531906, 147, '顺序存储的二叉树的最近的公共祖先问题', '设顺序存储的二叉树中有编号为$$i$$和$$j$$的两个结点，请设计算法求出它们最近的公共祖先结点的编号和值。\n\n### 输入格式:\n\n输入第1行给出正整数$$n$$（$$\\le 1000$$），即顺序存储的最大容量；第2行给出$$n$$个非负整数，其间以空格分隔。其中0代表二叉树中的空结点（如果第1个结点为0，则代表一棵空树）；第3行给出一对结点编号$$i$$和$$j$$。\n\n题目保证输入正确对应一棵二叉树，且$$1\\le i,j \\le n$$。\n\n### 输出格式:\n\n如果$$i$$或$$j$$对应的是空结点，则输出`ERROR: T[x] is NULL`，其中`x`是$$i$$或$$j$$中先发现错误的那个编号；否则在一行中输出编号为$$i$$和$$j$$的两个结点最近的公共祖先结点的编号和值，其间以1个空格分隔。\n\n### 输入样例1：\n```in\n15\n4 3 5 1 10 0 7 0 2 0 9 0 0 6 8\n11 4\n```\n\n### 输出样例1：\n```out\n2 3\n```\n\n### 输入样例2：\n```\n15\n4 3 5 1 0 0 7 0 2 0 9 0 0 6 8\n12 8\n```\n\n### 输出样例2：\n```\nERROR: T[12] is NULL\n```', 2, '困难', '输入第1行给出正整数$$n$$（$$\\le 1000$$），即顺序存储的最大容量；第2行给出$$n$$个非负整数，其间以空格分隔。其中0代表二叉树中的空结点（如果第1个结点为0，则代表一棵空树）；第3行给出一对结点编号$$i$$和$$j$$。\n\n题目保证输入正确对应一棵二叉树，且$$1\\le i,j \\le n$$。', '如果$$i$$或$$j$$对应的是空结点，则输出`ERROR: T[x] is NULL`，其中`x`是$$i$$或$$j$$中先发现错误的那个编号；否则在一行中输出编号为$$i$$和$$j$$的两个结点最近的公共祖先结点的编号和值，其间以1个空格分隔。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170232057858, 148, '词频统计', '请编写程序，对一段英文文本，统计其中所有不同单词的个数，以及词频最大的前10%的单词。\n\n所谓“单词”，是指由不超过80个单词字符组成的连续字符串，但长度超过15的单词将只截取保留前15个单词字符。而合法的“单词字符”为大小写字母、数字和下划线，其它字符均认为是单词分隔符。\n\n### 输入格式:\n\n输入给出一段非空文本，最后以符号`#`结尾。输入保证存在至少10个不同的单词。\n\n### 输出格式:\n\n在第一行中输出文本中所有不同单词的个数。注意“单词”不区分英文大小写，例如“PAT”和“pat”被认为是同一个单词。\n\n随后按照词频递减的顺序，按照`词频:单词`的格式输出词频最大的前10%的单词。若有并列，则按递增字典序输出。\n\n### 输入样例：\n```in\nThis is a test.\n\nThe word \"this\" is the word with the highest frequency.\n\nLonglonglonglongword should be cut off, so is considered as the same as longlonglonglonee.  But this_8 is different than this, and this, and this...#\nthis line should be ignored.\n```\n\n### 输出样例：（注意：虽然单词`the`也出现了4次，但因为我们只要输出前10%（即23个单词中的前2个）单词，而按照字母序，`the`排第3位，所以不输出。）\n```out\n23\n5:this\n4:is\n```\n\n### 感谢武汉理工大学的郭小兵老师修正测试数据！', 2, '困难', '输入给出一段非空文本，最后以符号`#`结尾。输入保证存在至少10个不同的单词。', '在第一行中输出文本中所有不同单词的个数。注意“单词”不区分英文大小写，例如“PAT”和“pat”被认为是同一个单词。\n\n随后按照词频递减的顺序，按照`词频:单词`的格式输出词频最大的前10%的单词。若有并列，则按递增字典序输出。', 2000, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170311749634, 149, '六度空间', '“六度空间”理论又称作“六度分隔（Six Degrees of Separation）”理论。这个理论可以通俗地阐述为：“你和任何一个陌生人之间所间隔的人不会超过六个，也就是说，最多通过五个人你就能够认识任何一个陌生人。”如图1所示。\n\n<center>\n![](~/35)<br>\n图1  六度空间示意图</center>\n\n“六度空间”理论虽然得到广泛的认同，并且正在得到越来越多的应用。但是数十年来，试图验证这个理论始终是许多社会学家努力追求的目标。然而由于历史的原因，这样的研究具有太大的局限性和困难。随着当代人的联络主要依赖于电话、短信、微信以及因特网上即时通信等工具，能够体现社交网络关系的一手数据已经逐渐使得“六度空间”理论的验证成为可能。\n\n假如给你一个社交网络图，请你对每个节点计算符合“六度空间”理论的结点占结点总数的百分比。\n\n### 输入格式:\n\n输入第1行给出两个正整数，分别表示社交网络图的结点数$$N$$（$$1<N\\le 10^3$$，表示人数）、边数$$M$$（$$\\le 33\\times N$$，表示社交关系数）。随后的$$M$$行对应$$M$$条边，每行给出一对正整数，分别是该条边直接连通的两个结点的编号（节点从1到$$N$$编号）。\n\n### 输出格式:\n\n对每个结点输出与该结点距离不超过6的结点数占结点总数的百分比，精确到小数点后2位。每个结节点输出一行，格式为“结点编号:（空格）百分比%”。\n\n### 输入样例:\n```in\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n```\n\n### 输出样例:\n```out\n1: 70.00%\n2: 80.00%\n3: 90.00%\n4: 100.00%\n5: 100.00%\n6: 100.00%\n7: 100.00%\n8: 90.00%\n9: 80.00%\n10: 70.00%\n```', 2, '困难', '输入第1行给出两个正整数，分别表示社交网络图的结点数$$N$$（$$1<N\\le 10^3$$，表示人数）、边数$$M$$（$$\\le 33\\times N$$，表示社交关系数）。随后的$$M$$行对应$$M$$条边，每行给出一对正整数，分别是该条边直接连通的两个结点的编号（节点从1到$$N$$编号）。', '对每个结点输出与该结点距离不超过6的结点数占结点总数的百分比，精确到小数点后2位。每个结节点输出一行，格式为“结点编号:（空格）百分比%”。', 2500, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170362081282, 150, '排序', '给定$$N$$个（长整型范围内的）整数，要求输出从小到大排序后的结果。\n\n本题旨在测试各种不同的排序算法在各种数据情况下的表现。各组测试数据特点如下：\n\n<li>数据1：只有1个元素；\n<li>数据2：11个不相同的整数，测试基本正确性；\n<li>数据3：10<sup>3</sup>个随机整数；\n<li>数据4：10<sup>4</sup>个随机整数；\n<li>数据5：10<sup>5</sup>个随机整数；\n<li>数据6：10<sup>5</sup>个顺序整数；\n<li>数据7：10<sup>5</sup>个逆序整数；\n<li>数据8：10<sup>5</sup>个基本有序的整数；\n<li>数据9：10<sup>5</sup>个随机正整数，每个数字不超过1000。\n\n\n### 输入格式:\n\n输入第一行给出正整数$$N$$（$$\\le 10^5$$），随后一行给出$$N$$个（长整型范围内的）整数，其间以空格分隔。\n\n### 输出格式:\n\n在一行中输出从小到大排序后的结果，数字间以1个空格分隔，行末不得有多余空格。\n\n### 输入样例:\n```in\n11\n4 981 10 -17 0 -20 29 50 8 43 -5\n```\n\n### 输出样例:\n```out\n-20 -17 -5 0 4 8 10 29 43 50 981\n```', 2, '困难', '输入第一行给出正整数$$N$$（$$\\le 10^5$$），随后一行给出$$N$$个（长整型范围内的）整数，其间以空格分隔。', '在一行中输出从小到大排序后的结果，数字间以1个空格分隔，行末不得有多余空格。', 10000, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170408218626, 151, '银行排队问题之单队列多窗口服务', '假设银行有$$K$$个窗口提供服务，窗口前设一条黄线，所有顾客按到达时间在黄线后排成一条长龙。当有窗口空闲时，下一位顾客即去该窗口处理事务。当有多个窗口可选择时，假设顾客总是选择编号最小的窗口。\n\n本题要求输出前来等待服务的$$N$$位顾客的平均等待时间、最长等待时间、最后完成时间，并且统计每个窗口服务了多少名顾客。\n\n### 输入格式:\n\n输入第1行给出正整数$$N$$（$$\\le 1000$$），为顾客总人数；随后$$N$$行，每行给出一位顾客的到达时间`T`和事务处理时间`P`，并且假设输入数据已经按到达时间先后排好了顺序；最后一行给出正整数$$K$$（$$\\le 10$$），为开设的营业窗口数。这里假设每位顾客事务被处理的最长时间为60分钟。 \n\n### 输出格式:\n\n在第一行中输出平均等待时间（输出到小数点后1位）、最长等待时间、最后完成时间，之间用1个空格分隔，行末不能有多余空格。\n\n在第二行中按编号递增顺序输出每个窗口服务了多少名顾客，数字之间用1个空格分隔，行末不能有多余空格。\n\n### 输入样例：\n```in\n9\n0 20\n1 15\n1 61\n2 10\n10 5\n10 3\n30 18\n31 25\n31 2\n3\n```\n\n### 输出样例：\n```out\n6.2 17 61\n5 3 1\n```\n\n###感谢浙江财经大学王瑞洲、周甄陶同学修正测试数据！', 2, '困难', '输入第1行给出正整数$$N$$（$$\\le 1000$$），为顾客总人数；随后$$N$$行，每行给出一位顾客的到达时间`T`和事务处理时间`P`，并且假设输入数据已经按到达时间先后排好了顺序；最后一行给出正整数$$K$$（$$\\le 10$$），为开设的营业窗口数。这里假设每位顾客事务被处理的最长时间为60分钟。', '在第一行中输出平均等待时间（输出到小数点后1位）、最长等待时间、最后完成时间，之间用1个空格分隔，行末不能有多余空格。\n\n在第二行中按编号递增顺序输出每个窗口服务了多少名顾客，数字之间用1个空格分隔，行末不能有多余空格。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170458550273, 152, '银行排队问题之单队列多窗口加VIP服务', '假设银行有$$K$$个窗口提供服务，窗口前设一条黄线，所有顾客按到达时间在黄线后排成一条长龙。当有窗口空闲时，下一位顾客即去该窗口处理事务。当有多个窗口可选择时，假设顾客总是选择编号最小的窗口。\n\n有些银行会给VIP客户以各种优惠服务，例如专门开辟VIP窗口。为了最大限度地利用资源，VIP窗口的服务机制定义为：当队列中没有VIP客户时，该窗口为普通顾客服务；当该窗口空闲并且队列中有VIP客户在等待时，排在最前面的VIP客户享受该窗口的服务。同时，当轮到某VIP客户出列时，若VIP窗口非空，该客户可以选择空闲的普通窗口；**否则一定选择VIP窗口**。\n\n本题要求输出前来等待服务的$$N$$位顾客的平均等待时间、最长等待时间、最后完成时间，并且统计每个窗口服务了多少名顾客。\n\n### 输入格式:\n\n输入第1行给出正整数$$N$$（$$\\le 1000$$），为顾客总人数；随后$$N$$行，每行给出一位顾客的到达时间`T`、事务处理时间`P`和是否VIP的标志（1是VIP，0则不是），并且假设输入数据已经按到达时间先后排好了顺序；最后一行给出正整数$$K$$（$$\\le 10$$）—— 为开设的营业窗口数，以及VIP窗口的编号（从0到$$K-1$$）。这里假设每位顾客事务被处理的最长时间为60分钟。 \n\n### 输出格式:\n\n在第一行中输出平均等待时间（输出到小数点后1位）、最长等待时间、最后完成时间，之间用1个空格分隔，行末不能有多余空格。\n\n在第二行中按编号递增顺序输出每个窗口服务了多少名顾客，数字之间用1个空格分隔，行末不能有多余空格。\n\n### 输入样例：\n```in\n10\n0 20 0\n0 20 0\n1 68 1\n1 12 1\n2 15 0\n2 10 0\n3 15 1\n10 12 1\n30 15 0\n62 5 1\n3 1\n```\n\n### 输出样例：\n```out\n15.1 35 67\n4 5 1\n```', 2, '困难', '输入第1行给出正整数$$N$$（$$\\le 1000$$），为顾客总人数；随后$$N$$行，每行给出一位顾客的到达时间`T`、事务处理时间`P`和是否VIP的标志（1是VIP，0则不是），并且假设输入数据已经按到达时间先后排好了顺序；最后一行给出正整数$$K$$（$$\\le 10$$）—— 为开设的营业窗口数，以及VIP窗口的编号（从0到$$K-1$$）。这里假设每位顾客事务被处理的最长时间为60分钟。', '在第一行中输出平均等待时间（输出到小数点后1位）、最长等待时间、最后完成时间，之间用1个空格分隔，行末不能有多余空格。\n\n在第二行中按编号递增顺序输出每个窗口服务了多少名顾客，数字之间用1个空格分隔，行末不能有多余空格。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170508881921, 153, '银行排队问题之单窗口“夹塞”版', '排队“夹塞”是引起大家强烈不满的行为，但是这种现象时常存在。在银行的单窗口排队问题中，假设银行只有1个窗口提供服务，所有顾客按到达时间排成一条长龙。当窗口空闲时，下一位顾客即去该窗口处理事务。此时如果已知第$$i$$位顾客与排在后面的第$$j$$位顾客是好朋友，并且愿意替朋友办理事务的话，那么第$$i$$位顾客的事务处理时间就是自己的事务加朋友的事务所耗时间的总和。在这种情况下，顾客的等待时间就可能被影响。假设所有人到达银行时，若没有空窗口，都会请求排在最前面的朋友帮忙（包括正在窗口接受服务的朋友）；当有不止一位朋友请求某位顾客帮忙时，该顾客会根据自己朋友请求的顺序来依次处理事务。试编写程序模拟这种现象，并计算顾客的平均等待时间。\n\n### 输入格式:\n\n输入的第一行是两个整数：$$1\\le N \\le 10000$$，为顾客总数；$$0 \\le M \\le 100$$，为彼此不相交的朋友圈子个数。若$$M$$非0，则此后$$M$$行，每行先给出正整数$$2\\le L \\le 100$$，代表该圈子里朋友的总数，随后给出该朋友圈里的$$L$$位朋友的名字。名字由3个大写英文字母组成，名字间用1个空格分隔。最后$$N$$行给出$$N$$位顾客的姓名、到达时间$$T$$和事务处理时间$$P$$（以分钟为单位），之间用1个空格分隔。简单起见，这里假设顾客信息是按照到达时间先后顺序给出的（有并列时间的按照给出顺序排队），并且假设每个事务最多占用窗口服务60分钟（如果超过则按60分钟计算）。\n\n### 输出格式:\n\n按顾客接受服务的顺序输出顾客名字，每个名字占1行。最后一行输出所有顾客的平均等待时间，保留到小数点后1位。\n\n### 输入样例:\n```in\n6 2\n3 ANN BOB JOE\n2 JIM ZOE\nJIM 0 20\nBOB 0 15\nANN 0 30\nAMY 0 2\nZOE 1 61\nJOE 3 10\n```\n\n### 输出样例:\n```out\nJIM\nZOE\nBOB\nANN\nJOE\nAMY\n75.2\n```', 2, '困难', '输入的第一行是两个整数：$$1\\le N \\le 10000$$，为顾客总数；$$0 \\le M \\le 100$$，为彼此不相交的朋友圈子个数。若$$M$$非0，则此后$$M$$行，每行先给出正整数$$2\\le L \\le 100$$，代表该圈子里朋友的总数，随后给出该朋友圈里的$$L$$位朋友的名字。名字由3个大写英文字母组成，名字间用1个空格分隔。最后$$N$$行给出$$N$$位顾客的姓名、到达时间$$T$$和事务处理时间$$P$$（以分钟为单位），之间用1个空格分隔。简单起见，这里假设顾客信息是按照到达时间先后顺序给出的（有并列时间的按照给出顺序排队），并且假设每个事务最多占用窗口服务60分钟（如果超过则按60分钟计算）。', '按顾客接受服务的顺序输出顾客名字，每个名字占1行。最后一行输出所有顾客的平均等待时间，保留到小数点后1位。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170550824962, 154, '畅通工程之最低成本建设问题', '某地区经过对城镇交通状况的调查，得到现有城镇间快速道路的统计数据，并提出“畅通工程”的目标：使整个地区任何两个城镇间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。现得到城镇道路统计表，表中列出了有可能建设成快速路的若干条道路的成本，求畅通工程需要的最低成本。\n\n### 输入格式:\n\n输入的第一行给出城镇数目$$N$$ ($$1< N \\le 1000$$)和候选道路数目$$M\\le 3N$$；随后的$$M$$行，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号（从1编号到$$N$$）以及该道路改建的预算成本。\n\n### 输出格式:\n\n输出畅通工程需要的最低成本。如果输入数据不足以保证畅通，则输出“Impossible”。\n\n### 输入样例1:\n```in\n6 15\n1 2 5\n1 3 3\n1 4 7\n1 5 4\n1 6 2\n2 3 4\n2 4 6\n2 5 2\n2 6 6\n3 4 6\n3 5 1\n3 6 1\n4 5 10\n4 6 8\n5 6 3\n```\n\n### 输出样例1:\n```out\n12\n```\n\n### 输入样例2:\n```\n5 4\n1 2 1\n2 3 2\n3 1 3\n4 5 4\n```\n\n### 输出样例2:\n```\nImpossible\n```', 2, '困难', '输入的第一行给出城镇数目$$N$$ ($$1< N \\le 1000$$)和候选道路数目$$M\\le 3N$$；随后的$$M$$行，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号（从1编号到$$N$$）以及该道路改建的预算成本。', '输出畅通工程需要的最低成本。如果输入数据不足以保证畅通，则输出“Impossible”。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829170592768001, 155, '畅通工程之局部最小花费问题', '某地区经过对城镇交通状况的调查，得到现有城镇间快速道路的统计数据，并提出“畅通工程”的目标：使整个地区任何两个城镇间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。现得到城镇道路统计表，表中列出了任意两城镇间修建快速路的费用，以及该道路是否已经修通的状态。现请你编写程序，计算出全地区畅通需要的最低成本。\n\n### 输入格式:\n\n输入的第一行给出村庄数目$$N$$ ($$1\\le N \\le 100$$)；随后的$$N(N-1)/2$$行对应村庄间道路的成本及修建状态：每行给出4个正整数，分别是两个村庄的编号（从1编号到$$N$$），此两村庄间道路的成本，以及修建状态 — 1表示已建，0表示未建。\n\n### 输出格式:\n\n输出全省畅通需要的最低成本。\n\n### 输入样例:\n```in\n4\n1 2 1 1\n1 3 4 0\n1 4 1 1\n2 3 3 0\n2 4 2 1\n3 4 5 0\n```\n\n### 输出样例:\n```out\n3\n```', 2, '困难', '输入的第一行给出村庄数目$$N$$ ($$1\\le N \\le 100$$)；随后的$$N(N-1)/2$$行对应村庄间道路的成本及修建状态：每行给出4个正整数，分别是两个村庄的编号（从1编号到$$N$$），此两村庄间道路的成本，以及修建状态 — 1表示已建，0表示未建。', '输出全省畅通需要的最低成本。', 400, 65536, '2021-04-19 01:05:59', '2021-04-19 01:05:59', 0, NULL);
INSERT INTO `question` VALUES (1383829923692662786, 156, '害死人不偿命的(3n+1)猜想', '卡拉兹(Callatz)猜想：\n\n对任何一个正整数 $$n$$，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 $$(3n+1)$$ 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 $$n=1$$。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 $$(3n+1)$$，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……\n\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 $$n$$，简单地数一下，需要多少步（砍几下）才能得到 $$n=1$$？\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，即给出正整数 $$n$$ 的值。\n\n### 输出格式：\n\n输出从 $$n$$ 计算到 1 需要的步数。\n\n### 输入样例：\n```in\n3\n```\n\n### 输出样例：\n```out\n5\n```\n', 3, '中等', '每个测试输入包含 1 个测试用例，即给出正整数 $$n$$ 的值。', '输出从 $$n$$ 计算到 1 需要的步数。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924032401409, 157, '写出这个数', '读入一个正整数 $$n$$，计算其各位数字之和，用汉语拼音写出和的每一位数字。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，即给出自然数 $$n$$ 的值。这里保证 $$n$$ 小于 $$10^{100}$$。\n\n### 输出格式：\n\n在一行内输出 $$n$$ 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。\n\n### 输入样例：\n```in\n1234567890987654321123456789\n```\n\n### 输出样例：\n```out\nyi san wu\n```\n', 3, '困难', '每个测试输入包含 1 个测试用例，即给出自然数 $$n$$ 的值。这里保证 $$n$$ 小于 $$10^{100}$$。', '在一行内输出 $$n$$ 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924082733058, 158, '我要通过！', '“**答案正确**”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“**答案正确**”大派送 —— 只要读入的字符串满足下列条件，系统就输出“**答案正确**”，否则输出“**答案错误**”。\n\n得到“**答案正确**”的条件是：\n\n1. 字符串中必须仅有 `P`、 `A`、 `T`这三种字符，不可以包含其它字符；\n2. 任意形如 `xPATx` 的字符串都可以获得“**答案正确**”，其中 `x` 或者是空字符串，或者是仅由字母 `A` 组成的字符串；\n3. 如果 `aPbTc` 是正确的，那么 `aPbATca` 也是正确的，其中 `a`、 `b`、 `c` 均或者是空字符串，或者是仅由字母 `A` 组成的字符串。\n\n现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“**答案正确**”的。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 $$n$$ ($$<10$$)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。\n\n### 输出格式：\n\n每个字符串的检测结果占一行，如果该字符串可以获得“**答案正确**”，则输出 `YES`，否则输出 `NO`。\n\n### 输入样例：\n```in\n8\nPAT\nPAAT\nAAPATAA\nAAPAATAAAA\nxPATx\nPT\nWhatever\nAPAAATAA\n```\n\n### 输出样例：\n```out\nYES\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n```\n', 3, '困难', '每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 $$n$$ ($$<10$$)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。', '每个字符串的检测结果占一行，如果该字符串可以获得“**答案正确**”，则输出 `YES`，否则输出 `NO`。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924137259009, 159, '成绩排名', '读入 $$n$$（$$>0$$）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，格式为\n```\n第 1 行：正整数 n\n第 2 行：第 1 个学生的姓名 学号 成绩\n第 3 行：第 2 个学生的姓名 学号 成绩\n  ... ... ...\n第 n+1 行：第 n 个学生的姓名 学号 成绩\n```\n其中`姓名`和`学号`均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。\n\n### 输出格式：\n\n对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。\n\n### 输入样例：\n```in\n3\nJoe Math990112 89\nMike CS991301 100\nMary EE990830 95\n```\n\n### 输出样例：\n```out\nMike CS991301\nJoe Math990112\n```\n', 3, '困难', '每个测试输入包含 1 个测试用例，格式为\n```\n第 1 行：正整数 n\n第 2 行：第 1 个学生的姓名 学号 成绩\n第 3 行：第 2 个学生的姓名 学号 成绩\n  ... ... ...\n第 n+1 行：第 n 个学生的姓名 学号 成绩\n```\n其中`姓名`和`学号`均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。', '对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924179202049, 160, '继续(3n+1)猜想', '卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。\n\n当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 $$n=3$$ 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 $$n=5$$、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 $$n$$ 为“关键数”，如果 $$n$$ 不能被数列中的其他数字所覆盖。\n\n现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 $$K$$ ($$<100$$)，第 2 行给出 $$K$$ 个互不相同的待验证的正整数 $$n$$ ($$1<n\\le 100$$)的值，数字间用空格隔开。\n\n### 输出格式：\n\n每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n\n### 输入样例：\n```in\n6\n3 5 6 7 8 11\n```\n\n### 输出样例：\n```out\n7 6\n```\n', 3, '困难', '每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 $$K$$ ($$<100$$)，第 2 行给出 $$K$$ 个互不相同的待验证的正整数 $$n$$ ($$1<n\\le 100$$)的值，数字间用空格隔开。', '每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924229533698, 161, '换个格式输出整数', '让我们用字母 `B` 来表示“百”、字母 `S` 表示“十”，用 `12...n` 来表示不为零的个位数字 `n`（$$<10$$），换个格式来输出任一个不超过 3 位的正整数。例如 `234` 应该被输出为 `BBSSS1234`，因为它有 2 个“百”、3 个“十”、以及个位的 4。\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，给出正整数 $$n$$（$$<1000$$）。\n\n### 输出格式：\n\n每个测试用例的输出占一行，用规定的格式输出 $$n$$。\n\n### 输入样例 1：\n```in\n234\n```\n\n### 输出样例 1：\n```out\nBBSSS1234\n```\n\n### 输入样例 2：\n```in\n23\n```\n\n### 输出样例 2：\n```out\nSS123\n```\n', 3, '中等', '每个测试输入包含 1 个测试用例，给出正整数 $$n$$（$$<1000$$）。', '每个测试用例的输出占一行，用规定的格式输出 $$n$$。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924288253954, 162, '素数对猜想', '让我们定义$$d_n$$为：$$d_n = p_{n+1}-p_n$$，其中$$p_i$$是第$$i$$个素数。显然有$$d_1 = 1$$，且对于$$n>1$$有$$d_n$$是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。\n\n现给定任意正整数`N`($$<10^5$$)，请计算不超过`N`的满足猜想的素数对的个数。\n\n\n### 输入格式:\n\n输入在一行给出正整数`N`。\n\n### 输出格式:\n\n在一行中输出不超过`N`的满足猜想的素数对的个数。\n\n### 输入样例:\n```in\n20\n```\n\n### 输出样例:\n```out\n4\n```', 3, '困难', '输入在一行给出正整数`N`。', '在一行中输出不超过`N`的满足猜想的素数对的个数。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924321808385, 163, '数组元素循环右移问题', '一个数组$$A$$中存有$$N$$（$$>0$$）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移$$M$$（$$\\ge 0$$）个位置，即将$$A$$中的数据由（$$A_0 A_1 \\cdots A_{N-1}$$）变换为（$$A_{N-M} \\cdots A_{N-1} A_0 A_1 \\cdots A_{N-M-1}$$）（最后$$M$$个数循环移至最前面的$$M$$个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n### 输入格式:\n\n每个输入包含一个测试用例，第1行输入$$N$$（$$1\\le N \\le 100$$）和$$M$$（$$\\ge 0$$）；第2行输入$$N$$个整数，之间用空格分隔。\n\n### 输出格式:\n\n在一行中输出循环右移$$M$$位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n### 输入样例:\n```in\n6 2\n1 2 3 4 5 6\n```\n\n### 输出样例:\n```out\n5 6 1 2 3 4\n```', 3, '困难', '每个输入包含一个测试用例，第1行输入$$N$$（$$1\\le N \\le 100$$）和$$M$$（$$\\ge 0$$）；第2行输入$$N$$个整数，之间用空格分隔。', '在一行中输出循环右移$$M$$位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924384722945, 164, '说反话', '给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。\n\n### 输入格式：\n\n测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n\n### 输出格式：\n\n每个测试用例的输出占一行，输出倒序后的句子。\n\n### 输入样例：\n```in\nHello World Here I Come\n```\n\n### 输出样例：\n```out\nCome I Here World Hello\n```\n', 3, '困难', '测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。', '每个测试用例的输出占一行，输出倒序后的句子。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924426665985, 165, '一元多项式求导', '设计函数求一元多项式的导数。（注：$$x^n$$（$$n$$为整数）的一阶导数为$$n x^{n-1}$$。）\n\n### 输入格式:\n\n以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。\n\n### 输出格式:\n\n以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 `0 0`。\n\n### 输入样例:\n```in\n3 4 -5 2 6 1 -2 0\n```\n\n### 输出样例:\n```out\n12 3 -10 1 6 0\n```', 3, '困难', '以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。', '以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 `0 0`。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924481191937, 166, 'A+B 和 C', '给定区间 [$$-2^{31}, 2^{31}$$] 内的 3 个整数 $$A$$、$$B$$ 和 $$C$$，请判断 $$A+B$$ 是否大于 $$C$$。\n\n### 输入格式：\n\n输入第 1 行给出正整数 $$T$$ ($$\\le 10$$)，是测试用例的个数。随后给出 $$T$$ 组测试用例，每组占一行，顺序给出 $$A$$、$$B$$ 和 $$C$$。整数间以空格分隔。\n\n### 输出格式：\n\n对每组测试用例，在一行中输出 `Case #X: true` 如果 $$A+B>C$$，否则输出 `Case #X: false`，其中 `X` 是测试用例的编号（从 1 开始）。\n\n### 输入样例：\n```in\n4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647\n```\n\n### 输出样例：\n```out\nCase #1: false\nCase #2: true\nCase #3: true\nCase #4: false\n```\n', 3, '中等', '输入第 1 行给出正整数 $$T$$ ($$\\le 10$$)，是测试用例的个数。随后给出 $$T$$ 组测试用例，每组占一行，顺序给出 $$A$$、$$B$$ 和 $$C$$。整数间以空格分隔。', '对每组测试用例，在一行中输出 `Case #X: true` 如果 $$A+B>C$$，否则输出 `Case #X: false`，其中 `X` 是测试用例的编号（从 1 开始）。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924531523586, 167, '数字分类', '给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\n\n- $$A_1$$ = 能被 5 整除的数字中所有偶数的和；\n- $$A_2$$ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $$n_1-n_2+n_3-n_4\\cdots$$；\n- $$A_3$$ = 被 5 除后余 2 的数字的个数；\n- $$A_4$$ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；\n- $$A_5$$ = 被 5 除后余 4 的数字中最大数字。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $$N$$，随后给出 $$N$$ 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n\n### 输出格式：\n\n对给定的 $$N$$ 个正整数，按题目要求计算 $$A_1$$~$$A_5$$ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n\n若其中某一类数字不存在，则在相应位置输出 `N`。\n\n### 输入样例 1：\n```in\n13 1 2 3 4 5 6 7 8 9 10 20 16 18\n```\n\n### 输出样例 1：\n```out\n30 11 2 9.7 9\n```\n\n### 输入样例 2：\n```in\n8 1 2 4 5 6 7 9 16\n```\n\n### 输出样例 2：\n```out\nN 11 2 N 9\n```\n', 3, '困难', '每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $$N$$，随后给出 $$N$$ 个不超过 1000 的待分类的正整数。数字间以空格分隔。', '对给定的 $$N$$ 个正整数，按题目要求计算 $$A_1$$~$$A_5$$ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n\n若其中某一类数字不存在，则在相应位置输出 `N`。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924590243842, 168, '数素数', '令 $$P_i$$ 表示第 $$i$$ 个素数。现任给两个正整数 $$M \\le N \\le 10^4$$，请输出 $$P_M$$ 到 $$P_N$$ 的所有素数。\n\n### 输入格式：\n\n输入在一行中给出 $$M$$ 和 $$N$$，其间以空格分隔。\n\n### 输出格式：\n\n输出从 $$P_M$$ 到 $$P_N$$ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。\n\n### 输入样例：\n```in\n5 27\n```\n\n### 输出样例：\n```out\n11 13 17 19 23 29 31 37 41 43\n47 53 59 61 67 71 73 79 83 89\n97 101 103\n```\n', 3, '困难', '输入在一行中给出 $$M$$ 和 $$N$$，其间以空格分隔。', '输出从 $$P_M$$ 到 $$P_N$$ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924636381185, 169, '福尔摩斯的约会', '大侦探福尔摩斯接到一张奇怪的字条：`我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&hgsfdk d&Hyscvnm`。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间`星期四 14:04`，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 `D`，代表星期四；第 2 对相同的字符是 `E` ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 `A` 到 `N` 表示）；后面两字符串第 1 对相同的英文字母 `s` 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。\n\n### 输入格式：\n\n输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。\n\n### 输出格式：\n\n在一行中输出约会的时间，格式为 `DAY HH:MM`，其中 `DAY` 是某星期的 3 字符缩写，即 `MON` 表示星期一，`TUE` 表示星期二，`WED` 表示星期三，`THU` 表示星期四，`FRI` 表示星期五，`SAT` 表示星期六，`SUN` 表示星期日。题目输入保证每个测试存在唯一解。\n\n### 输入样例：\n```in\n3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm\n```\n\n### 输出样例：\n```out\nTHU 14:04\n```\n', 3, '困难', '输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。', '在一行中输出约会的时间，格式为 `DAY HH:MM`，其中 `DAY` 是某星期的 3 字符缩写，即 `MON` 表示星期一，`TUE` 表示星期二，`WED` 表示星期三，`THU` 表示星期四，`FRI` 表示星期五，`SAT` 表示星期六，`SUN` 表示星期日。题目输入保证每个测试存在唯一解。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924690907138, 170, '德才论', '宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”\n\n现给出一批考生的德才分数，请根据司马光的理论给出录取排名。\n\n\n### 输入格式：\n\n输入第一行给出 3 个正整数，分别为：$$N$$（$$\\le 10^5$$），即考生总数；$$L$$（$$\\ge 60$$），为录取最低分数线，即德分和才分均不低于 $$L$$ 的考生才有资格被考虑录取；$$H$$（$$< 100$$），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 $$H$$，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 $$L$$ 的考生也按总分排序，但排在第三类考生之后。\n\n随后 $$N$$ 行，每行给出一位考生的信息，包括：`准考证号 德分 才分`，其中`准考证号`为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。\n\n### 输出格式：\n\n输出第一行首先给出达到最低分数线的考生人数 $$M$$，随后 $$M$$ 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。\n\n\n### 输入样例：\n```in\n14 60 80\n10000001 64 90\n10000002 90 60\n10000011 85 80\n10000003 85 80\n10000004 80 85\n10000005 82 77\n10000006 83 76\n10000007 90 78\n10000008 75 79\n10000009 59 90\n10000010 88 45\n10000012 80 100\n10000013 90 99\n10000014 66 60\n```\n\n### 输出样例：\n```out\n12\n10000013 90 99\n10000012 80 100\n10000003 85 80\n10000011 85 80\n10000004 80 85\n10000007 90 78\n10000006 83 76\n10000005 82 77\n10000002 90 60\n10000014 66 60\n10000008 75 79\n10000001 64 90\n```\n', 3, '困难', '输入第一行给出 3 个正整数，分别为：$$N$$（$$\\le 10^5$$），即考生总数；$$L$$（$$\\ge 60$$），为录取最低分数线，即德分和才分均不低于 $$L$$ 的考生才有资格被考虑录取；$$H$$（$$< 100$$），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 $$H$$，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 $$L$$ 的考生也按总分排序，但排在第三类考生之后。\n\n随后 $$N$$ 行，每行给出一位考生的信息，包括：`准考证号 德分 才分`，其中`准考证号`为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。', '输出第一行首先给出达到最低分数线的考生人数 $$M$$，随后 $$M$$ 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924732850177, 171, '部分A+B', '正整数 $$A$$ 的“$$D_A$$（为 1 位整数）部分”定义为由 $$A$$ 中所有 $$D_A$$ 组成的新整数 $$P_A$$。例如：给定 $$A = 3862767$$，$$D_A = 6$$，则 $$A$$ 的“6 部分”$$P_A$$ 是 66，因为 $$A$$ 中有 2 个 6。\n\n现给定 $$A$$、$$D_A$$、$$B$$、$$D_B$$，请编写程序计算 $$P_A + P_B$$。\n\n### 输入格式：\n\n输入在一行中依次给出 $$A$$、$$D_A$$、$$B$$、$$D_B$$，中间以空格分隔，其中 $$0 < A, B < 10^{10}$$。\n\n### 输出格式：\n\n在一行中输出 $$P_A + P_B$$ 的值。\n\n### 输入样例 1：\n```in\n3862767 6 13530293 3\n```\n\n### 输出样例 1：\n```out\n399\n```\n\n### 输入样例 2：\n```in\n3862767 1 13530293 8\n```\n\n### 输出样例 2：\n```out\n0\n```\n', 3, '中等', '输入在一行中依次给出 $$A$$、$$D_A$$、$$B$$、$$D_B$$，中间以空格分隔，其中 $$0 < A, B < 10^{10}$$。', '在一行中输出 $$P_A + P_B$$ 的值。', 150, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924795764737, 172, 'A除以B', '本题要求计算 $$A/B$$，其中 $$A$$ 是不超过 1000 位的正整数，$$B$$ 是 1 位正整数。你需要输出商数 $$Q$$ 和余数 $$R$$，使得 $$A = B \\times Q + R$$ 成立。\n\n### 输入格式：\n\n输入在一行中依次给出 $$A$$ 和 $$B$$，中间以 1 空格分隔。\n\n### 输出格式：\n\n在一行中依次输出 $$Q$$ 和 $$R$$，中间以 1 空格分隔。\n\n### 输入样例：\n```in\n123456789050987654321 7\n```\n\n### 输出样例：\n```out\n17636684150141093474 3\n```\n', 3, '困难', '输入在一行中依次给出 $$A$$ 和 $$B$$，中间以 1 空格分隔。', '在一行中依次输出 $$Q$$ 和 $$R$$，中间以 1 空格分隔。', 100, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924846096385, 173, '锤子剪刀布', '大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：\n\n\n![FigCJB.jpg](~/724da598-b37f-4f1f-99b4-71459654ce3a.jpg)\n\n\n现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。\n\n### 输入格式：\n\n输入第 1 行给出正整数 $$N$$（$$\\le 10^5$$），即双方交锋的次数。随后 $$N$$ 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。`C` 代表“锤子”、`J` 代表“剪刀”、`B` 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。\n\n### 输出格式：\n\n输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。\n\n### 输入样例：\n```in\n10\nC J\nJ B\nC B\nB B\nB C\nC C\nC B\nJ B\nB C\nJ J\n```\n\n### 输出样例：\n```out\n5 3 2\n2 3 5\nB B\n```\n', 3, '困难', '输入第 1 行给出正整数 $$N$$（$$\\le 10^5$$），即双方交锋的次数。随后 $$N$$ 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。`C` 代表“锤子”、`J` 代表“剪刀”、`B` 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。', '输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924888039425, 174, '数字黑洞', '给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 `6174`，这个神奇的数字也叫 Kaprekar 常数。\n\n例如，我们从`6767`开始，将得到\n```\n7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n7641 - 1467 = 6174\n... ...\n```\n\n现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。\n\n### 输入格式：\n\n输入给出一个 $$(0, 10^4)$$ 区间内的正整数 $$N$$。\n\n### 输出格式：\n\n如果 $$N$$ 的 4 位数字全相等，则在一行内输出 `N - N = 0000`；否则将计算的每一步在一行内输出，直到 `6174` 作为差出现，输出格式见样例。注意每个数字按 `4` 位数格式输出。\n\n### 输入样例 1：\n```in\n6767\n```\n\n### 输出样例 1：\n```out\n7766 - 6677 = 1089\n9810 - 0189 = 9621\n9621 - 1269 = 8352\n8532 - 2358 = 6174\n```\n\n### 输入样例 2：\n```in\n2222\n```\n\n### 输出样例 2：\n```out\n2222 - 2222 = 0000\n```\n', 3, '困难', '输入给出一个 $$(0, 10^4)$$ 区间内的正整数 $$N$$。', '如果 $$N$$ 的 4 位数字全相等，则在一行内输出 `N - N = 0000`；否则将计算的每一步在一行内输出，直到 `6174` 作为差出现，输出格式见样例。注意每个数字按 `4` 位数格式输出。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924929982465, 175, '月饼', '月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。\n\n注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。\n\n### 输入格式：\n\n每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $$N$$ 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 $$D$$ 表示市场最大需求量。随后一行给出 $$N$$ 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 $$N$$ 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。\n\n### 输出格式：\n\n对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。\n\n### 输入样例：\n```in\n3 20\n18 15 10\n75 72 45\n```\n\n### 输出样例：\n```out\n94.50\n```\n', 3, '困难', '每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $$N$$ 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 $$D$$ 表示市场最大需求量。随后一行给出 $$N$$ 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 $$N$$ 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。', '对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。', 150, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829924967731201, 176, '个位数统计', '给定一个 $$k$$ 位整数 $$N = d_{k-1}10^{k-1} + \\cdots + d_1 10^1 + d_0$$ ($$0\\le d_i \\le 9$$, $$i=0,\\cdots ,k-1$$, $$d_{k-1}>0$$)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 $$N = 100311$$，则有 2 个 0，3 个 1，和 1 个 3。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 $$N$$。\n\n### 输出格式：\n\n对 $$N$$ 中每一种不同的个位数字，以 `D:M` 的格式在一行中输出该位数字 `D` 及其在 $$N$$ 中出现的次数 `M`。要求按 `D` 的升序输出。\n\n### 输入样例：\n```in\n100311\n```\n\n### 输出样例：\n```out\n0:2\n1:3\n3:1\n```\n', 3, '中等', '每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 $$N$$。', '对 $$N$$ 中每一种不同的个位数字，以 `D:M` 的格式在一行中输出该位数字 `D` 及其在 $$N$$ 中出现的次数 `M`。要求按 `D` 的升序输出。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925009674242, 177, 'D进制的A+B', '输入两个非负 10 进制整数 $$A$$ 和 $$B$$ ($$\\le 2^{30} -1$$)，输出 $$A+B$$ 的 $$D$$ ($$1 < D \\le 10$$)进制数。\n\n### 输入格式：\n\n输入在一行中依次给出 3 个整数 $$A$$、$$B$$ 和 $$D$$。\n\n### 输出格式：\n\n输出 $$A+B$$ 的 $$D$$ 进制数。\n\n### 输入样例：\n```in\n123 456 8\n```\n\n### 输出样例：\n```out\n1103\n```\n', 3, '困难', '输入在一行中依次给出 3 个整数 $$A$$、$$B$$ 和 $$D$$。', '输出 $$A+B$$ 的 $$D$$ 进制数。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925043228674, 178, '组个最小数', '给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。\n\n现给定数字，请编写程序输出能够组成的最小的数。\n\n### 输入格式：\n\n输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。\n\n### 输出格式：\n\n在一行中输出能够组成的最小的数。\n\n### 输入样例：\n```in\n2 2 0 0 0 3 0 0 1 0\n```\n\n### 输出样例：\n```out\n10015558\n```', 3, '困难', '输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。', '在一行中输出能够组成的最小的数。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925068394498, 179, '科学计数法', '科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9]`.`[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。\n\n现以科学计数法的格式给出实数 $$A$$，请编写程序按普通数字表示法输出 $$A$$，并保证所有有效位都被保留。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 $$A$$。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。\n\n### 输出格式：\n\n对每个测试用例，在一行中按普通数字表示法输出 $$A$$，并保证所有有效位都被保留，包括末尾的 0。\n\n### 输入样例 1：\n```in\n+1.23400E-03\n```\n\n### 输出样例 1：\n```out\n0.00123400\n```\n\n### 输入样例 2：\n```in\n-1.2E+10\n```\n\n### 输出样例 2：\n```out\n-12000000000\n```\n', 3, '困难', '每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 $$A$$。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。', '对每个测试用例，在一行中按普通数字表示法输出 $$A$$，并保证所有有效位都被保留，包括末尾的 0。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925106143233, 180, '反转链表', '给定一个常数 $$K$$ 以及一个单链表 $$L$$，请编写程序将 $$L$$ 中每 $$K$$ 个结点反转。例如：给定 $$L$$ 为 1→2→3→4→5→6，$$K$$ 为 3，则输出应该为 3→2→1→6→5→4；如果 $$K$$ 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 $$K$$ 个元素不反转。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 $$N$$ ($$\\le 10^5$$)、以及正整数 $$K$$ ($$\\le N$$)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 $$-1$$ 表示。\n\n接下来有 $$N$$ 行，每行格式为：\n```\nAddress Data Next\n```\n\n其中 `Address` 是结点地址，`Data` 是该结点保存的整数数据，`Next` 是下一结点的地址。\n\n### 输出格式：\n\n对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。\n\n### 输入样例：\n```in\n00100 6 4\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218\n```\n\n### 输出样例：\n```out\n00000 4 33218\n33218 3 12309\n12309 2 00100\n00100 1 99999\n99999 5 68237\n68237 6 -1\n```\n', 3, '困难', '每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 $$N$$ ($$\\le 10^5$$)、以及正整数 $$K$$ ($$\\le N$$)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 $$-1$$ 表示。\n\n接下来有 $$N$$ 行，每行格式为：\n```\nAddress Data Next\n```\n\n其中 `Address` 是结点地址，`Data` 是该结点保存的整数数据，`Next` 是下一结点的地址。', '对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925139697665, 181, '程序运行时间', '要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 $$f$$ 的运行时间，我们只要在调用 $$f$$ 之前先调用 clock()，获得一个时钟打点数 C1；在 $$f$$ 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 $$f$$ 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。\n\n这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。\n\n### 输入格式：\n\n输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 $$<$$ C2，并且取值在 $$[0, 10^7]$$。\n\n### 输出格式：\n\n在一行中输出被测函数运行的时间。运行时间必须按照 `hh:mm:ss`（即2位的 `时:分:秒`）格式输出；不足 1 秒的时间四舍五入到秒。\n\n### 输入样例：\n```in\n123 4577973\n```\n\n### 输出样例：\n```out\n12:42:59\n```\n', 3, '中等', '输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 $$<$$ C2，并且取值在 $$[0, 10^7]$$。', '在一行中输出被测函数运行的时间。运行时间必须按照 `hh:mm:ss`（即2位的 `时:分:秒`）格式输出；不足 1 秒的时间四舍五入到秒。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925177446401, 182, '打印沙漏', '本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印\n```\n*****\n ***\n  *\n ***\n*****\n```\n\n所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。\n\n给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。\n\n\n### 输入格式:\n\n输入在一行给出1个正整数N（$$\\le$$1000）和一个符号，中间以空格分隔。\n\n### 输出格式:\n\n首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。\n\n### 输入样例:\n```in\n19 *\n```\n\n### 输出样例:\n```out\n*****\n ***\n  *\n ***\n*****\n2\n```', 3, '困难', '输入在一行给出1个正整数N（$$\\le$$1000）和一个符号，中间以空格分隔。', '首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925219389441, 183, '人口普查', '某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。\n\n这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。\n\n### 输入格式：\n\n输入在第一行给出正整数 $$N$$，取值在$$(0, 10^5]$$；随后 $$N$$ 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 `yyyy/mm/dd`（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。\n\n### 输出格式：\n\n在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。\n\n### 输入样例：\n```in\n5\nJohn 2001/05/12\nTom 1814/09/06\nAnn 2121/01/30\nJames 1814/09/05\nSteve 1967/11/20\n```\n\n### 输出样例：\n```out\n3 Tom John\n```\n', 3, '困难', '输入在第一行给出正整数 $$N$$，取值在$$(0, 10^5]$$；随后 $$N$$ 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 `yyyy/mm/dd`（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。', '在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925252943874, 184, '旧键盘', '旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。\n\n### 输入格式：\n\n输入在 2 行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过 80 个字符的串，由字母 A-Z（包括大、小写）、数字 0-9、以及下划线 `_`（代表空格）组成。题目保证 2 个字符串均非空。\n\n### 输出格式：\n\n按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键。\n\n### 输入样例：\n```in\n7_This_is_a_test\n_hs_s_a_es\n```\n\n### 输出样例：\n```out\n7TI\n```\n', 3, '困难', '输入在 2 行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过 80 个字符的串，由字母 A-Z（包括大、小写）、数字 0-9、以及下划线 `_`（代表空格）组成。题目保证 2 个字符串均非空。', '按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925328441346, 185, '完美数列', '给定一个正整数数列，和正整数 $$p$$，设这个数列中的最大值是 $$M$$，最小值是 $$m$$，如果 $$M \\le mp$$，则称这个数列是完美数列。\n\n现在给定参数 $$p$$ 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。\n\n### 输入格式：\n\n输入第一行给出两个正整数 $$N$$ 和 $$p$$，其中 $$N$$（$$\\le 10^5$$）是输入的正整数的个数，$$p$$（$$\\le 10^9$$）是给定的参数。第二行给出 $$N$$ 个正整数，每个数不超过 $$10^9$$。\n\n### 输出格式：\n\n在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。\n\n### 输入样例：\n```in\n10 8\n2 3 20 4 5 1 6 7 8 9\n```\n\n### 输出样例：\n```out\n8\n```\n', 3, '困难', '输入第一行给出两个正整数 $$N$$ 和 $$p$$，其中 $$N$$（$$\\le 10^5$$）是输入的正整数的个数，$$p$$（$$\\le 10^9$$）是给定的参数。第二行给出 $$N$$ 个正整数，每个数不超过 $$10^9$$。', '在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925361995777, 186, '查验身份证', '一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：\n\n首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值`Z`；最后按照以下关系对应`Z`值与校验码`M`的值：\n```\nZ：0 1 2 3 4 5 6 7 8 9 10\nM：1 0 X 9 8 7 6 5 4 3 2\n```\n现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。\n\n### 输入格式：\n\n输入第一行给出正整数$$N$$（$$\\le 100$$）是输入的身份证号码的个数。随后$$N$$行，每行给出1个18位身份证号码。\n\n### 输出格式：\n\n按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出`All passed`。\n\n### 输入样例1：\n```in\n4\n320124198808240056\n12010X198901011234\n110108196711301866\n37070419881216001X\n```\n\n### 输出样例1：\n```out\n12010X198901011234\n110108196711301866\n37070419881216001X\n```\n\n### 输入样例2：\n```\n2\n320124198808240056\n110108196711301862\n```\n\n### 输出样例2：\n```\nAll passed\n```\n\n**鸣谢阜阳师范学院范建中老师补充数据**\n\n**鸣谢浙江工业大学之江学院石洗凡老师纠正数据**', 3, '中等', '输入第一行给出正整数$$N$$（$$\\le 100$$）是输入的身份证号码的个数。随后$$N$$行，每行给出1个18位身份证号码。', '按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出`All passed`。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925399744513, 187, '挖掘机技术哪家强', '为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。\n\n### 输入格式：\n\n输入在第 1 行给出不超过 $$10^5$$ 的正整数 $$N$$，即参赛人数。随后 $$N$$ 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。\n\n### 输出格式：\n\n在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。\n\n### 输入样例：\n```in\n6\n3 65\n2 80\n1 100\n2 70\n3 40\n3 0\n```\n\n### 输出样例：\n```out\n2 150\n```\n', 3, '困难', '输入在第 1 行给出不超过 $$10^5$$ 的正整数 $$N$$，即参赛人数。随后 $$N$$ 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。', '在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925441687554, 188, '旧键盘打字', '旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？\n\n### 输入格式：\n\n输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 $$10^5$$ 个字符的串。可用的字符包括字母 [`a`-`z`, `A`-`Z`]、数字 `0`-`9`、以及下划线 `_`（代表空格）、`,`、`.`、`-`、`+`（代表上档键）。题目保证第 2 行输入的文字串非空。\n\n注意：如果上档键坏掉了，那么大写的英文字母无法被打出。\n\n### 输出格式：\n\n在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。\n\n### 输入样例：\n```in\n7+IE.\n7_This_is_a_test.\n```\n\n### 输出样例：\n```out\n_hs_s_a_tst\n```\n', 3, '困难', '输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 $$10^5$$ 个字符的串。可用的字符包括字母 [`a`-`z`, `A`-`Z`]、数字 `0`-`9`、以及下划线 `_`（代表空格）、`,`、`.`、`-`、`+`（代表上档键）。题目保证第 2 行输入的文字串非空。\n\n注意：如果上档键坏掉了，那么大写的英文字母无法被打出。', '在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925475241986, 189, '有理数四则运算', '本题要求编写程序，计算 2 个有理数的和、差、积、商。\n\n### 输入格式：\n\n输入在一行中按照 `a1/b1 a2/b2` 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。\n\n### 输出格式：\n\n分别在 4 行中按照 `有理数1 运算符 有理数2 = 结果` 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 `k a/b`，其中 `k` 是整数部分，`a/b` 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 `Inf`。题目保证正确的输出中没有超过整型范围的整数。\n\n### 输入样例 1：\n```in\n2/3 -4/2\n```\n\n### 输出样例 1：\n```out\n2/3 + (-2) = (-1 1/3)\n2/3 - (-2) = 2 2/3\n2/3 * (-2) = (-1 1/3)\n2/3 / (-2) = (-1/3)\n```\n\n### 输入样例 2：\n```in\n5/3 0/6\n```\n\n### 输出样例 2：\n```out\n1 2/3 + 0 = 1 2/3\n1 2/3 - 0 = 1 2/3\n1 2/3 * 0 = 0\n1 2/3 / 0 = Inf\n```\n', 3, '困难', '输入在一行中按照 `a1/b1 a2/b2` 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。', '分别在 4 行中按照 `有理数1 运算符 有理数2 = 结果` 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 `k a/b`，其中 `k` 是整数部分，`a/b` 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 `Inf`。题目保证正确的输出中没有超过整型范围的整数。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925508796417, 190, '插入与归并', '根据维基百科的定义：\n\n**插入排序**是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。\n\n**归并排序**进行如下迭代操作：首先将原始序列看成 N 个只包含 1 个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下 1 个有序的序列。\n\n现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？\n\n\n### 输入格式：\n\n输入在第一行给出正整数 N ($$\\le$$100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。\n\n### 输出格式：\n\n首先在第 1 行中输出`Insertion Sort`表示插入排序、或`Merge Sort`表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。\n\n### 输入样例 1：\n```in\n10\n3 1 2 8 7 5 9 4 6 0\n1 2 3 7 8 5 9 4 6 0\n```\n\n### 输出样例 1：\n```out\nInsertion Sort\n1 2 3 5 7 8 9 4 6 0\n```\n\n### 输入样例 2：\n```in\n10\n3 1 2 8 7 5 9 4 0 6\n1 3 2 8 5 7 4 9 0 6\n```\n\n### 输出样例 2：\n```out\nMerge Sort\n1 2 3 8 4 5 7 9 0 6\n```\n', 3, '困难', '输入在第一行给出正整数 N ($$\\le$$100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。', '首先在第 1 行中输出`Insertion Sort`表示插入排序、或`Merge Sort`表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925542350849, 191, '跟奥巴马一起编程', '美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！\n\n### 输入格式：\n\n输入在一行中给出正方形边长 $$N$$（$$3\\le N\\le 20$$）和组成正方形边的某种字符 C，间隔一个空格。\n\n### 输出格式：\n\n输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。\n\n### 输入样例：\n```in\n10 a\n```\n\n### 输出样例：\n```out\naaaaaaaaaa\na        a\na        a\na        a\naaaaaaaaaa\n```\n', 3, '中等', '输入在一行中给出正方形边长 $$N$$（$$3\\le N\\le 20$$）和组成正方形边的某种字符 C，间隔一个空格。', '输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925580099586, 192, '在霍格沃茨找零钱', '如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 $$P$$ 和他实付的钱 $$A$$，你的任务是写一个程序来计算他应该被找的零钱。\n\n### 输入格式：\n\n输入在 1 行中分别给出 $$P$$ 和 $$A$$，格式为 `Galleon.Sickle.Knut`，其间用 1 个空格分隔。这里 `Galleon` 是 [0, $$10^7$$] 区间内的整数，`Sickle` 是 [0, 17) 区间内的整数，`Knut` 是 [0, 29) 区间内的整数。\n\n### 输出格式：\n\n在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。\n\n### 输入样例 1：\n```in\n10.16.27 14.1.28\n```\n\n### 输出样例 1：\n```out\n3.2.1\n```\n\n### 输入样例 2：\n```in\n14.1.28 10.16.27\n```\n\n### 输出样例 2：\n```out\n-3.2.1\n```\n', 3, '困难', '输入在 1 行中分别给出 $$P$$ 和 $$A$$，格式为 `Galleon.Sickle.Knut`，其间用 1 个空格分隔。这里 `Galleon` 是 [0, $$10^7$$] 区间内的整数，`Sickle` 是 [0, 17) 区间内的整数，`Knut` 是 [0, 29) 区间内的整数。', '在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925617848321, 193, '统计同成绩学生', '本题要求读入 $$N$$ 名学生的成绩，将获得某一给定分数的学生人数输出。\n\n### 输入格式：\n\n输入在第 1 行给出不超过 $$10^5$$ 的正整数 $$N$$，即学生总人数。随后一行给出 $$N$$ 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 $$K$$（不超过 $$N$$ 的正整数），随后是 $$K$$ 个分数，中间以空格分隔。\n\n### 输出格式：\n\n在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。\n\n### 输入样例：\n```in\n10\n60 75 90 55 75 99 82 90 75 50\n3 75 90 88\n```\n\n### 输出样例：\n```out\n3 2 0\n```\n', 3, '困难', '输入在第 1 行给出不超过 $$10^5$$ 的正整数 $$N$$，即学生总人数。随后一行给出 $$N$$ 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 $$K$$（不超过 $$N$$ 的正整数），随后是 $$K$$ 个分数，中间以空格分隔。', '在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。', 250, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925655597057, 194, '到底买不买', '小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。\n\n为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。\n\n![figbuy.jpg](~/b7e2ffa6-8819-436d-ad79-a41263abe914.jpg)\n\n图 1\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。\n\n### 输出格式：\n\n如果可以买，则在一行中输出 `Yes` 以及有多少多余的珠子；如果不可以买，则在一行中输出 `No` 以及缺了多少珠子。其间以 1 个空格分隔。\n\n### 输入样例 1：\n```in\nppRYYGrrYBR2258\nYrR8RrY\n```\n\n### 输出样例 1：\n```out\nYes 8\n```\n\n### 输入样例 2：\n```in\nppRYYGrrYB225\nYrR8RrY\n```\n\n### 输出样例 2：\n```out\nNo 2\n```\n', 3, '困难', '每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。', '如果可以买，则在一行中输出 `Yes` 以及有多少多余的珠子；如果不可以买，则在一行中输出 `No` 以及缺了多少珠子。其间以 1 个空格分隔。', 150, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925697540097, 195, '有几个PAT', '字符串 `APPAPT` 中包含了两个单词 `PAT`，其中第一个 `PAT` 是第 2 位(`P`)，第 4 位(`A`)，第 6 位(`T`)；第二个 `PAT` 是第 3 位(`P`)，第 4 位(`A`)，第 6 位(`T`)。\n\n现给定字符串，问一共可以形成多少个 `PAT`？\n\n### 输入格式：\n\n输入只有一行，包含一个字符串，长度不超过$$10^5$$，只包含 `P`、`A`、`T` 三种字母。\n\n### 输出格式：\n\n在一行中输出给定字符串中包含多少个 `PAT`。由于结果可能比较大，只输出对 1000000007 取余数的结果。\n\n### 输入样例：\n```in\nAPPAPT\n```\n\n### 输出样例：\n```out\n2\n```\n', 3, '困难', '输入只有一行，包含一个字符串，长度不超过$$10^5$$，只包含 `P`、`A`、`T` 三种字母。', '在一行中输出给定字符串中包含多少个 `PAT`。由于结果可能比较大，只输出对 1000000007 取余数的结果。', 150, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925726900225, 196, '考试座位号', '每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$\\le 1000$$），随后 $$N$$ 行，每行给出一个考生的信息：`准考证号 试机座位号 考试座位号`。其中`准考证号`由 16 位数字组成，座位从 1 到 $$N$$ 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。\n\n考生信息之后，给出一个正整数 $$M$$（$$\\le N$$），随后一行中给出 $$M$$ 个待查询的试机座位号码，以空格分隔。\n\n### 输出格式：\n\n对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。\n\n### 输入样例：\n```in\n4\n3310120150912233 2 4\n3310120150912119 4 1\n3310120150912126 1 3\n3310120150912002 3 2\n2\n3 4\n```\n\n### 输出样例：\n```out\n3310120150912002 2\n3310120150912119 1\n```\n', 3, '中等', '输入第一行给出一个正整数 $$N$$（$$\\le 1000$$），随后 $$N$$ 行，每行给出一个考生的信息：`准考证号 试机座位号 考试座位号`。其中`准考证号`由 16 位数字组成，座位从 1 到 $$N$$ 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。\n\n考生信息之后，给出一个正整数 $$M$$（$$\\le N$$），随后一行中给出 $$M$$ 个待查询的试机座位号码，以空格分隔。', '对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925768843266, 197, '字符统计', '请编写程序，找出一段给定文字中出现最频繁的那个英文字母。\n\n### 输入格式：\n\n输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。\n\n### 输出格式：\n\n在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。\n\n### 输入样例：\n```in\nThis is a simple TEST.  There ARE numbers and other symbols 1&2&3...........\n```\n\n### 输出样例：\n```out\ne 7\n```\n', 3, '困难', '输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。', '在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925806592002, 198, '输出PATest', '给定一个长度不超过 $$10^4$$ 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 `PATestPATest....` 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。\n\n### 输入格式：\n\n输入在一行中给出一个长度不超过 $$10^4$$ 的、仅由英文字母构成的非空字符串。\n\n### 输出格式：\n\n在一行中按题目要求输出排序后的字符串。题目保证输出非空。\n\n### 输入样例：\n```in\nredlesPayBestPATTopTeePHPereatitAPPT\n```\n\n### 输出样例：\n```out\nPATestPATestPTetPTePePee\n```\n', 3, '困难', '输入在一行中给出一个长度不超过 $$10^4$$ 的、仅由英文字母构成的非空字符串。', '在一行中按题目要求输出排序后的字符串。题目保证输出非空。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925844340737, 199, '火星数字', '火星人是以 13 进制计数的：\n\n- 地球人的 0 被火星人称为 tret。\n- 地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。\n- 火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。\n\n例如地球人的数字 `29` 翻译成火星文就是 `hel mar`；而火星文 `elo nov` 对应地球数字 `115`。为了方便交流，请你编写程序实现地球和火星数字之间的互译。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$<100$$），随后 $$N$$ 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。\n\n### 输出格式：\n\n对应输入的每一行，在一行中输出翻译后的另一种语言的数字。\n\n### 输入样例：\n```in\n4\n29\n5\nelo nov\ntam\n```\n\n### 输出样例：\n```out\nhel mar\nmay\n115\n13\n```\n', 3, '困难', '输入第一行给出一个正整数 $$N$$（$$<100$$），随后 $$N$$ 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。', '对应输入的每一行，在一行中输出翻译后的另一种语言的数字。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925882089474, 200, '快速排序', '著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 $$N$$ 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？\n\n例如给定 $N = 5$, 排列是1、3、2、4、5。则：\n\n- 1 的左边没有元素，右边的元素都比它大，所以它可能是主元；\n- 尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；\n- 尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；\n- 类似原因，4 和 5 都可能是主元。\n\n因此，有 3 个元素可能是主元。\n\n### 输入格式：\n\n输入在第 1 行中给出一个正整数 $$N$$（$$\\le 10^5$$）； 第 2 行是空格分隔的 $$N$$ 个不同的正整数，每个数不超过 $$10^9$$。\n\n### 输出格式：\n\n在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。\n\n### 输入样例：\n```in\n5\n1 3 2 4 5\n```\n\n### 输出样例：\n```out\n3\n1 4 5\n```\n', 3, '困难', '输入在第 1 行中给出一个正整数 $$N$$（$$\\le 10^5$$）； 第 2 行是空格分隔的 $$N$$ 个不同的正整数，每个数不超过 $$10^9$$。', '在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925915643906, 201, '划拳', '划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。\n\n下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。\n\n### 输入格式：\n\n输入第一行先给出一个正整数 $$N$$（$$\\le 100$$），随后 $$N$$ 行，每行给出一轮划拳的记录，格式为：\n```\n甲喊 甲划 乙喊 乙划\n```\n其中`喊`是喊出的数字，`划`是划出的数字，均为不超过 100 的正整数（两只手一起划）。\n\n### 输出格式：\n\n在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。\n\n### 输入样例：\n```in\n5\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15\n```\n\n### 输出样例：\n```out\n1 2\n```\n', 3, '中等', '输入第一行先给出一个正整数 $$N$$（$$\\le 100$$），随后 $$N$$ 行，每行给出一轮划拳的记录，格式为：\n```\n甲喊 甲划 乙喊 乙划\n```\n其中`喊`是喊出的数字，`划`是划出的数字，均为不超过 100 的正整数（两只手一起划）。', '在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925949198338, 202, '编程团体赛', '编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。\n\n现给定所有队员的比赛成绩，请你编写程序找出冠军队。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$\\le 10^4$$），即所有参赛队员总数。随后 $$N$$ 行，每行给出一位队员的成绩，格式为：`队伍编号-队员编号 成绩`，其中`队伍编号`为 1 到 1000 的正整数，`队员编号`为 1 到 10 的正整数，`成绩`为 0 到 100 的整数。\n\n### 输出格式：\n\n在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。\n\n### 输入样例：\n```in\n6\n3-10 99\n11-5 87\n102-1 0\n102-3 100\n11-9 89\n3-2 61\n```\n\n### 输出样例：\n```out\n11 176\n```\n', 3, '困难', '输入第一行给出一个正整数 $$N$$（$$\\le 10^4$$），即所有参赛队员总数。随后 $$N$$ 行，每行给出一位队员的成绩，格式为：`队伍编号-队员编号 成绩`，其中`队伍编号`为 1 到 1000 的正整数，`队员编号`为 1 到 10 的正整数，`成绩`为 0 到 100 的整数。', '在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829925982752769, 203, '数字加密', '本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。\n\n### 输入格式：\n\n输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中输出加密后的结果。\n\n### 输入样例：\n```in\n1234567 368782971\n```\n\n### 输出样例：\n```out\n3695Q8118\n```\n', 3, '困难', '输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。', '在一行中输出加密后的结果。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926012112898, 204, '数列的片段和', '给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。\n\n给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0。\n\n### 输入格式：\n\n输入第一行给出一个不超过 $$10^5$$ 的正整数 $$N$$，表示数列中数的个数，第二行给出 $$N $$ 个不超过 1.0 的正数，是数列中的数，其间以空格分隔。\n\n### 输出格式：\n\n在一行中输出该序列所有片段包含的数之和，精确到小数点后 2 位。\n\n### 输入样例：\n```in\n4\n0.1 0.2 0.3 0.4\n```\n\n### 输出样例：\n```out\n5.00\n```\n\n**感谢 Ruihan Zheng 对测试数据的修正。**', 3, '困难', '输入第一行给出一个不超过 $$10^5$$ 的正整数 $$N$$，表示数列中数的个数，第二行给出 $$N $$ 个不超过 1.0 的正数，是数列中的数，其间以空格分隔。', '在一行中输出该序列所有片段包含的数之和，精确到小数点后 2 位。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926041473025, 205, '螺旋矩阵', '本题要求将给定的 $$N$$ 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充。要求矩阵的规模为 $$m$$ 行 $$n$$ 列，满足条件：$$m\\times n$$ 等于 $$N$$；$$m\\ge n$$；且 $$m-n$$ 取所有可能值中的最小值。\n\n### 输入格式：\n\n输入在第 1 行中给出一个正整数 $$N$$，第 2 行给出 $$N$$ 个待填充的正整数。所有数字不超过 $$10^4$$，相邻数字以空格分隔。\n\n### 输出格式：\n\n输出螺旋矩阵。每行 $$n$$ 个数字，共 $$m$$ 行。相邻数字以 1 个空格分隔，行末不得有多余空格。\n\n### 输入样例：\n```in\n12\n37 76 20 98 76 42 53 95 60 81 58 93\n```\n\n### 输出样例：\n```out\n98 95 93\n42 37 81\n53 20 76\n58 60 76\n```\n', 3, '困难', '输入在第 1 行中给出一个正整数 $$N$$，第 2 行给出 $$N$$ 个待填充的正整数。所有数字不超过 $$10^4$$，相邻数字以空格分隔。', '输出螺旋矩阵。每行 $$n$$ 个数字，共 $$m$$ 行。相邻数字以 1 个空格分隔，行末不得有多余空格。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926079221761, 206, '复数乘法', '复数可以写成 $$(A + Bi)$$ 的常规形式，其中 $$A$$ 是实部，$$B$$ 是虚部，$$i$$ 是虚数单位，满足 $$i^2 = -1$$；也可以写成极坐标下的指数形式 $$(R\\times e^{(Pi)})$$，其中 $$R$$ 是复数模，$$P$$ 是辐角，$$i$$ 是虚数单位，其等价于三角形式 $$R(\\cos (P) + i \\sin (P))$$。\n\n现给定两个复数的 $$R$$ 和 $$P$$，要求输出两数乘积的常规形式。\n\n### 输入格式：\n\n输入在一行中依次给出两个复数的 $$R_1$$, $$P_1$$, $$R_2$$, $$P_2$$，数字间以空格分隔。\n\n### 输出格式：\n\n在一行中按照 `A+Bi` 的格式输出两数乘积的常规形式，实部和虚部均保留 2 位小数。注意：如果 `B` 是负数，则应该写成 `A-|B|i` 的形式。\n\n### 输入样例：\n```in\n2.3 3.5 5.2 0.4\n```\n\n### 输出样例：\n```out\n-8.68-8.23i\n```\n', 3, '中等', '输入在一行中依次给出两个复数的 $$R_1$$, $$P_1$$, $$R_2$$, $$P_2$$，数字间以空格分隔。', '在一行中按照 `A+Bi` 的格式输出两数乘积的常规形式，实部和虚部均保留 2 位小数。注意：如果 `B` 是负数，则应该写成 `A-|B|i` 的形式。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926112776194, 207, '卖个萌', '萌萌哒表情符号通常由“手”、“眼”、“口”三个主要部分组成。简单起见，我们假设一个表情符号是按下列格式输出的：\n```\n[左手]([左眼][口][右眼])[右手]\n```\n现给出可选用的符号集合，请你按用户的要求输出表情。\n\n### 输入格式：\n\n输入首先在前三行顺序对应给出手、眼、口的可选符号集。每个符号括在一对方括号 `[]`内。题目保证每个集合都至少有一个符号，并不超过 10 个符号；每个符号包含 1 到 4 个非空字符。\n\n之后一行给出一个正整数 K，为用户请求的个数。随后 K 行，每行给出一个用户的符号选择，顺序为左手、左眼、口、右眼、右手——这里只给出符号在相应集合中的序号（从 1 开始），数字间以空格分隔。\n\n### 输出格式：\n\n对每个用户请求，在一行中输出生成的表情。若用户选择的序号不存在，则输出 `Are you kidding me? @\\/@`。\n\n### 输入样例：\n```in\n[╮][╭][o][~\\][/~]  [<][>]\n [╯][╰][^][-][=][>][<][@][⊙]\n[Д][▽][_][ε][^]  ...\n4\n1 1 2 2 2\n6 8 1 5 5\n3 3 4 3 3\n2 10 3 9 3\n```\n\n### 输出样例：\n```out\n╮(╯▽╰)╭\n<(@Д=)/~\no(^ε^)o\nAre you kidding me? @\\/@\n```\n', 3, '困难', '输入首先在前三行顺序对应给出手、眼、口的可选符号集。每个符号括在一对方括号 `[]`内。题目保证每个集合都至少有一个符号，并不超过 10 个符号；每个符号包含 1 到 4 个非空字符。\n\n之后一行给出一个正整数 K，为用户请求的个数。随后 K 行，每行给出一个用户的符号选择，顺序为左手、左眼、口、右眼、右手——这里只给出符号在相应集合中的序号（从 1 开始），数字间以空格分隔。', '对每个用户请求，在一行中输出生成的表情。若用户选择的序号不存在，则输出 `Are you kidding me? @\\/@`。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926146330626, 208, '住房空置率', '在不打扰居民的前提下，统计住房空置率的一种方法是根据每户用电量的连续变化规律进行判断。判断方法如下：\n\n- 在观察期内，若存在超过一半的日子用电量低于某给定的阈值 $$e$$，则该住房为“可能空置”；\n\n- 若观察期超过某给定阈值 $$D$$ 天，且满足上一个条件，则该住房为“空置”。\n\n现给定某居民区的住户用电量数据，请你统计“可能空置”的比率和“空置”比率，即以上两种状态的住房占居民区住房总套数的百分比。\n\n### 输入格式：\n\n输入第一行给出正整数 $$N$$（$$\\le 1000$$），为居民区住房总套数；正实数 $$e$$，即低电量阈值；正整数 $$D$$，即观察期阈值。随后 $$N$$ 行，每行按以下格式给出一套住房的用电量数据：\n\n$$K$$ $$E_1$$ $$E_2$$ ... $$E_K$$\n\n其中 $$K$$ 为观察的天数，$$E_i$$ 为第 $$i$$ 天的用电量。\n\n### 输出格式：\n\n在一行中输出“可能空置”的比率和“空置”比率的百分比值，其间以一个空格分隔，保留小数点后 1 位。\n\n### 输入样例：\n```in\n5 0.5 10\n6 0.3 0.4 0.5 0.2 0.8 0.6\n10 0.0 0.1 0.2 0.3 0.0 0.8 0.6 0.7 0.0 0.5\n5 0.4 0.3 0.5 0.1 0.7\n11 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n11 2 2 2 1 1 0.1 1 0.1 0.1 0.1 0.1\n```\n\n### 输出样例：\n```out\n40.0% 20.0%\n```\n\n（样例解释：第2、3户为“可能空置”，第4户为“空置”，其他户不是空置。）\n', 3, '困难', '输入第一行给出正整数 $$N$$（$$\\le 1000$$），为居民区住房总套数；正实数 $$e$$，即低电量阈值；正整数 $$D$$，即观察期阈值。随后 $$N$$ 行，每行按以下格式给出一套住房的用电量数据：\n\n$$K$$ $$E_1$$ $$E_2$$ ... $$E_K$$\n\n其中 $$K$$ 为观察的天数，$$E_i$$ 为第 $$i$$ 天的用电量。', '在一行中输出“可能空置”的比率和“空置”比率的百分比值，其间以一个空格分隔，保留小数点后 1 位。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926188273666, 209, '求平均值', '本题的基本要求非常简单：给定 $$N$$ 个实数，计算它们的平均值。但复杂的是有些输入数据可能是非法的。一个“合法”的输入是 [$$-1000, 1000$$] 区间内的实数，并且最多精确到小数点后 2 位。当你计算平均值的时候，不能把那些非法的数据算在内。\n\n### 输入格式：\n\n输入第一行给出正整数 $$N$$（$$\\le 100$$）。随后一行给出 $$N$$ 个实数，数字间以一个空格分隔。\n\n### 输出格式：\n\n对每个非法输入，在一行中输出 `ERROR: X is not a legal number`，其中 `X` 是输入。最后在一行中输出结果：`The average of K numbers is Y`，其中 `K` 是合法输入的个数，`Y` 是它们的平均值，精确到小数点后 2 位。如果平均值无法计算，则用 `Undefined` 替换 `Y`。如果 `K` 为 1，则输出 `The average of 1 number is Y`。\n\n### 输入样例 1：\n```in\n7\n5 -3.2 aaa 9999 2.3.4 7.123 2.35\n```\n\n### 输出样例 1：\n```out\nERROR: aaa is not a legal number\nERROR: 9999 is not a legal number\nERROR: 2.3.4 is not a legal number\nERROR: 7.123 is not a legal number\nThe average of 3 numbers is 1.38\n```\n\n### 输入样例 2：\n```in\n2\naaa -9999\n```\n\n### 输出样例 2：\n```out\nERROR: aaa is not a legal number\nERROR: -9999 is not a legal number\nThe average of 0 numbers is Undefined\n```\n', 3, '困难', '输入第一行给出正整数 $$N$$（$$\\le 100$$）。随后一行给出 $$N$$ 个实数，数字间以一个空格分隔。', '对每个非法输入，在一行中输出 `ERROR: X is not a legal number`，其中 `X` 是输入。最后在一行中输出结果：`The average of K numbers is Y`，其中 `K` 是合法输入的个数，`Y` 是它们的平均值，精确到小数点后 2 位。如果平均值无法计算，则用 `Undefined` 替换 `Y`。如果 `K` 为 1，则输出 `The average of 1 number is Y`。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926226022402, 210, '集体照', '拍集体照时队形很重要，这里对给定的 $$N$$ 个人 $$K$$ 排的队形设计排队规则如下：\n\n- 每排人数为 $$N/K$$（向下取整），多出来的人全部站在最后一排；\n\n- 后排所有人的个子都不比前排任何人矮；\n\n- 每排中最高者站中间（中间位置为 $$m/2+1$$，其中 $$m$$ 为该排人数，除法向下取整）；\n\n- 每排其他人以中间人为轴，按身高非增序，先右后左交替入队站在中间人的两侧（例如5人身高为190、188、186、175、170，则队形为175、188、190、186、170。这里假设你面对拍照者，所以你的左边是中间人的右边）；\n\n- 若多人身高相同，则按名字的字典序升序排列。这里保证无重名。\n\n现给定一组拍照人，请编写程序输出他们的队形。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例第 1 行给出两个正整数 $$N$$（$$\\le 10^4$$，总人数）和 $$K$$（$$\\le 10$$，总排数）。随后 $$N$$ 行，每行给出一个人的名字（不包含空格、长度不超过 8 个英文字母）和身高（[30, 300] 区间内的整数）。\n\n### 输出格式：\n\n输出拍照的队形。即K排人名，其间以空格分隔，行末不得有多余空格。注意：假设你面对拍照者，后排的人输出在上方，前排输出在下方。\n\n### 输入样例：\n```in\n10 3\nTom 188\nMike 170\nEva 168\nTim 160\nJoe 190\nAnn 168\nBob 175\nNick 186\nAmy 160\nJohn 159\n```\n\n### 输出样例：\n```out\nBob Tom Joe Nick\nAnn Mike Eva\nTim Amy John\n```\n', 3, '困难', '每个输入包含 1 个测试用例。每个测试用例第 1 行给出两个正整数 $$N$$（$$\\le 10^4$$，总人数）和 $$K$$（$$\\le 10$$，总排数）。随后 $$N$$ 行，每行给出一个人的名字（不包含空格、长度不超过 8 个英文字母）和身高（[30, 300] 区间内的整数）。', '输出拍照的队形。即K排人名，其间以空格分隔，行末不得有多余空格。注意：假设你面对拍照者，后排的人输出在上方，前排输出在下方。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926259576834, 211, '组合数的和', '给定 N 个非 0 的个位数字，用其中任意 2 个数字都可以组合成 1 个 2 位的数字。要求所有可能组合出来的 2 位数字的和。例如给定 2、5、8，则可以组合出：25、28、52、58、82、85，它们的和为330。\n\n### 输入格式：\n\n输入在一行中先给出 N（1 $$<$$ N $$<$$ 10），随后给出 N 个不同的非 0 个位数字。数字间以空格分隔。\n\n### 输出格式：\n\n输出所有可能组合出来的2位数字的和。\n\n### 输入样例：\n```in\n3 2 8 5\n```\n\n### 输出样例：\n```out\n330\n```\n', 3, '中等', '输入在一行中先给出 N（1 $$<$$ N $$<$$ 10），随后给出 N 个不同的非 0 个位数字。数字间以空格分隔。', '输出所有可能组合出来的2位数字的和。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926305714178, 212, '数零壹', '给定一串长度不超过 $$10^5$$ 的字符串，本题要求你将其中所有英文字母的序号（字母 a-z 对应序号 1-26，不分大小写）相加，得到整数 N，然后再分析一下 N 的二进制表示中有多少 0、多少 1。例如给定字符串 `PAT (Basic)`，其字母序号之和为：16+1+20+2+1+19+9+3=71，而 71 的二进制是 1000111，即有 3 个 0、4 个 1。\n\n### 输入格式：\n\n输入在一行中给出长度不超过 $$10^5$$、以回车结束的字符串。\n\n### 输出格式：\n\n在一行中先后输出 0 的个数和 1 的个数，其间以空格分隔。注意：若字符串中不存在字母，则视为 N 不存在，也就没有 0 和 1。\n\n### 输入样例：\n```in\nPAT (Basic)\n```\n\n### 输出样例：\n```out\n3 4\n```\n\n**鸣谢浙江工业大学之江学院石洗凡老师补充题面说明。**', 3, '困难', '输入在一行中给出长度不超过 $$10^5$$、以回车结束的字符串。', '在一行中先后输出 0 的个数和 1 的个数，其间以空格分隔。注意：若字符串中不存在字母，则视为 N 不存在，也就没有 0 和 1。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926347657217, 213, '选择题', '批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。\n\n### 输入格式：\n\n输入在第一行给出两个正整数 N（$$\\le$$ 1000）和 M（$$\\le$$ 100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 `(选中的选项个数 选项1 ……)`，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。\n\n### 输出格式：\n\n按照输入的顺序给出每个学生的得分，每个分数占一行。注意判题时只有选择全部正确才能得到该题的分数。最后一行输出错得最多的题目的错误次数和编号（题目按照输入的顺序从 1 开始编号）。如果有并列，则按编号递增顺序输出。数字间用空格分隔，行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 `Too simple`。\n\n### 输入样例：\n```in\n3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (2 b d) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (2 b c) (4 a b c d)\n```\n\n### 输出样例：\n```out\n3\n6\n5\n2 2 3 4\n```\n', 3, '困难', '输入在第一行给出两个正整数 N（$$\\le$$ 1000）和 M（$$\\le$$ 100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 `(选中的选项个数 选项1 ……)`，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。', '按照输入的顺序给出每个学生的得分，每个分数占一行。注意判题时只有选择全部正确才能得到该题的分数。最后一行输出错得最多的题目的错误次数和编号（题目按照输入的顺序从 1 开始编号）。如果有并列，则按编号递增顺序输出。数字间用空格分隔，行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 `Too simple`。', 300, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926389600258, 214, 'C语言竞赛', 'C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽：\n\n- 0、冠军将赢得一份“神秘大奖”（比如很巨大的一本学生研究论文集……）。\n- 1、排名为素数的学生将赢得最好的奖品 —— 小黄人玩偶！\n- 2、其他人将得到巧克力。\n\n给定比赛的最终排名以及一系列参赛者的 ID，你要给出这些参赛者应该获得的奖品。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$（$$\\le 10^4$$），是参赛者人数。随后 $$N$$ 行给出最终排名，每行按排名顺序给出一位参赛者的 ID（4 位数字组成）。接下来给出一个正整数 $$K$$ 以及 $$K$$ 个需要查询的 ID。\n\n### 输出格式：\n\n对每个要查询的 ID，在一行中输出 `ID: 奖品`，其中奖品或者是 `Mystery Award`（神秘大奖）、或者是 `Minion`（小黄人）、或者是 `Chocolate`（巧克力）。如果所查 ID 根本不在排名里，打印 `Are you kidding?`（耍我呢？）。如果该 ID 已经查过了（即奖品已经领过了），打印 `ID: Checked`（不能多吃多占）。\n\n### 输入样例：\n```in\n6\n1111\n6666\n8888\n1234\n5555\n0001\n6\n8888\n0001\n1111\n2222\n8888\n2222\n```\n\n### 输出样例：\n```out\n8888: Minion\n0001: Chocolate\n1111: Mystery Award\n2222: Are you kidding?\n8888: Checked\n2222: Are you kidding?\n```\n', 3, '困难', '输入第一行给出一个正整数 $$N$$（$$\\le 10^4$$），是参赛者人数。随后 $$N$$ 行给出最终排名，每行按排名顺序给出一位参赛者的 ID（4 位数字组成）。接下来给出一个正整数 $$K$$ 以及 $$K$$ 个需要查询的 ID。', '对每个要查询的 ID，在一行中输出 `ID: 奖品`，其中奖品或者是 `Mystery Award`（神秘大奖）、或者是 `Minion`（小黄人）、或者是 `Chocolate`（巧克力）。如果所查 ID 根本不在排名里，打印 `Are you kidding?`（耍我呢？）。如果该 ID 已经查过了（即奖品已经领过了），打印 `ID: Checked`（不能多吃多占）。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926427348993, 215, '爱丁顿数', '英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” $$E$$ ，即满足有 $$E$$ 天骑车超过 $$E$$ 英里的最大整数 $$E$$。据说爱丁顿自己的 $$E$$ 等于87。\n\n现给定某人 $$N$$ 天的骑车距离，请你算出对应的爱丁顿数 $$E$$（$$\\le N$$）。\n\n### 输入格式：\n\n输入第一行给出一个正整数 $$N$$ ($$\\le 10^5$$)，即连续骑车的天数；第二行给出 $$N$$ 个非负整数，代表每天的骑车距离。\n\n### 输出格式：\n\n在一行中给出 $$N$$ 天的爱丁顿数。\n\n### 输入样例：\n```in\n10\n6 7 6 9 3 10 8 2 7 8\n```\n\n### 输出样例：\n```out\n6\n```\n', 3, '困难', '输入第一行给出一个正整数 $$N$$ ($$\\le 10^5$$)，即连续骑车的天数；第二行给出 $$N$$ 个非负整数，代表每天的骑车距离。', '在一行中给出 $$N$$ 天的爱丁顿数。', 250, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926473486337, 216, '判断题', '判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。\n\n### 输入格式：\n\n输入在第一行给出两个不超过 100 的正整数 N 和 M，分别是学生人数和判断题数量。第二行给出 M 个不超过 5 的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0 代表“非”，1 代表“是”。随后 N 行，每行给出一个学生的解答。数字间均以空格分隔。\n\n### 输出格式：\n\n按照输入的顺序输出每个学生的得分，每个分数占一行。\n\n### 输入样例：\n```in\n3 6\n2 1 3 3 4 5\n0 0 1 0 1 1\n0 1 1 0 0 1\n1 0 1 0 1 0\n1 1 0 0 1 1\n```\n\n### 输出样例：\n```out\n13\n11\n12\n```\n', 3, '中等', '输入在第一行给出两个不超过 100 的正整数 N 和 M，分别是学生人数和判断题数量。第二行给出 M 个不超过 5 的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0 代表“非”，1 代表“是”。随后 N 行，每行给出一个学生的解答。数字间均以空格分隔。', '按照输入的顺序输出每个学生的得分，每个分数占一行。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926515429377, 217, '最简分数', '一个分数一般写成两个整数相除的形式：$$N/M$$，其中 $$M$$ 不为0。最简分数是指分子和分母没有公约数的分数表示形式。\n\n现给定两个不相等的正分数 $$N_1/M_1$$ 和 $$N_2/M_2$$，要求你按从小到大的顺序列出它们之间分母为 $$K$$ 的最简分数。\n\n### 输入格式：\n\n输入在一行中按 $$N/M$$ 的格式给出两个正分数，随后是一个正整数分母 $$K$$，其间以空格分隔。题目保证给出的所有整数都不超过 1000。\n\n### 输出格式：\n\n在一行中按 $$N/M$$ 的格式列出两个给定分数之间分母为 $$K$$ 的所有最简分数，按从小到大的顺序，其间以 1 个空格分隔。行首尾不得有多余空格。题目保证至少有 1 个输出。\n\n### 输入样例：\n```in\n7/18 13/20 12\n```\n\n### 输出样例：\n```out\n5/12 7/12\n```\n', 3, '困难', '输入在一行中按 $$N/M$$ 的格式给出两个正分数，随后是一个正整数分母 $$K$$，其间以空格分隔。题目保证给出的所有整数都不超过 1000。', '在一行中按 $$N/M$$ 的格式列出两个给定分数之间分母为 $$K$$ 的所有最简分数，按从小到大的顺序，其间以 1 个空格分隔。行首尾不得有多余空格。题目保证至少有 1 个输出。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926561566721, 218, '计算谱半径', '在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 $$n$$ 个复数空间的特征值 { $$a_1+b_1i, \\cdots , a_n+b_ni$$ }，它们的模为实部与虚部的平方和的开方，而“谱半径”就是最大模。\n\n现在给定一些复数空间的特征值，请你计算并输出这些特征值的谱半径。\n\n### 输入格式：\n\n输入第一行给出正整数 N（$$\\le$$ 10 000）是输入的特征值的个数。随后 N 行，每行给出 1 个特征值的实部和虚部，其间以空格分隔。注意：题目保证实部和虚部均为绝对值不超过 1000 的整数。\n\n### 输出格式：\n\n在一行中输出谱半径，四舍五入保留小数点后 2 位。\n\n### 输入样例：\n```in\n5\n0 1\n2 0\n-1 0\n3 3\n0 -3\n```\n\n### 输出样例：\n```out\n4.24\n```\n', 3, '困难', '输入第一行给出正整数 N（$$\\le$$ 10 000）是输入的特征值的个数。随后 N 行，每行给出 1 个特征值的实部和虚部，其间以空格分隔。注意：题目保证实部和虚部均为绝对值不超过 1000 的整数。', '在一行中输出谱半径，四舍五入保留小数点后 2 位。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926599315457, 219, '朋友数', '如果两个整数各位数字的和是一样的，则被称为是“朋友数”，而那个公共的和就是它们的“朋友证号”。例如 123 和 51 就是朋友数，因为 1+2+3 = 5+1 = 6，而 6 就是它们的朋友证号。给定一些整数，要求你统计一下它们中有多少个不同的朋友证号。\n\n### 输入格式：\n\n输入第一行给出正整数 N。随后一行给出 N 个正整数，数字间以空格分隔。题目保证所有数字小于 $$10^4$$。\n\n### 输出格式：\n\n首先第一行输出给定数字中不同的朋友证号的个数；随后一行按递增顺序输出这些朋友证号，数字间隔一个空格，且行末不得有多余空格。\n\n### 输入样例：\n```in\n8\n123 899 51 998 27 33 36 12\n```\n\n### 输出样例：\n```out\n4\n3 6 9 26\n```\n', 3, '困难', '输入第一行给出正整数 N。随后一行给出 N 个正整数，数字间以空格分隔。题目保证所有数字小于 $$10^4$$。', '首先第一行输出给定数字中不同的朋友证号的个数；随后一行按递增顺序输出这些朋友证号，数字间隔一个空格，且行末不得有多余空格。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926641258498, 220, '单身狗', '“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le$$ 50 000），是已知夫妻/伴侣的对数；随后 N 行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（$$\\le$$ 10 000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。\n\n### 输出格式：\n\n首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。\n\n### 输入样例：\n```in\n3\n11111 22222\n33333 44444\n55555 66666\n7\n55555 44444 10000 88888 22222 11111 23333\n```\n\n### 输出样例：\n```out\n5\n10000 23333 44444 55555 88888\n```\n', 3, '困难', '输入第一行给出一个正整数 N（$$\\le$$ 50 000），是已知夫妻/伴侣的对数；随后 N 行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（$$\\le$$ 10 000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。', '首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。', 200, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926679007234, 221, '图像过滤', '图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像素颜色都用一种指定的颜色替换。\n\n### 输入格式：\n\n输入在第一行给出一幅图像的分辨率，即两个正整数 $$M$$ 和 $$N$$（$$0 < M, N \\le 500$$），另外是待过滤的灰度值区间端点 $$A$$ 和 $$B$$（$$0 \\le A < B \\le 255$$）、以及指定的替换灰度值。随后 $$M$$ 行，每行给出 $$N$$ 个像素点的灰度值，其间以空格分隔。所有灰度值都在 [0, 255] 区间内。\n\n### 输出格式：\n\n输出按要求过滤后的图像。即输出 $$M$$ 行，每行 $$N$$ 个像素灰度值，每个灰度值占 3 位（例如黑色要显示为 `000`），其间以一个空格分隔。行首尾不得有多余空格。\n\n### 输入样例：\n```in\n3 5 100 150 0\n3 189 254 101 119\n150 233 151 99 100\n88 123 149 0 255\n```\n\n### 输出样例：\n```out\n003 189 254 000 000\n000 233 151 099 000\n088 000 000 000 255\n```\n', 3, '中等', '输入在第一行给出一幅图像的分辨率，即两个正整数 $$M$$ 和 $$N$$（$$0 < M, N \\le 500$$），另外是待过滤的灰度值区间端点 $$A$$ 和 $$B$$（$$0 \\le A < B \\le 255$$）、以及指定的替换灰度值。随后 $$M$$ 行，每行给出 $$N$$ 个像素点的灰度值，其间以空格分隔。所有灰度值都在 [0, 255] 区间内。', '输出按要求过滤后的图像。即输出 $$M$$ 行，每行 $$N$$ 个像素灰度值，每个灰度值占 3 位（例如黑色要显示为 `000`），其间以一个空格分隔。行首尾不得有多余空格。', 400, 65536, '2021-04-19 01:08:59', '2021-04-19 01:08:59', 0, NULL);
INSERT INTO `question` VALUES (1383829926716755970, 222, '试密码', '当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。\n\n### 输入格式：\n\n输入在第一行给出一个密码（长度不超过 20 的、不包含空格、Tab、回车的非空字符串）和一个正整数 N（$$\\le$$ 10），分别是正确的密码和系统允许尝试的次数。随后每行给出一个以回车结束的非空字符串，是用户尝试输入的密码。输入保证至少有一次尝试。当读到一行只有单个 # 字符时，输入结束，并且这一行不是用户的输入。\n\n### 输出格式：\n\n对用户的每个输入，如果是正确的密码且尝试次数不超过 N，则在一行中输出 `Welcome in`，并结束程序；如果是错误的，则在一行中按格式输出 `Wrong password: 用户输入的错误密码`；当错误尝试达到 N 次时，再输出一行 `Account locked`，并结束程序。\n\n### 输入样例 1：\n```in\nCorrect%pw 3\ncorrect%pw\nCorrect@PW\nwhatisthepassword!\nCorrect%pw\n#\n```\n\n### 输出样例 1：\n```out\nWrong password: correct%pw\nWrong password: Correct@PW\nWrong password: whatisthepassword!\nAccount locked\n```\n\n### 输入样例 2：\n```in\ncool@gplt 3\ncoolman@gplt\ncoollady@gplt\ncool@gplt\ntry again\n#\n```\n\n### 输出样例 2：\n```out\nWrong password: coolman@gplt\nWrong password: coollady@gplt\nWelcome in\n```\n', 3, '困难', '输入在第一行给出一个密码（长度不超过 20 的、不包含空格、Tab、回车的非空字符串）和一个正整数 N（$$\\le$$ 10），分别是正确的密码和系统允许尝试的次数。随后每行给出一个以回车结束的非空字符串，是用户尝试输入的密码。输入保证至少有一次尝试。当读到一行只有单个 # 字符时，输入结束，并且这一行不是用户的输入。', '对用户的每个输入，如果是正确的密码且尝试次数不超过 N，则在一行中输出 `Welcome in`，并结束程序；如果是错误的，则在一行中按格式输出 `Wrong password: 用户输入的错误密码`；当错误尝试达到 N 次时，再输出一行 `Account locked`，并结束程序。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829926754504705, 223, '万绿丛中一点红', '对于计算机而言，颜色不过是像素点对应的一个 24 位的数值。现给定一幅分辨率为 $$M\\times N$$ 的画，要求你找出万绿丛中的一点红，即有独一无二颜色的那个像素点，并且该点的颜色与其周围 8 个相邻像素的颜色差充分大。\n\n### 输入格式：\n\n输入第一行给出三个正整数，分别是 $$M$$ 和 $$N$$（$$\\le$$ 1000），即图像的分辨率；以及 TOL，是所求像素点与相邻点的颜色差阈值，色差超过 TOL 的点才被考虑。随后 $$N$$ 行，每行给出 $$M$$ 个像素的颜色值，范围在 $$[0, 2^{24})$$ 内。所有同行数字间用空格或 TAB 分开。\n\n### 输出格式：\n\n在一行中按照 `(x, y): color` 的格式输出所求像素点的位置以及颜色值，其中位置 `x` 和 `y` 分别是该像素在图像矩阵中的列、行编号（从 1 开始编号）。如果这样的点不唯一，则输出 `Not Unique`；如果这样的点不存在，则输出 `Not Exist`。\n\n### 输入样例 1：\n```in\n8 6 200\n0 	 0 	  0 	   0	    0 	     0 	      0        0\n65280 	 65280    65280    16711479 65280    65280    65280    65280\n16711479 65280    65280    65280    16711680 65280    65280    65280\n65280 	 65280    65280    65280    65280    65280    165280   165280\n65280 	 65280 	  16777015 65280    65280    165280   65480    165280\n16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215\n```\n\n### 输出样例 1：\n```out\n(5, 3): 16711680\n```\n\n### 输入样例 2：\n```in\n4 5 2\n0 0 0 0\n0 0 3 0\n0 0 0 0\n0 5 0 0\n0 0 0 0\n```\n\n### 输出样例 2：\n```out\nNot Unique\n```\n\n### 输入样例 3：\n```in\n3 3 5\n1 2 3\n3 4 5\n5 6 7\n```\n\n### 输出样例 3：\n```out\nNot Exist\n```\n', 3, '困难', '输入第一行给出三个正整数，分别是 $$M$$ 和 $$N$$（$$\\le$$ 1000），即图像的分辨率；以及 TOL，是所求像素点与相邻点的颜色差阈值，色差超过 TOL 的点才被考虑。随后 $$N$$ 行，每行给出 $$M$$ 个像素的颜色值，范围在 $$[0, 2^{24})$$ 内。所有同行数字间用空格或 TAB 分开。', '在一行中按照 `(x, y): color` 的格式输出所求像素点的位置以及颜色值，其中位置 `x` 和 `y` 分别是该像素在图像矩阵中的列、行编号（从 1 开始编号）。如果这样的点不唯一，则输出 `Not Unique`；如果这样的点不存在，则输出 `Not Exist`。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829926783864834, 224, '微博转发抽奖', '小明 PAT 考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔 N 个人就发出一个红包。请你编写程序帮助他确定中奖名单。\n\n### 输入格式：\n\n输入第一行给出三个正整数 M（$$\\le$$ 1000）、N 和 S，分别是转发的总量、小明决定的中奖间隔、以及第一位中奖者的序号（编号从 1 开始）。随后 M 行，顺序给出转发微博的网友的昵称（不超过 20 个字符、不包含空格回车的非空字符串）。\n\n注意：可能有人转发多次，但不能中奖多次。所以如果处于当前中奖位置的网友已经中过奖，则跳过他顺次取下一位。\n\n### 输出格式：\n\n按照输入的顺序输出中奖名单，每个昵称占一行。如果没有人中奖，则输出 `Keep going...`。\n\n### 输入样例 1：\n```in\n9 3 2\nImgonnawin!\nPickMe\nPickMeMeMeee\nLookHere\nImgonnawin!\nTryAgainAgain\nTryAgainAgain\nImgonnawin!\nTryAgainAgain\n```\n\n### 输出样例 1：\n```out\nPickMe\nImgonnawin!\nTryAgainAgain\n```\n\n### 输入样例 2：\n```in\n2 3 5\nImgonnawin!\nPickMe\n```\n\n### 输出样例 2：\n```out\nKeep going...\n```\n', 3, '困难', '输入第一行给出三个正整数 M（$$\\le$$ 1000）、N 和 S，分别是转发的总量、小明决定的中奖间隔、以及第一位中奖者的序号（编号从 1 开始）。随后 M 行，顺序给出转发微博的网友的昵称（不超过 20 个字符、不包含空格回车的非空字符串）。\n\n注意：可能有人转发多次，但不能中奖多次。所以如果处于当前中奖位置的网友已经中过奖，则跳过他顺次取下一位。', '按照输入的顺序输出中奖名单，每个昵称占一行。如果没有人中奖，则输出 `Keep going...`。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829926821613570, 225, '结绳', '给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一段绳子，可以再次对折去跟另一段绳子串连。每次串连后，原来两段绳子的长度就会减半。\n\n![rope.jpg](~/46293e57-aa0e-414b-b5c3-7c4b2d5201e2.jpg)\n\n给定 $$N$$ 段绳子的长度，你需要找出它们能串成的绳子的最大长度。\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例第 1 行给出正整数 $$N$$ ($$2 \\le N \\le 10^4$$)；第 2 行给出 $$N$$ 个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过$$10^4$$。\n\n### 输出格式：\n\n在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。\n\n### 输入样例：\n```in\n8\n10 15 12 3 4 13 1 15\n```\n\n### 输出样例：\n```out\n14\n```\n', 3, '困难', '每个输入包含 1 个测试用例。每个测试用例第 1 行给出正整数 $$N$$ ($$2 \\le N \\le 10^4$$)；第 2 行给出 $$N$$ 个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过$$10^4$$。', '在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。', 200, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829926855168002, 226, '小赌怡情', '常言道“小赌怡情”。这是一个很简单的小游戏：首先由计算机给出第一个整数；然后玩家下注赌第二个整数将会比第一个数大还是小；玩家下注 t 个筹码后，计算机给出第二个数。若玩家猜对了，则系统奖励玩家 t 个筹码；否则扣除玩家 t 个筹码。\n\n注意：玩家下注的筹码数不能超过自己帐户上拥有的筹码数。当玩家输光了全部筹码后，游戏就结束。\n\n### 输入格式：\n\n输入在第一行给出 2 个正整数 T 和 K（$$\\le$$ 100），分别是系统在初始状态下赠送给玩家的筹码数、以及需要处理的游戏次数。随后 K 行，每行对应一次游戏，顺序给出 4 个数字：\n```\nn1 b t n2\n```\n其中 `n1` 和 `n2` 是计算机先后给出的两个[0, 9]内的整数，保证两个数字不相等。`b` 为 0 表示玩家赌`小`，为 1 表示玩家赌`大`。`t` 表示玩家下注的筹码数，保证在整型范围内。\n\n### 输出格式：\n\n对每一次游戏，根据下列情况对应输出（其中 `t` 是玩家下注量，`x` 是玩家当前持有的筹码量）：\n\n- 玩家赢，输出 `Win t!  Total = x.`；\n- 玩家输，输出 `Lose t.  Total = x.`；\n- 玩家下注超过持有的筹码量，输出 `Not enough tokens.  Total = x.`；\n- 玩家输光后，输出 `Game Over.` 并结束程序。\n\n### 输入样例 1：\n```in\n100 4\n8 0 100 2\n3 1 50 1\n5 1 200 6\n7 0 200 8\n```\n\n### 输出样例 1：\n```out\nWin 100!  Total = 200.\nLose 50.  Total = 150.\nNot enough tokens.  Total = 150.\nNot enough tokens.  Total = 150.\n```\n\n### 输入样例 2：\n```in\n100 4\n8 0 100 2\n3 1 200 1\n5 1 200 6\n7 0 200 8\n```\n\n### 输出样例 2：\n```out\nWin 100!  Total = 200.\nLose 200.  Total = 0.\nGame Over.\n```\n', 3, '中等', '输入在第一行给出 2 个正整数 T 和 K（$$\\le$$ 100），分别是系统在初始状态下赠送给玩家的筹码数、以及需要处理的游戏次数。随后 K 行，每行对应一次游戏，顺序给出 4 个数字：\n```\nn1 b t n2\n```\n其中 `n1` 和 `n2` 是计算机先后给出的两个[0, 9]内的整数，保证两个数字不相等。`b` 为 0 表示玩家赌`小`，为 1 表示玩家赌`大`。`t` 表示玩家下注的筹码数，保证在整型范围内。', '对每一次游戏，根据下列情况对应输出（其中 `t` 是玩家下注量，`x` 是玩家当前持有的筹码量）：\n\n- 玩家赢，输出 `Win t!  Total = x.`；\n- 玩家输，输出 `Lose t.  Total = x.`；\n- 玩家下注超过持有的筹码量，输出 `Not enough tokens.  Total = x.`；\n- 玩家输光后，输出 `Game Over.` 并结束程序。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829926892916737, 227, '开学寄语', '下图是上海某校的新学期开学寄语：天将降大任于斯人也，必先删其微博，卸其 QQ，封其电脑，夺其手机，收其 ipad，断其 wifi，使其百无聊赖，然后，净面、理发、整衣，然后思过、读书、锻炼、明智、开悟、精进。而后必成大器也！\n\n\n![jiyu.JPG](~/3b1d9f4a-778b-4942-a9e2-836262f363aa.JPG)\n\n\n本题要求你写个程序帮助这所学校的老师检查所有学生的物品，以助其成大器。\n\n### 输入格式：\n\n输入第一行给出两个正整数 N（$$\\le$$ 1000）和 M（$$\\le$$ 6），分别是学生人数和需要被查缴的物品种类数。第二行给出 M 个需要被查缴的物品编号，其中编号为 4 位数字。随后 N 行，每行给出一位学生的姓名缩写（由 1-4 个大写英文字母组成）、个人物品数量 K（0 $$\\le$$ K $$\\le$$ 10）、以及 K 个物品的编号。\n\n### 输出格式：\n\n顺次检查每个学生携带的物品，如果有需要被查缴的物品存在，则按以下格式输出该生的信息和其需要被查缴的物品的信息（注意行末不得有多余空格）：\n```\n姓名缩写: 物品编号1 物品编号2 ……\n```\n最后一行输出存在问题的学生的总人数和被查缴物品的总数。\n\n### 输入样例：\n```in\n4 2\n2333 6666\nCYLL 3 1234 2345 3456\nU 4 9966 6666 8888 6666\nGG 2 2333 7777\nJJ 3 0012 6666 2333\n```\n\n### 输出样例：\n```out\nU: 6666 6666\nGG: 2333\nJJ: 6666 2333\n3 5\n```\n', 3, '困难', '输入第一行给出两个正整数 N（$$\\le$$ 1000）和 M（$$\\le$$ 6），分别是学生人数和需要被查缴的物品种类数。第二行给出 M 个需要被查缴的物品编号，其中编号为 4 位数字。随后 N 行，每行给出一位学生的姓名缩写（由 1-4 个大写英文字母组成）、个人物品数量 K（0 $$\\le$$ K $$\\le$$ 10）、以及 K 个物品的编号。', '顺次检查每个学生携带的物品，如果有需要被查缴的物品存在，则按以下格式输出该生的信息和其需要被查缴的物品的信息（注意行末不得有多余空格）：\n```\n姓名缩写: 物品编号1 物品编号2 ……\n```\n最后一行输出存在问题的学生的总人数和被查缴物品的总数。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829926930665473, 228, '多选题常见计分法', '批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到 50% 分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。\n\n### 输入格式：\n\n输入在第一行给出两个正整数 N（$$\\le$$1000）和 M（$$\\le$$100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 `(选中的选项个数 选项1 ……)`，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。\n\n### 输出格式：\n\n按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后 1 位。最后输出错得最多的题目选项的信息，格式为：`错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号`。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 `Too simple`。\n\n### 输入样例 1：\n```in\n3 4 \n3 4 2 a c\n2 5 1 b\n5 3 2 b c\n1 5 4 a b d e\n(2 a c) (3 b d e) (2 a c) (3 a b e)\n(2 a c) (1 b) (2 a b) (4 a b d e)\n(2 b d) (1 e) (1 c) (4 a b c d)\n```\n\n### 输出样例 1：\n```out\n3.5\n6.0\n2.5\n2 2-e\n2 3-a\n2 3-b\n```\n\n### 输入样例 2：\n```in\n2 2 \n3 4 2 a c\n2 5 1 b\n(2 a c) (1 b)\n(2 a c) (1 b)\n```\n\n### 输出样例 2：\n```out\n5.0\n5.0\nToo simple\n```\n', 3, '困难', '输入在第一行给出两个正整数 N（$$\\le$$1000）和 M（$$\\le$$100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 `(选中的选项个数 选项1 ……)`，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。', '按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后 1 位。最后输出错得最多的题目选项的信息，格式为：`错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号`。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 `Too simple`。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829926960025601, 229, '宇宙无敌加法器', '地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在 PAT 星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。每个 PAT 星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是 7 进制数、第 2 位是 2 进制数、第 3 位是 5 进制数、第 4 位是 10 进制数，等等。每一位的进制 d 或者是 0（表示十进制）、或者是 [2，9] 区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT 星人通常只需要记住前 20 位就够用了，以后各位默认为 10 进制。\n\n在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203 + 415”呢？我们得首先计算最低位：3 + 5 = 8；因为最低位是 7 进制的，所以我们得到 1 和 1 个进位。第 2 位是：0 + 1 + 1（进位）= 2；因为此位是 2 进制的，所以我们得到 0 和 1 个进位。第 3 位是：2 + 4 + 1（进位）= 7；因为此位是 5 进制的，所以我们得到 2 和 1 个进位。第 4 位是：6 + 1（进位）= 7；因为此位是 10 进制的，所以我们就得到 7。最后我们得到：6203 + 415 = 7201。\n\n### 输入格式：\n\n输入首先在第一行给出一个 N 位的进制表（0 $$<$$ N $$\\le$$ 20），以回车结束。 随后两行，每行给出一个不超过 N 位的非负的 PAT 数。\n\n### 输出格式：\n\n在一行中输出两个 PAT 数之和。\n\n### 输入样例：\n```in\n30527\n06203\n415\n```\n\n### 输出样例：\n```out\n7201\n```\n', 3, '困难', '输入首先在第一行给出一个 N 位的进制表（0 $$<$$ N $$\\le$$ 20），以回车结束。 随后两行，每行给出一个不超过 N 位的非负的 PAT 数。', '在一行中输出两个 PAT 数之和。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829926997774337, 230, '链表元素分类', '给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而 [0, K] 区间内的元素都排在大于 K 的元素前面。但每一类内部元素的顺序是不能改变的。例如：给定链表为 18→7→-4→0→5→-6→10→11→-2，K 为 10，则输出应该为 -4→-6→-2→7→0→5→10→18→11。\n\n### 输入格式：\n\n每个输入包含一个测试用例。每个测试用例第 1 行给出：第 1 个结点的地址；结点总个数，即正整数N ($$\\le 10^5$$)；以及正整数K ($$\\le 10^3$$)。结点的地址是 5 位非负整数，NULL 地址用 $$-1$$ 表示。\n\n接下来有 N 行，每行格式为：\n```\nAddress Data Next\n```\n其中 `Address` 是结点地址；`Data` 是该结点保存的数据，为 $$[-10^5, 10^5]$$ 区间内的整数；`Next` 是下一结点的地址。题目保证给出的链表不为空。\n\n### 输出格式：\n\n对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。\n\n### 输入样例：\n```in\n00100 9 10\n23333 10 27777\n00000 0 99999\n00100 18 12309\n68237 -6 23333\n33218 -4 00000\n48652 -2 -1\n99999 5 68237\n27777 11 48652\n12309 7 33218\n```\n\n### 输出样例：\n```out\n33218 -4 68237\n68237 -6 48652\n48652 -2 12309\n12309 7 00000\n00000 0 99999\n99999 5 23333\n23333 10 00100\n00100 18 27777\n27777 11 -1\n```\n', 3, '困难', '每个输入包含一个测试用例。每个测试用例第 1 行给出：第 1 个结点的地址；结点总个数，即正整数N ($$\\le 10^5$$)；以及正整数K ($$\\le 10^3$$)。结点的地址是 5 位非负整数，NULL 地址用 $$-1$$ 表示。\n\n接下来有 N 行，每行格式为：\n```\nAddress Data Next\n```\n其中 `Address` 是结点地址；`Data` 是该结点保存的数据，为 $$[-10^5, 10^5]$$ 区间内的整数；`Next` 是下一结点的地址。题目保证给出的链表不为空。', '对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927031328769, 231, 'Wifi密码', '下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用 wifi，又怕耽误亲们的学习，现将 wifi 密码设置为下列数学题答案：A-1；B-2；C-3；D-4；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序把一系列题目的答案按照卷子上给出的对应关系翻译成 wifi 的密码。这里简单假设每道选择题都有 4 个选项，有且只有 1 个正确答案。\n\n\n![wifi.jpg](~/7e56be3f-caba-45f1-b9cb-38a96d44de76.jpg)\n\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le$$ 100），随后 N 行，每行按照 `编号-答案` 的格式给出一道题的 4 个选项，`T` 表示正确选项，`F` 表示错误选项。选项间用空格分隔。\n\n### 输出格式：\n\n在一行中输出 wifi 密码。\n\n### 输入样例：\n```in\n8\nA-T B-F C-F D-F\nC-T B-F A-F D-F\nA-F D-F C-F B-T\nB-T A-F C-F D-F\nB-F D-T A-F C-F\nA-T C-F B-F D-F\nD-T B-F C-F A-F\nC-T A-F B-F D-F\n```\n\n### 输出样例：\n```out\n13224143\n```\n', 3, '中等', '输入第一行给出一个正整数 N（$$\\le$$ 100），随后 N 行，每行按照 `编号-答案` 的格式给出一道题的 4 个选项，`T` 表示正确选项，`F` 表示错误选项。选项间用空格分隔。', '在一行中输出 wifi 密码。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927069077506, 232, '互评成绩计算', '在浙大的计算机专业课中，经常有互评分组报告这个环节。一个组上台介绍自己的工作，其他组在台下为其表现评分。最后这个组的互评成绩是这样计算的：所有其他组的评分中，去掉一个最高分和一个最低分，剩下的分数取平均分记为 $$G_1$$；老师给这个组的评分记为 $$G_2$$。该组得分为 $$(G_1+G_2)/2$$，最后结果四舍五入后保留整数分。本题就要求你写个程序帮助老师计算每个组的互评成绩。\n\n### 输入格式：\n\n输入第一行给出两个正整数 $$N$$（$$>$$ 3）和 $$M$$，分别是分组数和满分，均不超过 100。随后 $$N$$ 行，每行给出该组得到的 $$N$$ 个分数（均保证为整型范围内的整数），其中第 1 个是老师给出的评分，后面 $$N-1$$ 个是其他组给的评分。合法的输入应该是 $$[0, M]$$ 区间内的整数，若不在合法区间内，则该分数须被忽略。题目保证老师的评分都是合法的，并且每个组至少会有 3 个来自同学的合法评分。\n\n### 输出格式：\n\n为每个组输出其最终得分。每个得分占一行。\n\n### 输入样例：\n```in\n6 50\n42 49 49 35 38 41\n36 51 50 28 -1 30\n40 36 41 33 47 49\n30 250 -25 27 45 31\n48 0 0 50 50 1234\n43 41 36 29 42 29\n```\n\n### 输出样例：\n```out\n42\n33\n41\n31\n37\n39\n```\n', 3, '困难', '输入第一行给出两个正整数 $$N$$（$$>$$ 3）和 $$M$$，分别是分组数和满分，均不超过 100。随后 $$N$$ 行，每行给出该组得到的 $$N$$ 个分数（均保证为整型范围内的整数），其中第 1 个是老师给出的评分，后面 $$N-1$$ 个是其他组给的评分。合法的输入应该是 $$[0, M]$$ 区间内的整数，若不在合法区间内，则该分数须被忽略。题目保证老师的评分都是合法的，并且每个组至少会有 3 个来自同学的合法评分。', '为每个组输出其最终得分。每个得分占一行。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927106826242, 233, '字符串压缩与解压', '文本压缩有很多种方法，这里我们只考虑最简单的一种：把由相同字符组成的一个连续的片段用这个字符和片段中含有这个字符的个数来表示。例如 `ccccc` 就用 `5c` 来表示。如果字符没有重复，就原样输出。例如 `aba` 压缩后仍然是 `aba`。\n\n解压方法就是反过来，把形如 `5c` 这样的表示恢复为 `ccccc`。\n\n本题需要你根据压缩或解压的要求，对给定字符串进行处理。这里我们简单地假设原始字符串是完全由英文字母和空格组成的非空字符串。\n\n### 输入格式：\n\n输入第一行给出一个字符，如果是 `C` 就表示下面的字符串需要被压缩；如果是 `D` 就表示下面的字符串需要被解压。第二行给出需要被压缩或解压的不超过 1000 个字符的字符串，以回车结尾。题目保证字符重复个数在整型范围内，且输出文件不超过 1MB。\n\n### 输出格式：\n\n根据要求压缩或解压字符串，并在一行中输出结果。\n\n### 输入样例 1：\n```in\nC\nTTTTThhiiiis isssss a   tesssst CAaaa as\n```\n\n### 输出样例 1：\n```out\n5T2h4is i5s a3 te4st CA3a as\n```\n\n### 输入样例 2：\n```in\nD\n5T2h4is i5s a3 te4st CA3a as10Z\n```\n\n### 输出样例 2：\n```out\nTTTTThhiiiis isssss a   tesssst CAaaa asZZZZZZZZZZ\n```\n', 3, '困难', '输入第一行给出一个字符，如果是 `C` 就表示下面的字符串需要被压缩；如果是 `D` 就表示下面的字符串需要被解压。第二行给出需要被压缩或解压的不超过 1000 个字符的字符串，以回车结尾。题目保证字符重复个数在整型范围内，且输出文件不超过 1MB。', '根据要求压缩或解压字符串，并在一行中输出结果。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927152963585, 234, '延迟的回文数', '给定一个 $$k+1$$ 位的正整数 $$N$$，写成 $$a_k \\cdots a_1 a_0$$ 的形式，其中对所有 $$i$$ 有 $$0 \\le a_i < 10$$ 且 $$a_k > 0$$。$$N$$ 被称为一个**回文数**，当且仅当对所有 $$i$$ 有 $$a_i = a_{k-i}$$。零也被定义为一个回文数。\n\n非回文数也可以通过一系列操作变出回文数。首先将该数字逆转，再将逆转数与该数相加，如果和还不是一个回文数，就重复这个逆转再相加的操作，直到一个回文数出现。如果一个非回文数可以变出回文数，就称这个数为**延迟的回文数**。（定义翻译自 https://en.wikipedia.org/wiki/Palindromic_number ）\n\n给定任意一个正整数，本题要求你找到其变出的那个回文数。\n\n### 输入格式：\n\n输入在一行中给出一个不超过1000位的正整数。\n\n### 输出格式：\n\n对给定的整数，一行一行输出其变出回文数的过程。每行格式如下\n```\nA + B = C\n```\n其中 `A` 是原始的数字，`B` 是 `A` 的逆转数，`C` 是它们的和。`A` 从输入的整数开始。重复操作直到 `C` 在 10 步以内变成回文数，这时在一行中输出 `C is a palindromic number.`；或者如果 10 步都没能得到回文数，最后就在一行中输出 `Not found in 10 iterations.`。\n\n### 输入样例 1：\n```in\n97152\n```\n\n### 输出样例 1：\n```out\n97152 + 25179 = 122331\n122331 + 133221 = 255552\n255552 is a palindromic number.\n```\n\n### 输入样例 2：\n```in\n196\n```\n\n### 输出样例 2：\n```out\n196 + 691 = 887\n887 + 788 = 1675\n1675 + 5761 = 7436\n7436 + 6347 = 13783\n13783 + 38731 = 52514\n52514 + 41525 = 94039\n94039 + 93049 = 187088\n187088 + 880781 = 1067869\n1067869 + 9687601 = 10755470\n10755470 + 07455701 = 18211171\nNot found in 10 iterations.\n```\n', 3, '困难', '输入在一行中给出一个不超过1000位的正整数。', '对给定的整数，一行一行输出其变出回文数的过程。每行格式如下\n```\nA + B = C\n```\n其中 `A` 是原始的数字，`B` 是 `A` 的逆转数，`C` 是它们的和。`A` 从输入的整数开始。重复操作直到 `C` 在 10 步以内变成回文数，这时在一行中输出 `C is a palindromic number.`；或者如果 10 步都没能得到回文数，最后就在一行中输出 `Not found in 10 iterations.`。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927194906626, 235, 'MOOC期终成绩', '对于在中国大学MOOC（http://www.icourse163.org/ ）学习“数据结构”课程的学生，想要获得一张合格证书，必须首先获得不少于200分的在线编程作业分，然后总评获得不少于60分（满分100）。总评成绩的计算公式为 $$G = (G_{mid-term}\\times 40\\% + G_{final}\\times 60\\%)$$，如果 $$G_{mid-term} > G_{final}$$；否则总评 $$G$$ 就是 $$G_{final}$$。这里 $$G_{mid-term}$$ 和 $$G_{final}$$ 分别为学生的期中和期末成绩。\n\n现在的问题是，每次考试都产生一张独立的成绩单。本题就请你编写程序，把不同的成绩单合为一张。\n\n### 输入格式：\n\n输入在第一行给出3个整数，分别是 P（做了在线编程作业的学生数）、M（参加了期中考试的学生数）、N（参加了期末考试的学生数）。每个数都不超过10000。\n\n接下来有三块输入。第一块包含 P 个在线编程成绩 $$G_p$$；第二块包含 M 个期中考试成绩 $$G_{mid-term}$$；第三块包含 N 个期末考试成绩 $$G_{final}$$。每个成绩占一行，格式为：`学生学号 分数`。其中`学生学号`为不超过20个字符的英文字母和数字；`分数`是非负整数（编程总分最高为900分，期中和期末的最高分为100分）。\n\n### 输出格式：\n\n打印出获得合格证书的学生名单。每个学生占一行，格式为：\n\n`学生学号` $$G_p$$ $$G_{mid-term}$$ $$G_{final}$$ $$G$$\n\n如果有的成绩不存在（例如某人没参加期中考试），则在相应的位置输出“$$-1$$”。输出顺序为按照总评分数（四舍五入精确到整数）递减。若有并列，则按学号递增。题目保证学号没有重复，且至少存在1个合格的学生。\n\n### 输入样例：\n```in\n6 6 7\n01234 880\na1903 199\nydjh2 200\nwehu8 300\ndx86w 220\nmissing 400\nydhfu77 99\nwehu8 55\nydjh2 98\ndx86w 88\na1903 86\n01234 39\nydhfu77 88\na1903 66\n01234 58\nwehu8 84\nydjh2 82\nmissing 99\ndx86w 81\n```\n\n### 输出样例：\n```out\nmissing 400 -1 99 99\nydjh2 200 98 82 88\ndx86w 220 88 81 84\nwehu8 300 55 84 84\n```\n', 3, '困难', '输入在第一行给出3个整数，分别是 P（做了在线编程作业的学生数）、M（参加了期中考试的学生数）、N（参加了期末考试的学生数）。每个数都不超过10000。\n\n接下来有三块输入。第一块包含 P 个在线编程成绩 $$G_p$$；第二块包含 M 个期中考试成绩 $$G_{mid-term}$$；第三块包含 N 个期末考试成绩 $$G_{final}$$。每个成绩占一行，格式为：`学生学号 分数`。其中`学生学号`为不超过20个字符的英文字母和数字；`分数`是非负整数（编程总分最高为900分，期中和期末的最高分为100分）。', '打印出获得合格证书的学生名单。每个学生占一行，格式为：\n\n`学生学号` $$G_p$$ $$G_{mid-term}$$ $$G_{final}$$ $$G$$\n\n如果有的成绩不存在（例如某人没参加期中考试），则在相应的位置输出“$$-1$$”。输出顺序为按照总评分数（四舍五入精确到整数）递减。若有并列，则按学号递增。题目保证学号没有重复，且至少存在1个合格的学生。', 200, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927232655361, 236, '检查密码', '本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于6个字符组成，并且只能有英文字母、数字和小数点 `.`，还必须既有字母也有数字。\n\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le$$ 100），随后 N 行，每行给出一个用户设置的密码，为不超过 80 个字符的非空字符串，以回车结束。\n\n### 输出格式：\n\n对每个用户的密码，在一行中输出系统反馈信息，分以下5种：\n\n- 如果密码合法，输出`Your password is wan mei.`；\n- 如果密码太短，不论合法与否，都输出`Your password is tai duan le.`；\n- 如果密码长度合法，但存在不合法字符，则输出`Your password is tai luan le.`；\n- 如果密码长度合法，但只有字母没有数字，则输出`Your password needs shu zi.`；\n- 如果密码长度合法，但只有数字没有字母，则输出`Your password needs zi mu.`。\n\n### 输入样例：\n```in\n5\n123s\nzheshi.wodepw\n1234.5678\nWanMei23333\npass*word.6\n```\n\n### 输出样例：\n```out\nYour password is tai duan le.\nYour password needs shu zi.\nYour password needs zi mu.\nYour password is wan mei.\nYour password is tai luan le.\n```\n', 3, '中等', '输入第一行给出一个正整数 N（$$\\le$$ 100），随后 N 行，每行给出一个用户设置的密码，为不超过 80 个字符的非空字符串，以回车结束。', '对每个用户的密码，在一行中输出系统反馈信息，分以下5种：\n\n- 如果密码合法，输出`Your password is wan mei.`；\n- 如果密码太短，不论合法与否，都输出`Your password is tai duan le.`；\n- 如果密码长度合法，但存在不合法字符，则输出`Your password is tai luan le.`；\n- 如果密码长度合法，但只有字母没有数字，则输出`Your password needs shu zi.`；\n- 如果密码长度合法，但只有数字没有字母，则输出`Your password needs zi mu.`。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927282987010, 237, '射击比赛', '本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。\n\n### 输入格式：\n\n输入在第一行中给出一个正整数 N（$$\\le$$ 10 000）。随后 N 行，每行按下列格式给出：\n\n```\nID x y\n```\n\n其中 `ID` 是运动员的编号（由 4 位数字组成）；`x` 和 `y` 是其打出的弹洞的平面坐标(`x`,`y`)，均为整数，且 0 $$\\le$$ |`x`|, |`y`| $$\\le$$ 100。题目保证每个运动员的编号不重复，且每人只打 1 枪。\n\n### 输出格式：\n\n输出冠军和菜鸟的编号，中间空 1 格。题目保证他们是唯一的。\n\n### 输入样例：\n```in\n3\n0001 5 7\n1020 -1 3\n0233 0 -1\n```\n\n### 输出样例：\n```out\n0233 0001\n```\n', 3, '困难', '输入在第一行中给出一个正整数 N（$$\\le$$ 10 000）。随后 N 行，每行按下列格式给出：\n\n```\nID x y\n```\n\n其中 `ID` 是运动员的编号（由 4 位数字组成）；`x` 和 `y` 是其打出的弹洞的平面坐标(`x`,`y`)，均为整数，且 0 $$\\le$$ |`x`|, |`y`| $$\\le$$ 100。题目保证每个运动员的编号不重复，且每人只打 1 枪。', '输出冠军和菜鸟的编号，中间空 1 格。题目保证他们是唯一的。', 200, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927316541442, 238, '是否存在相等的差', '给定 N 张卡片，正面分别写上 1、2、……、N，然后全部翻面，洗牌，在背面分别写上 1、2、……、N。将每张牌的正反两面数字相减（大减小），得到 N 个非负差值，其中是否存在相等的差？\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（2 $$\\le$$ N $$\\le$$ 10 000），随后一行给出 1 到 N 的一个洗牌后的排列，第 i 个数表示正面写了 i 的那张卡片背面的数字。\n\n### 输出格式：\n\n按照“差值 重复次数”的格式从大到小输出重复的差值及其重复的次数，每行输出一个结果。\n\n### 输入样例：\n```in\n8\n3 5 8 6 2 1 4 7\n```\n\n### 输出样例：\n```out\n5 2\n3 3\n2 2\n```\n', 3, '困难', '输入第一行给出一个正整数 N（2 $$\\le$$ N $$\\le$$ 10 000），随后一行给出 1 到 N 的一个洗牌后的排列，第 i 个数表示正面写了 i 的那张卡片背面的数字。', '按照“差值 重复次数”的格式从大到小输出重复的差值及其重复的次数，每行输出一个结果。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927362678786, 239, '外观数列', '外观数列是指具有以下特点的整数序列：\n\n```\nd, d1, d111, d113, d11231, d112213111, ...\n```\n\n它从不等于 1 的数字 `d` 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 `d`，所以就是 `d1`；第 2 项是 1 个 `d`（对应 `d1`）和 1 个 1（对应 11），所以第 3 项就是 `d111`。又比如第 4 项是 `d113`，其描述就是 1 个 `d`，2 个 1，1 个 3，所以下一项就是 `d11231`。当然这个定义对 `d` = 1 也成立。本题要求你推算任意给定数字 `d` 的外观数列的第 N 项。\n\n### 输入格式：\n\n输入第一行给出 [0,9] 范围内的一个整数 `d`、以及一个正整数 N（$$\\le$$ 40），用空格分隔。\n\n### 输出格式：\n\n在一行中给出数字 `d` 的外观数列的第 N 项。\n\n### 输入样例：\n```in\n1 8\n```\n\n### 输出样例：\n```out\n1123123111\n```\n', 3, '困难', '输入第一行给出 [0,9] 范围内的一个整数 `d`、以及一个正整数 N（$$\\le$$ 40），用空格分隔。', '在一行中给出数字 `d` 的外观数列的第 N 项。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927408816129, 240, 'PAT单位排行', '每次 PAT 考试结束后，考试中心都会发布一个考生单位排行榜。本题就请你实现这个功能。\n\n### 输入格式：\n\n输入第一行给出一个正整数 N（$$\\le 10^5$$），即考生人数。随后 N 行，每行按下列格式给出一个考生的信息：\n\n```\n准考证号 得分 学校\n```\n\n其中`准考证号`是由 6 个字符组成的字符串，其首字母表示考试的级别：`B`代表乙级，`A`代表甲级，`T`代表顶级；`得分`是 [0, 100] 区间内的整数；`学校`是由不超过 6 个英文字母组成的单位码（大小写无关）。注意：题目保证每个考生的准考证号是不同的。\n\n### 输出格式：\n\n首先在一行中输出单位个数。随后按以下格式非降序输出单位的排行榜：\n\n```\n排名 学校 加权总分 考生人数\n```\n\n其中`排名`是该单位的排名（从 1 开始）；`学校`是全部按小写字母输出的单位码；`加权总分`定义为`乙级总分/1.5 + 甲级总分 + 顶级总分*1.5`的**整数部分**；`考生人数`是该属于单位的考生的总人数。\n\n学校首先按加权总分排行。如有并列，则应对应相同的排名，并按考生人数升序输出。如果仍然并列，则按单位码的字典序输出。\n\n### 输入样例：\n```in\n10\nA57908 85 Au\nB57908 54 LanX\nA37487 60 au\nT28374 67 CMU\nT32486 24 hypu\nA66734 92 cmu\nB76378 71 AU\nA47780 45 lanx\nA72809 100 pku\nA03274 45 hypu\n```\n\n### 输出样例：\n```out\n5\n1 cmu 192 2\n1 au 192 3\n3 pku 100 1\n4 hypu 81 2\n4 lanx 81 2\n```\n', 3, '困难', '输入第一行给出一个正整数 N（$$\\le 10^5$$），即考生人数。随后 N 行，每行按下列格式给出一个考生的信息：\n\n```\n准考证号 得分 学校\n```\n\n其中`准考证号`是由 6 个字符组成的字符串，其首字母表示考试的级别：`B`代表乙级，`A`代表甲级，`T`代表顶级；`得分`是 [0, 100] 区间内的整数；`学校`是由不超过 6 个英文字母组成的单位码（大小写无关）。注意：题目保证每个考生的准考证号是不同的。', '首先在一行中输出单位个数。随后按以下格式非降序输出单位的排行榜：\n\n```\n排名 学校 加权总分 考生人数\n```\n\n其中`排名`是该单位的排名（从 1 开始）；`学校`是全部按小写字母输出的单位码；`加权总分`定义为`乙级总分/1.5 + 甲级总分 + 顶级总分*1.5`的**整数部分**；`考生人数`是该属于单位的考生的总人数。\n\n学校首先按加权总分排行。如有并列，则应对应相同的排名，并按考生人数升序输出。如果仍然并列，则按单位码的字典序输出。', 800, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927459147778, 241, '就不告诉你', '做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。\n\n![53.jpg](~/0c3a4497-27c3-45ea-9c8e-5a1ab2df48af.jpg)\n\n\n### 输入格式：\n\n输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。\n\n### 输出格式：\n\n在一行中倒着输出 A 和 B 的乘积。\n\n### 输入样例：\n```in\n5 7\n```\n\n### 输出样例：\n```out\n53\n```\n', 3, '中等', '输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。', '在一行中倒着输出 A 和 B 的乘积。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927505285121, 242, '有多少不同的值', '当自然数 $$n$$ 依次取 1、2、3、……、$$N$$ 时，算式 $$\\lfloor n/2\\rfloor +\\lfloor n/3\\rfloor +\\lfloor n/5\\rfloor $$ 有多少个不同的值？（注：$$\\lfloor x\\rfloor$$ 为取整函数，表示不超过 $$x$$ 的最大自然数，即 $$x$$ 的整数部分。）\n\n### 输入格式：\n\n输入给出一个正整数 $$N$$（$$2 \\le N \\le 10^4$$）。\n\n### 输出格式：\n\n在一行中输出题面中算式取到的不同值的个数。\n\n### 输入样例：\n```in\n2017\n```\n\n### 输出样例：\n```out\n1480\n```\n', 3, '困难', '输入给出一个正整数 $$N$$（$$2 \\le N \\le 10^4$$）。', '在一行中输出题面中算式取到的不同值的个数。', 150, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927543033858, 243, '三人行', '子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”\n\n本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。\n\n### 输入格式：\n\n输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。\n\n### 输出格式：\n\n在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 `Cong`；平等则输出 `Ping`；比你弱则输出 `Gai`。其间以 1 个空格分隔，行首尾不得有多余空格。\n\n注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 `No Solution`。\n\n### 输入样例 1：\n```in\n48 3 7\n```\n\n### 输出样例 1：\n```out\n48 Ping Cong Gai\n```\n\n### 输入样例 2：\n```in\n48 11 6\n```\n\n### 输出样例 2：\n```out\nNo Solution\n```\n', 3, '困难', '输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。', '在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 `Cong`；平等则输出 `Ping`；比你弱则输出 `Gai`。其间以 1 个空格分隔，行首尾不得有多余空格。\n\n注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 `No Solution`。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927576588290, 244, '狼人杀-简单版', '以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是狼人”，2 号玩家说：“3 号是好人”，3 号玩家说：“4 号是狼人”，4 号玩家说：“5 号是好人”，5 号玩家说：“4 号是好人”。已知这 5 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？\n\n本题是这个问题的升级版：已知 $$N$$ 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？\n\n### 输入格式：\n\n输入在第一行中给出一个正整数 $$N$$（$$5 \\le N \\le 100$$）。随后 $$N$$ 行，第 $$i$$ 行给出第 $$i$$ 号玩家说的话（$$1 \\le i \\le N$$），即一个玩家编号，用正号表示好人，负号表示狼人。\n\n### 输出格式：\n\n如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 $$A = { a[1], ..., a[M] }$$ 和 $$B = { b[1], ..., b[M] }$$，若存在 $$0 \\le k < M$$ 使得 $$a[i]=b[i]$$ （$$i \\le k$$），且 $$a[k+1]<b[k+1]$$，则称序列 $$A$$ 小于序列 $$B$$。若无解则输出 `No Solution`。\n\n### 输入样例 1：\n```in\n5\n-2\n+3\n-4\n+5\n+4\n```\n\n### 输出样例 1：\n```out\n1 4\n```\n\n### 输入样例 2：\n```in\n6\n+6\n+3\n+1\n-5\n-2\n+4\n```\n\n### 输出样例 2（解不唯一）：\n```out\n1 5\n```\n\n### 输入样例 3：\n```in\n5\n-2\n-3\n-4\n-5\n-1\n```\n\n### 输出样例 3：\n```out\nNo Solution\n```\n', 3, '困难', '输入在第一行中给出一个正整数 $$N$$（$$5 \\le N \\le 100$$）。随后 $$N$$ 行，第 $$i$$ 行给出第 $$i$$ 号玩家说的话（$$1 \\le i \\le N$$），即一个玩家编号，用正号表示好人，负号表示狼人。', '如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 $$A = { a[1], ..., a[M] }$$ 和 $$B = { b[1], ..., b[M] }$$，若存在 $$0 \\le k < M$$ 使得 $$a[i]=b[i]$$ （$$i \\le k$$），且 $$a[k+1]<b[k+1]$$，则称序列 $$A$$ 小于序列 $$B$$。若无解则输出 `No Solution`。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927605948417, 245, '危险品装箱', '集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。\n\n本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。\n\n### 输入格式：\n\n输入第一行给出两个正整数：$$N$$ ($$\\le 10^4$$) 是成对的不相容物品的对数；$$M$$ ($$\\le 100$$) 是集装箱货品清单的单数。\n\n随后数据分两大块给出。第一块有 $$N$$ 行，每行给出一对不相容的物品。第二块有 $$M$$ 行，每行给出一箱货物的清单，格式如下：\n```\nK G[1] G[2] ... G[K]\n```\n其中 `K` ($$\\le 1000$$) 是物品件数，`G[i]` 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。\n\n### 输出格式：\n\n对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 `Yes`，否则输出 `No`。\n\n### 输入样例：\n```in\n6 3\n20001 20002\n20003 20004\n20005 20006\n20003 20001\n20005 20004\n20004 20006\n4 00001 20004 00002 20003\n5 98823 20002 20003 20006 10010\n3 12345 67890 23333\n```\n\n### 输出样例：\n```out\nNo\nYes\nYes\n```\n', 3, '困难', '输入第一行给出两个正整数：$$N$$ ($$\\le 10^4$$) 是成对的不相容物品的对数；$$M$$ ($$\\le 100$$) 是集装箱货品清单的单数。\n\n随后数据分两大块给出。第一块有 $$N$$ 行，每行给出一对不相容的物品。第二块有 $$M$$ 行，每行给出一箱货物的清单，格式如下：\n```\nK G[1] G[2] ... G[K]\n```\n其中 `K` ($$\\le 1000$$) 是物品件数，`G[i]` 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。', '对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 `Yes`，否则输出 `No`。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927639502849, 246, 'N-自守数', '如果某个数 $$K$$ 的平方乘以 $$N$$ 以后，结果的末尾几位数等于 $$K$$，那么就称这个数为“$$N$$-自守数”。例如 $$3\\times 92^2 = 25 392$$，而 $$25 392$$ 的末尾两位正好是 $$92$$，所以 $$92$$ 是一个 $$3$$-自守数。\n\n本题就请你编写程序判断一个给定的数字是否关于某个 $$N$$ 是 $$N$$-自守数。\n\n### 输入格式：\n\n输入在第一行中给出正整数 $$M$$（$$\\le 20$$），随后一行给出 $$M$$ 个待检测的、不超过 1000 的正整数。\n\n### 输出格式：\n\n对每个需要检测的数字，如果它是 $$N$$-自守数就在一行中输出最小的 $$N$$ 和 $$NK^2$$ 的值，以一个空格隔开；否则输出 `No`。注意题目保证 $$N < 10$$。\n\n### 输入样例：\n```in\n3\n92 5 233\n```\n\n### 输出样例：\n```out\n3 25392\n1 25\nNo\n```\n', 3, '中等', '输入在第一行中给出正整数 $$M$$（$$\\le 20$$），随后一行给出 $$M$$ 个待检测的、不超过 1000 的正整数。', '对每个需要检测的数字，如果它是 $$N$$-自守数就在一行中输出最小的 $$N$$ 和 $$NK^2$$ 的值，以一个空格隔开；否则输出 `No`。注意题目保证 $$N < 10$$。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927673057281, 247, '最好吃的月饼', '月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。\n\n![mk.jpg](~/fcb325a0-7090-4bf4-acb0-d4d7ea832f27.jpg)\n\n\n若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。\n\n### 输入格式：\n\n输入首先给出两个正整数 $$N$$（$$\\le 1000$$）和 $$M$$（$$\\le 100$$），分别为月饼的种类数（于是默认月饼种类从 1 到 $$N$$ 编号）和参与统计的城市数量。\n\n接下来 $$M$$ 行，每行给出 $$N$$ 个非负整数（均不超过 1 百万），其中第 $$i$$ 个整数为第 $$i$$ 种月饼的销量（块）。数字间以空格分隔。\n\n### 输出格式：\n\n在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。\n\n### 输入样例：\n```in\n5 3\n1001 992 0 233 6\n8 0 2018 0 2008\n36 18 0 1024 4\n```\n\n### 输出样例：\n```out\n2018\n3 5\n```\n', 3, '困难', '输入首先给出两个正整数 $$N$$（$$\\le 1000$$）和 $$M$$（$$\\le 100$$），分别为月饼的种类数（于是默认月饼种类从 1 到 $$N$$ 编号）和参与统计的城市数量。\n\n接下来 $$M$$ 行，每行给出 $$N$$ 个非负整数（均不超过 1 百万），其中第 $$i$$ 个整数为第 $$i$$ 种月饼的销量（块）。数字间以空格分隔。', '在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。', 200, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927706611713, 248, '字符串A+B', '给定两个字符串 $$A$$ 和 $$B$$，本题要求你输出 $$A+B$$，即两个字符串的并集。要求先输出 $$A$$，再输出 $$B$$，但**重复的字符必须被剔除**。\n\n### 输入格式：\n\n输入在两行中分别给出 $$A$$ 和 $$B$$，均为长度不超过 $$10^6$$的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。\n\n### 输出格式：\n\n在一行中输出题面要求的 $$A$$ 和 $$B$$ 的和。\n\n### 输入样例：\n```in\nThis is a sample test\nto show you_How it works\n```\n\n### 输出样例：\n```out\nThis ampletowyu_Hrk\n```\n', 3, '困难', '输入在两行中分别给出 $$A$$ 和 $$B$$，均为长度不超过 $$10^6$$的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。', '在一行中输出题面要求的 $$A$$ 和 $$B$$ 的和。', 400, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);
INSERT INTO `question` VALUES (1383829927752749057, 250, '解码PAT准考证', 'PAT 准考证号由 4 部分组成：\n\n- 第 1 位是级别，即 `T` 代表顶级；`A` 代表甲级；`B` 代表乙级；\n- 第 2~4 位是考场编号，范围从 101 到 999；\n- 第 5~10 位是考试日期，格式为年、月、日顺次各占 2 位；\n- 最后 11~13 位是考生编号，范围从 000 到 999。\n\n现给定一系列考生的准考证号和他们的成绩，请你按照要求输出各种统计信息。\n\n### 输入格式：\n\n输入首先在一行中给出两个正整数 $$N$$（$$\\le 10^4$$）和 $$M$$（$$\\le 100$$），分别为考生人数和统计要求的个数。\n\n接下来 $$N$$ 行，每行给出一个考生的准考证号和其分数（在区间 $$[0, 100]$$ 内的整数），其间以空格分隔。\n\n考生信息之后，再给出 $$M$$ 行，每行给出一个统计要求，格式为：`类型 指令`，其中\n\n- `类型` 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 `指令` 则给出代表指定级别的字母；\n- `类型` 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 `指令` 则给出指定考场的编号；\n- `类型` 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 `指令` 则给出指定日期，格式与准考证上日期相同。\n\n### 输出格式：\n\n对每项统计要求，首先在一行中输出 `Case #: 要求`，其中 `#` 是该项要求的编号，从 1 开始；`要求` 即复制输入给出的要求。随后输出相应的统计结果：\n\n- `类型` 为 1 的指令，输出格式与输入的考生信息格式相同，即 `准考证号 成绩`。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）；\n- `类型` 为 2 的指令，按 `人数 总分` 的格式输出；\n- `类型` 为 3 的指令，输出按人数非递增顺序，格式为 `考场编号 总人数`。若人数并列则按考场编号递增顺序输出。\n\n如果查询结果为空，则输出 `NA`。\n\n### 输入样例：\n```in\n8 4\nB123180908127 99\nB102180908003 86\nA112180318002 98\nT107150310127 62\nA107180908108 100\nT123180908010 78\nB112160918035 88\nA107180908021 98\n1 A\n2 107\n3 180908\n2 999\n```\n\n### 输出样例：\n```out\nCase 1: 1 A\nA107180908108 100\nA107180908021 98\nA112180318002 98\nCase 2: 2 107\n3 260\nCase 3: 3 180908\n107 2\n123 2\n102 1\nCase 4: 2 999\nNA\n```\n', 3, '困难', '输入首先在一行中给出两个正整数 $$N$$（$$\\le 10^4$$）和 $$M$$（$$\\le 100$$），分别为考生人数和统计要求的个数。\n\n接下来 $$N$$ 行，每行给出一个考生的准考证号和其分数（在区间 $$[0, 100]$$ 内的整数），其间以空格分隔。\n\n考生信息之后，再给出 $$M$$ 行，每行给出一个统计要求，格式为：`类型 指令`，其中\n\n- `类型` 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 `指令` 则给出代表指定级别的字母；\n- `类型` 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 `指令` 则给出指定考场的编号；\n- `类型` 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 `指令` 则给出指定日期，格式与准考证上日期相同。', '对每项统计要求，首先在一行中输出 `Case #: 要求`，其中 `#` 是该项要求的编号，从 1 开始；`要求` 即复制输入给出的要求。随后输出相应的统计结果：\n\n- `类型` 为 1 的指令，输出格式与输入的考生信息格式相同，即 `准考证号 成绩`。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）；\n- `类型` 为 2 的指令，按 `人数 总分` 的格式输出；\n- `类型` 为 3 的指令，输出按人数非递增顺序，格式为 `考场编号 总人数`。若人数并列则按考场编号递增顺序输出。\n\n如果查询结果为空，则输出 `NA`。', 200, 65536, '2021-04-19 01:09:00', '2021-04-19 01:09:00', 0, NULL);

-- ----------------------------
-- Table structure for question_status
-- ----------------------------
DROP TABLE IF EXISTS `question_status`;
CREATE TABLE `question_status`  (
  `question_status_id` bigint(20) NOT NULL COMMENT '注解',
  `question_id` bigint(20) NULL DEFAULT NULL COMMENT '问题id',
  `question_order` bigint(20) NULL DEFAULT NULL COMMENT '问题序号',
  `question_title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '问题名称',
  `question_type_id` int(8) NULL DEFAULT NULL COMMENT '问题类型id',
  `question_difficulty` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '问题难度',
  `question_submit` int(10) NULL DEFAULT NULL COMMENT '题目上传数',
  `question_success` int(10) NULL DEFAULT NULL COMMENT '问题成功执行数',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`question_status_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of question_status
-- ----------------------------
INSERT INTO `question_status` VALUES (1390899552663425026, 1383271604087263234, 1, '找两个数中最大者', 1, '简单', 11, 7, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552738922498, 1383813203741462530, 2, '求m到n之和', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552747311106, 1383813204123144194, 3, '找两个数中最大者', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552776671233, 1383813204148310018, 4, '数字金字塔', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552793448450, 1383813204173475842, 5, '符号函数', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552810225666, 1383813204198641665, 6, '使用函数求奇数和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552827002881, 1383813204223807490, 7, '使用函数计算两点间的距离', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552843780097, 1383813204257361921, 8, '使用函数求素数和', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552873140226, 1383813204282527745, 9, '使用函数统计指定数字的个数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552889917441, 1383813204316082178, 10, '使用函数输出水仙花数', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552898306050, 1383813204341248002, 11, '使用函数求余弦函数的近似值', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552915083266, 1383813204366413826, 12, '分类统计字符个数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552931860481, 1383813204391579650, 13, '使用函数求特殊a串数列和', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552948637697, 1383813204429328385, 14, '使用函数输出指定范围内的完数', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552965414913, 1383813204454494210, 15, '使用函数输出指定范围内的Fibonacci数', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899552990580737, 1383813204479660034, 16, '使用函数验证哥德巴赫猜想', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553011552258, 1383813204529991681, 17, '使用函数输出一个整数的逆序数', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553032523777, 1383813204588711938, 18, '简单计算器', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553040912385, 1383813204609683458, 19, '统计一行文本的单词个数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553057689601, 1383813204634849282, 20, '求最大值及其下标', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553078661121, 1383813204660015106, 21, '将数组中的数逆序存放', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553095438337, 1383813204680986625, 22, '找出不是两个数组共有的元素', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553103826945, 1383813204706152450, 23, '矩阵运算', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553120604161, 1383813204722929666, 24, '方阵循环右移', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553137381378, 1383813204756484098, 25, '计算天数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553154158594, 1383813204773261314, 26, '查找指定字符', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553170935809, 1383813204798427138, 27, '字符串逆序', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553191907330, 1383813204819398658, 28, '选择法排序', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553200295938, 1383813204848758786, 29, '求一批整数中出现最多的个位数字', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553217073153, 1383813204865536002, 30, '判断上三角矩阵', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553233850370, 1383813204899090434, 31, '求矩阵各行元素之和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553242238977, 1383813204915867650, 32, '找鞍点', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553259016193, 1383813204932644865, 33, '统计大写辅音字母', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553267404802, 1383813204957810689, 34, '字符串替换', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553284182017, 1383813204974587906, 35, '字符串转换成十进制整数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553292570625, 1383813204999753730, 36, '计算两数的和与差', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553309347841, 1383813205020725249, 37, '移动字母', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553317736450, 1383813205037502466, 38, '拆分实数的整数与小数部分', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553334513666, 1383813205062668290, 39, '在数组中查找指定元素', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553342902274, 1383813205087834114, 40, '数组循环右移', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553351290881, 1383813205112999938, 41, '报数', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553368068098, 1383813205138165761, 42, '使用函数实现字符串部分复制', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553376456706, 1383813205167525889, 43, '删除字符', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553389039618, 1383813205175914497, 44, '字符串排序', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553405816834, 1383813205192691713, 45, '输出学生成绩', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553414205442, 1383813205209468929, 46, '判断回文字符串', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553430982657, 1383813205226246146, 47, '分类统计各类字符个数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553451954177, 1383813205243023361, 48, '时间换算', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 1, NULL);
INSERT INTO `question_status` VALUES (1390899553468731394, 1383813205251411970, 49, '平面向量加法', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553477120001, 1383813205268189186, 50, '查找书籍', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553493897217, 1383813205284966401, 51, '通讯录排序', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553502285826, 1383813205301743618, 52, '计算两个复数之积', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553519063041, 1383813205310132226, 53, '按等级统计学生成绩', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553569394690, 1383813205326909441, 54, '使用递归函数计算1到n之和', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553586171906, 1383813205343686658, 55, '判断满足条件的三位数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553594560513, 1383813205356269570, 56, '递归求阶乘和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553611337730, 1383813205373046785, 57, '递归实现指数函数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553619726337, 1383813205394018305, 58, '递归求简单交错幂级数的部分和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553636503554, 1383813205410795522, 59, '递归计算Ackermenn函数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553644892161, 1383813205427572737, 60, '递归求Fabonacci数列', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553661669377, 1383813205435961346, 61, '十进制转换二进制', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553670057986, 1383813205452738561, 62, '递归实现顺序输出整数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553686835201, 1383813205469515777, 63, '输出月份英文名', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553695223810, 1383813205486292994, 64, '查找星期', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553720389633, 1383813205511458818, 65, '计算最长的字符串长度', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553728778241, 1383813205528236033, 66, '字符串的连接', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553737166849, 1383813205545013250, 67, '指定位置输出字符串', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553753944065, 1383813205561790466, 68, '查找子串', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553762332673, 1383813205578567682, 69, '奇数值结点链表', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553787498498, 1383821508266242050, 70, 'Programming in C is fun!', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553795887106, 1383821508564037634, 71, '输出倒三角图案', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553812664322, 1383821508589203457, 72, '温度转换', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553837830145, 1383821508605980674, 73, '计算物体自由下落的距离', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553854607362, 1383821508631146498, 74, '计算摄氏温度', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553871384578, 1383821508698255362, 75, '整数四则运算', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553883967489, 1383821508748587010, 76, '计算分段函数[1]', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553892356098, 1383821508794724354, 77, '计算分段函数[2]', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553900744705, 1383821508857638914, 78, '输出华氏-摄氏温度转换表', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553917521922, 1383821508899581953, 79, '求N分之一序列前N项和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553925910530, 1383821508949913601, 80, '求奇数分之一序列前N项和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553942687746, 1383821508991856642, 81, '求简单交错序列前N项和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553951076353, 1383821509042188289, 82, '生成3的乘方表', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553963659266, 1383821509100908545, 83, '求组合数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553972047874, 1383821509151240193, 84, '求整数均值', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553988825089, 1383821509201571841, 85, '阶梯电价', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899553997213698, 1383821509251903489, 86, '求平方与倒数序列的部分和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554005602305, 1383821509285457922, 87, '求交错序列前N项和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554022379522, 1383821509331595266, 88, '求平方根序列前N项和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554030768130, 1383821509373538305, 89, '求阶乘序列前N项和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554039156737, 1383821509444841474, 90, '计算符号函数的值', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554047545345, 1383821509486784513, 91, '统计学生平均成绩与及格人数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554055933954, 1383821509524533249, 92, '统计字符', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554068516866, 1383821509566476290, 93, '成绩转换', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554076905473, 1383821509608419330, 94, '查询水果价格', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554085294081, 1383821509641973761, 95, '输出闰年', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554102071298, 1383821509675528194, 96, '比较大小', 1, '简单', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554110459906, 1383821509704888321, 97, '高速公路超速处罚', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554127237121, 1383821509738442753, 98, '出租车计价', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554131431425, 1383821509771997185, 99, '统计学生成绩', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554148208641, 1383821509801357313, 100, '三角形判断', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554156597249, 1383821509860077570, 101, '求给定精度的简单交错序列部分和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554164985857, 1383821509897826306, 102, '猜数字游戏', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554173374466, 1383821509935575042, 103, '求e的近似值', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554181763074, 1383821509977518082, 104, '找出最小值', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554198540289, 1383821510019461121, 105, '统计素数并求和', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554206928898, 1383821510057209857, 106, '求奇数和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554215317506, 1383821510099152898, 107, '求幂级数展开的部分和', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554223706114, 1383821510132707330, 108, '求分数序列前N项和', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554265649154, 1383821510178844674, 109, '特殊a串数列求和', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554274037761, 1383821510220787714, 110, '换硬币', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554290814978, 1383821510254342146, 111, '水仙花数', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554303397889, 1383821510292090881, 112, '最大公约数和最小公倍数', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554311786498, 1383821510329839618, 113, '高空坠球', 1, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554320175105, 1383821510363394050, 114, '打印菱形图案', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554332758018, 1383821510401142786, 115, '猴子吃桃问题', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554353729537, 1383821510438891522, 116, '兔子繁衍问题', 1, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554362118145, 1383824455997886465, 117, '二分查找', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554370506754, 1383824456366985218, 118, '有序数组的插入', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554378895362, 1383824456408928257, 119, '递增的整数序列链表的插入', 2, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554395672577, 1383824456434094081, 120, '两个有序链表序列的合并', 2, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554408255490, 1383824456459259906, 121, '递归求简单交错幂级数的部分和', 2, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554416644098, 1383824456492814338, 122, '弹球距离', 2, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554425032705, 1383824456517980162, 123, '线性表元素的区间删除', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554433421314, 1383824456543145986, 124, '求链表的倒数第m个元素', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554441809922, 1383824456568311809, 125, '另类循环队列', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554450198529, 1383824456585089026, 126, '双端队列', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554458587138, 1383824456610254849, 127, '另类堆栈', 2, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554475364353, 1383824456627032066, 128, '是否二叉搜索树', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554483752961, 1383824456652197890, 129, '线性探测法的查找函数', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554500530178, 1383824456677363714, 130, '分离链接法的删除操作函数', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554508918785, 1383824456702529537, 131, '邻接矩阵存储图的深度优先遍历', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554517307394, 1383824456727695362, 132, '邻接表存储图的广度优先遍历', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554534084610, 1383829169074429953, 133, '最大子列和问题', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554546667521, 1383829169451917313, 134, '简单计算器', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554555056129, 1383829169510637569, 135, '数组循环左移', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554571833346, 1383829169573552130, 136, '数列求和-加强版', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554580221953, 1383829169611300865, 137, '输出全排列', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554588610562, 1383829169670021122, 138, '最长连续递增子序列', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554601193473, 1383829169724547073, 139, '一元多项式的乘法与加法运算', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554609582082, 1383829169770684417, 140, '符号配对', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554617970690, 1383829169829404673, 141, '堆栈操作合法性', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554634747906, 1383829169888124930, 142, '汉诺塔的非递归实现', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554647330818, 1383829169942650881, 143, '表达式转换', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554655719425, 1383829170005565441, 144, '根据后序和中序遍历输出先序遍历', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554664108033, 1383829170060091393, 145, '平衡二叉树的根', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554672496642, 1383829170106228738, 146, '堆中的路径', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554680885250, 1383829170177531906, 147, '顺序存储的二叉树的最近的公共祖先问题', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554689273857, 1383829170232057858, 148, '词频统计', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554701856769, 1383829170311749634, 149, '六度空间', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554710245377, 1383829170362081282, 150, '排序', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554718633985, 1383829170408218626, 151, '银行排队问题之单队列多窗口服务', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554735411202, 1383829170458550273, 152, '银行排队问题之单队列多窗口加VIP服务', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554743799810, 1383829170508881921, 153, '银行排队问题之单窗口“夹塞”版', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554760577026, 1383829170550824962, 154, '畅通工程之最低成本建设问题', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554768965634, 1383829170592768001, 155, '畅通工程之局部最小花费问题', 2, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554777354241, 1383829923692662786, 156, '害死人不偿命的(3n+1)猜想', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554785742849, 1383829924032401409, 157, '写出这个数', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554798325761, 1383829924082733058, 158, '我要通过！', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554810908674, 1383829924137259009, 159, '成绩排名', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554823491586, 1383829924179202049, 160, '继续(3n+1)猜想', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554831880193, 1383829924229533698, 161, '换个格式输出整数', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554840268801, 1383829924288253954, 162, '素数对猜想', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554848657409, 1383829924321808385, 163, '数组元素循环右移问题', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554857046018, 1383829924384722945, 164, '说反话', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554869628929, 1383829924426665985, 165, '一元多项式求导', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554878017537, 1383829924481191937, 166, 'A+B 和 C', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554886406146, 1383829924531523586, 167, '数字分类', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554903183362, 1383829924590243842, 168, '数素数', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554911571969, 1383829924636381185, 169, '福尔摩斯的约会', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554919960578, 1383829924690907138, 170, '德才论', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554928349185, 1383829924732850177, 171, '部分A+B', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554945126402, 1383829924795764737, 172, 'A除以B', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554953515009, 1383829924846096385, 173, '锤子剪刀布', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554966097922, 1383829924888039425, 174, '数字黑洞', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554982875138, 1383829924929982465, 175, '月饼', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899554999652354, 1383829924967731201, 176, '个位数统计', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555008040962, 1383829925009674242, 177, 'D进制的A+B', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555016429570, 1383829925043228674, 178, '组个最小数', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555033206785, 1383829925068394498, 179, '科学计数法', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555045789697, 1383829925106143233, 180, '反转链表', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555054178306, 1383829925139697665, 181, '程序运行时间', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555062566913, 1383829925177446401, 182, '打印沙漏', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555079344129, 1383829925219389441, 183, '人口普查', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555083538433, 1383829925252943874, 184, '旧键盘', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555100315650, 1383829925328441346, 185, '完美数列', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555112898562, 1383829925361995777, 186, '查验身份证', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555121287170, 1383829925399744513, 187, '挖掘机技术哪家强', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555129675778, 1383829925441687554, 188, '旧键盘打字', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555146452994, 1383829925475241986, 189, '有理数四则运算', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555154841601, 1383829925508796417, 190, '插入与归并', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555180007426, 1383829925542350849, 191, '跟奥巴马一起编程', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555205173249, 1383829925580099586, 192, '在霍格沃茨找零钱', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555221950466, 1383829925617848321, 193, '统计同成绩学生', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555230339073, 1383829925655597057, 194, '到底买不买', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555247116289, 1383829925697540097, 195, '有几个PAT', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555255504897, 1383829925726900225, 196, '考试座位号', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555263893506, 1383829925768843266, 197, '字符统计', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555280670722, 1383829925806592002, 198, '输出PATest', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555284865026, 1383829925844340737, 199, '火星数字', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:29', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555297447938, 1383829925882089474, 200, '快速排序', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555314225153, 1383829925915643906, 201, '划拳', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555322613762, 1383829925949198338, 202, '编程团体赛', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555331002370, 1383829925982752769, 203, '数字加密', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555343585281, 1383829926012112898, 204, '数列的片段和', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555351973889, 1383829926041473025, 205, '螺旋矩阵', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555368751106, 1383829926079221761, 206, '复数乘法', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555377139714, 1383829926112776194, 207, '卖个萌', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555385528322, 1383829926146330626, 208, '住房空置率', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555398111234, 1383829926188273666, 209, '求平均值', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555414888450, 1383829926226022402, 210, '集体照', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555423277058, 1383829926259576834, 211, '组合数的和', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555431665666, 1383829926305714178, 212, '数零壹', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555444248578, 1383829926347657217, 213, '选择题', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555452637185, 1383829926389600258, 214, 'C语言竞赛', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555461025793, 1383829926427348993, 215, '爱丁顿数', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555469414401, 1383829926473486337, 216, '判断题', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555477803009, 1383829926515429377, 217, '最简分数', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555486191618, 1383829926561566721, 218, '计算谱半径', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555502968834, 1383829926599315457, 219, '朋友数', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555511357442, 1383829926641258498, 220, '单身狗', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555523940353, 1383829926679007234, 221, '图像过滤', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555532328962, 1383829926716755970, 222, '试密码', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555540717570, 1383829926754504705, 223, '万绿丛中一点红', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555557494785, 1383829926783864834, 224, '微博转发抽奖', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555565883393, 1383829926821613570, 225, '结绳', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555574272001, 1383829926855168002, 226, '小赌怡情', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555582660609, 1383829926892916737, 227, '开学寄语', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555595243521, 1383829926930665473, 228, '多选题常见计分法', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555603632130, 1383829926960025601, 229, '宇宙无敌加法器', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555616215042, 1383829926997774337, 230, '链表元素分类', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555624603649, 1383829927031328769, 231, 'Wifi密码', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555641380866, 1383829927069077506, 232, '互评成绩计算', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555649769473, 1383829927106826242, 233, '字符串压缩与解压', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555658158081, 1383829927152963585, 234, '延迟的回文数', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555670740994, 1383829927194906626, 235, 'MOOC期终成绩', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555679129602, 1383829927232655361, 236, '检查密码', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555687518210, 1383829927282987010, 237, '射击比赛', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555695906818, 1383829927316541442, 238, '是否存在相等的差', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555704295426, 1383829927362678786, 239, '外观数列', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555712684034, 1383829927408816129, 240, 'PAT单位排行', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555721072641, 1383829927459147778, 241, '就不告诉你', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555733655554, 1383829927505285121, 242, '有多少不同的值', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555742044161, 1383829927543033858, 243, '三人行', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555750432769, 1383829927576588290, 244, '狼人杀-简单版', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555792375810, 1383829927605948417, 245, '危险品装箱', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555800764418, 1383829927639502849, 246, 'N-自守数', 3, '中等', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555809153025, 1383829927673057281, 247, '最好吃的月饼', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555817541634, 1383829927706611713, 248, '字符串A+B', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555825930241, 1383829927740166145, 249, '谷歌的招聘', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);
INSERT INTO `question_status` VALUES (1390899555842707457, 1383829927752749057, 250, '解码PAT准考证', 3, '困难', 0, 0, '2021-05-08 13:21:10', '2021-05-08 14:42:30', 0, NULL);

-- ----------------------------
-- Table structure for question_type
-- ----------------------------
DROP TABLE IF EXISTS `question_type`;
CREATE TABLE `question_type`  (
  `question_type_id` bigint(20) NOT NULL COMMENT '主键',
  `question_type` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '问题类型',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`question_type_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of question_type
-- ----------------------------
INSERT INTO `question_type` VALUES (1, '基础训练', NULL, NULL, 0, NULL);
INSERT INTO `question_type` VALUES (2, '数据结构', NULL, NULL, 0, NULL);
INSERT INTO `question_type` VALUES (3, '算法训练', NULL, NULL, 0, NULL);
INSERT INTO `question_type` VALUES (1392694071260102658, '测试修改', '2021-05-13 12:11:56', '2021-05-13 12:11:56', 1, NULL);

-- ----------------------------
-- Table structure for role_authority
-- ----------------------------
DROP TABLE IF EXISTS `role_authority`;
CREATE TABLE `role_authority`  (
  `role_authority_id` bigint(20) NOT NULL COMMENT '主键',
  `role_id` bigint(20) NULL DEFAULT NULL COMMENT '角色id',
  `authority_id` bigint(20) NULL DEFAULT NULL COMMENT '权限id',
  `is_auth` tinyint(1) NULL DEFAULT NULL COMMENT '角色是否拥有对应权限',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`role_authority_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of role_authority
-- ----------------------------

-- ----------------------------
-- Table structure for status
-- ----------------------------
DROP TABLE IF EXISTS `status`;
CREATE TABLE `status`  (
  `status_id` bigint(20) NOT NULL COMMENT '主键',
  `status_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '状态名',
  PRIMARY KEY (`status_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of status
-- ----------------------------
INSERT INTO `status` VALUES (0, '通过！');
INSERT INTO `status` VALUES (1, '错误答案！');
INSERT INTO `status` VALUES (2, '输出格式错误');
INSERT INTO `status` VALUES (3, '超出了题目的内存限制');
INSERT INTO `status` VALUES (4, '超出了题目的时间限制');
INSERT INTO `status` VALUES (5, '运行时错误');
INSERT INTO `status` VALUES (6, '编译错误');
INSERT INTO `status` VALUES (7, '使用了不安全的函数');

-- ----------------------------
-- Table structure for sys_authority
-- ----------------------------
DROP TABLE IF EXISTS `sys_authority`;
CREATE TABLE `sys_authority`  (
  `authority_id` bigint(255) NOT NULL COMMENT '主键',
  `authority_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '权限名称',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`authority_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of sys_authority
-- ----------------------------

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `role_id` bigint(20) NOT NULL COMMENT '主键',
  `role_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '角色名称',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`role_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of sys_role
-- ----------------------------

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `user_id` bigint(20) NOT NULL COMMENT '主键',
  `username` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户名',
  `email` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '密码',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `user_type` tinyint(1) NULL DEFAULT NULL COMMENT '用户类型',
  PRIMARY KEY (`user_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES (1391966614093590529, 'admin', '15138081615@163.com', '$2a$10$HR4XaDK13drMqIiqOhdoweJDdFAR6rJdRzdJsArfgWYXIt48G/7f6', '2021-05-11 12:01:17', '2021-05-11 12:01:17', 0, NULL, 1);
INSERT INTO `sys_user` VALUES (1392810435593379842, '往后余生', '1149863397@qq.com', '$2a$10$jMP4HEykLkhg2BAsYSmtWebI1ATbuxirrvDQiBQYh5yWFtynu/Bvq', '2021-05-13 19:54:20', '2021-05-13 19:54:20', 0, NULL, 0);

-- ----------------------------
-- Table structure for user_class
-- ----------------------------
DROP TABLE IF EXISTS `user_class`;
CREATE TABLE `user_class`  (
  `user_class_id` bigint(20) NOT NULL COMMENT '主键',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `real_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '学生姓名',
  `student_id` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '学生学号',
  `class_id` bigint(20) NULL DEFAULT NULL COMMENT '班级id',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`user_class_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of user_class
-- ----------------------------
INSERT INTO `user_class` VALUES (1392832771428192257, 1392810435593379842, '靳辰辰', '2017111538', 1392781599531102210, '2021-05-13 21:23:05', '2021-05-13 21:23:05', 1, NULL);
INSERT INTO `user_class` VALUES (1392843181552373762, 1392810435593379842, '靳辰辰', '2017111538', 1392842152685355010, '2021-05-13 22:04:27', '2021-05-13 22:04:27', 1, NULL);
INSERT INTO `user_class` VALUES (1393111210626396162, 1392810435593379842, '靳辰辰', '2017111149', 1392842152685355010, '2021-05-14 15:49:30', '2021-05-14 16:07:36', 0, NULL);

-- ----------------------------
-- Table structure for user_info
-- ----------------------------
DROP TABLE IF EXISTS `user_info`;
CREATE TABLE `user_info`  (
  `user_info_id` bigint(20) NOT NULL COMMENT '主键',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `sex` varchar(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '性别',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `img` varchar(2048) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像图片路径',
  `birthday` datetime(0) NULL DEFAULT NULL COMMENT '生日',
  `problem_submit` int(10) NULL DEFAULT NULL COMMENT '题目提交数',
  `problem_success` int(10) NULL DEFAULT NULL COMMENT '题目成功数',
  `user_type` tinyint(1) NULL DEFAULT 0 COMMENT '用户类型',
  `is_authenticate` tinyint(1) NULL DEFAULT 0 COMMENT '是否认证',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`user_info_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of user_info
-- ----------------------------
INSERT INTO `user_info` VALUES (1391966614714347521, 1391966614093590529, 'admin', '男', '15138081615@163.com', '4cff3fb5-eb6d-4e14-ad1c-45c5478adc99test.jpg', '2015-05-11 00:00:00', 0, 0, 1, 0, '2021-05-11 12:01:17', '2021-05-11 12:47:31', 0, NULL);
INSERT INTO `user_info` VALUES (1392810435664683009, 1392810435593379842, '往后余生', '男', '1149863397@qq.com', 'default.jpg', '2021-05-13 00:00:00', 11, 7, 0, 1, '2021-05-13 19:54:20', '2021-05-14 19:14:02', 0, NULL);

-- ----------------------------
-- Table structure for user_pass
-- ----------------------------
DROP TABLE IF EXISTS `user_pass`;
CREATE TABLE `user_pass`  (
  `user_pass_id` bigint(20) NOT NULL COMMENT '主键',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `question_id` bigint(20) NULL DEFAULT NULL COMMENT '问题id',
  `is_passed` tinyint(1) NULL DEFAULT NULL COMMENT '是否通过',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`user_pass_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of user_pass
-- ----------------------------
INSERT INTO `user_pass` VALUES (1393159791886471169, 1392810435593379842, 1383271604087263234, 1, '2021-05-14 19:02:33', '2021-05-14 19:14:03', 0, NULL);

-- ----------------------------
-- Table structure for user_pass_rate
-- ----------------------------
DROP TABLE IF EXISTS `user_pass_rate`;
CREATE TABLE `user_pass_rate`  (
  `user_pass_rate_id` bigint(20) NOT NULL COMMENT '主键',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `user_pass_rate` decimal(10, 0) NULL DEFAULT NULL COMMENT '通过率',
  `user_pass_num` int(11) NULL DEFAULT NULL COMMENT '通过数量',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`user_pass_rate_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of user_pass_rate
-- ----------------------------

-- ----------------------------
-- Table structure for user_role
-- ----------------------------
DROP TABLE IF EXISTS `user_role`;
CREATE TABLE `user_role`  (
  `user_role_id` bigint(20) NOT NULL COMMENT '主键',
  `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户id',
  `role_id` bigint(20) NULL DEFAULT NULL COMMENT '角色id',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '是否删除，0为未删除，1为删除',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`user_role_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of user_role
-- ----------------------------

SET FOREIGN_KEY_CHECKS = 1;
